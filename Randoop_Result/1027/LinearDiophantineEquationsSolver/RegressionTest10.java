package LinearDiophantineEquationsSolver;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test5001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5001");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), (int) (short) 100, (int) (byte) 10);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(solution5);
    }

    @Test
    public void test5002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5002");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) 1);
        gcdSolutionWrapper2.setGcd(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 0);
        gcdSolutionWrapper2.setSolution(solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        gcdSolutionWrapper2.setSolution(solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        int int21 = solution20.getX();
        int int22 = solution20.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution20);
        gcdSolutionWrapper23.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int30 = solution29.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution29);
        boolean boolean32 = gcdSolutionWrapper23.equals((java.lang.Object) solution29);
        java.lang.String str33 = solution29.toString();
        solution29.setY((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(96, solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution29);
        gcdSolutionWrapper2.setSolution(solution29);
        java.lang.String str39 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(96, (int) (byte) -1);
        gcdSolutionWrapper2.setSolution(solution42);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Solution[x=1, y=52]" + "'", str33, "Solution[x=1, y=52]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=-1]]" + "'", str39, "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=-1]]");
    }

    @Test
    public void test5003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5003");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str6 = equation3.toString();
        int int7 = equation3.b();
        int int8 = equation3.b();
        java.lang.String str9 = equation3.toString();
        java.lang.String str10 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str6, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str9, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str10, "Equation[a=97, b=0, c=52]");
    }

    @Test
    public void test5004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5004");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) solution25);
        boolean boolean28 = gcdSolutionWrapper13.equals((java.lang.Object) (short) 0);
        int int29 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution31);
        gcdSolutionWrapper32.setGcd((int) ' ');
        gcdSolutionWrapper32.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int40 = solution39.getY();
        java.lang.String str41 = solution39.toString();
        solution39.setX((int) (short) 1);
        boolean boolean45 = solution39.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper32.setSolution(solution39);
        boolean boolean47 = gcdSolutionWrapper13.equals((java.lang.Object) gcdSolutionWrapper32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int52 = equation51.c();
        int int53 = equation51.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation51);
        gcdSolutionWrapper32.setSolution(solution54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        java.lang.String str59 = solution58.toString();
        solution58.setX((int) '#');
        gcdSolutionWrapper32.setSolution(solution58);
        java.lang.String str63 = gcdSolutionWrapper32.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = gcdSolutionWrapper32.getSolution();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Solution[x=97, y=1]" + "'", str41, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(solution54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Solution[x=32, y=10]" + "'", str59, "Solution[x=32, y=10]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GcdSolutionWrapper[gcd=100, solution=Solution[x=35, y=10]]" + "'", str63, "GcdSolutionWrapper[gcd=100, solution=Solution[x=35, y=10]]");
        org.junit.Assert.assertNotNull(solution64);
    }

    @Test
    public void test5005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5005");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 1, 0);
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        java.lang.String str6 = equation3.toString();
        int int7 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int9 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str5, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str6, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(solution10);
    }

    @Test
    public void test5006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5006");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) '#');
        int int5 = solution4.getY();
        int int6 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(100, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution4);
        java.lang.Class<?> wildcardClass9 = solution4.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test5007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5007");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        gcdSolutionWrapper3.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper3.getSolution();
        int int9 = gcdSolutionWrapper3.getGcd();
        gcdSolutionWrapper3.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        solution16.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean23 = solution16.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper3.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution28);
        java.lang.String str34 = solution28.toString();
        gcdSolutionWrapper3.setSolution(solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        solution40.setY((int) (byte) 1);
        boolean boolean45 = solution40.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int50 = solution49.getY();
        java.lang.String str51 = solution49.toString();
        boolean boolean53 = solution49.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper46.setSolution(solution49);
        solution49.setX(1);
        boolean boolean57 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        gcdSolutionWrapper36.setGcd((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution60 = gcdSolutionWrapper36.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = gcdSolutionWrapper36.getSolution();
        solution61.setX((int) 'a');
        org.junit.Assert.assertNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=1, y=1]" + "'", str34, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Solution[x=97, y=1]" + "'", str51, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(solution60);
        org.junit.Assert.assertNotNull(solution61);
    }

    @Test
    public void test5008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5008");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 10, 1, 125);
    }

    @Test
    public void test5009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5009");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        int int3 = solution2.getX();
        solution2.setY((int) (short) 0);
        java.lang.Class<?> wildcardClass6 = solution2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test5010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5010");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        java.lang.String str6 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution3);
        java.lang.String str8 = gcdSolutionWrapper7.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        int int12 = solution11.getX();
        gcdSolutionWrapper7.setSolution(solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution17);
        java.lang.String str19 = gcdSolutionWrapper18.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper18.getSolution();
        gcdSolutionWrapper18.setGcd(52);
        java.lang.String str23 = gcdSolutionWrapper18.toString();
        boolean boolean24 = gcdSolutionWrapper7.equals((java.lang.Object) gcdSolutionWrapper18);
        java.lang.Object obj25 = null;
        boolean boolean26 = gcdSolutionWrapper18.equals(obj25);
        java.lang.String str27 = gcdSolutionWrapper18.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=97, y=1]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str19, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]" + "'", str23, "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]" + "'", str27, "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]");
    }

    @Test
    public void test5011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5011");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, 375);
    }

    @Test
    public void test5012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5012");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 97, (int) ' ');
    }

    @Test
    public void test5013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5013");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution4);
        gcdSolutionWrapper10.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper10.getSolution();
        solution13.setX((int) (short) 0);
        int int16 = solution13.getY();
        solution13.setX(0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test5014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5014");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper2.getSolution();
        java.lang.String str12 = gcdSolutionWrapper2.toString();
        java.lang.String str13 = gcdSolutionWrapper2.toString();
        gcdSolutionWrapper2.setGcd(100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        java.lang.String str20 = equation19.toString();
        int int21 = equation19.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int27 = equation26.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        int int29 = equation26.b();
        boolean boolean30 = solution22.equals((java.lang.Object) int29);
        gcdSolutionWrapper2.setSolution(solution22);
        int int32 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution35);
        boolean boolean38 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        java.lang.String str39 = gcdSolutionWrapper36.toString();
        gcdSolutionWrapper36.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper36.setSolution(solution44);
        int int46 = solution44.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution44);
        java.lang.String str48 = solution44.toString();
        solution44.setX((int) (byte) 10);
        int int51 = solution44.getX();
        solution44.setX((int) '4');
        gcdSolutionWrapper2.setSolution(solution44);
        int int55 = solution44.getY();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]" + "'", str12, "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]" + "'", str13, "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Equation[a=10, b=10, c=52]" + "'", str20, "Equation[a=10, b=10, c=52]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str39, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=100, y=-1]" + "'", str48, "Solution[x=100, y=-1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test5015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5015");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        int int16 = gcdSolutionWrapper9.getGcd();
        int int17 = gcdSolutionWrapper9.getGcd();
        java.lang.Class<?> wildcardClass18 = gcdSolutionWrapper9.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test5016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5016");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(1, (-75), (-35));
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=1, b=-75, c=-35]" + "'", str4, "Equation[a=1, b=-75, c=-35]");
    }

    @Test
    public void test5017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5017");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str5 = equation4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution6);
        gcdSolutionWrapper7.setGcd((-35));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str14 = equation13.toString();
        int int15 = equation13.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        java.lang.String str22 = solution20.toString();
        solution20.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution20);
        gcdSolutionWrapper26.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = gcdSolutionWrapper26.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution33);
        java.lang.String str35 = gcdSolutionWrapper34.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper34.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int41 = equation40.c();
        int int42 = equation40.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int47 = solution46.getY();
        solution46.setY((int) (byte) 1);
        boolean boolean51 = solution46.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = gcdSolutionWrapper52.getSolution();
        java.lang.String str54 = gcdSolutionWrapper52.toString();
        gcdSolutionWrapper52.setGcd((int) (byte) 1);
        boolean boolean57 = equation40.equals((java.lang.Object) gcdSolutionWrapper52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        boolean boolean59 = gcdSolutionWrapper34.equals((java.lang.Object) solution58);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int64 = solution63.getY();
        solution63.setY((int) (byte) 1);
        boolean boolean68 = solution63.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution63);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int73 = solution72.getY();
        java.lang.String str74 = solution72.toString();
        boolean boolean76 = solution72.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper69.setSolution(solution72);
        int int78 = solution72.getX();
        boolean boolean79 = solution58.equals((java.lang.Object) solution72);
        gcdSolutionWrapper26.setSolution(solution58);
        boolean boolean81 = equation13.equals((java.lang.Object) solution58);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution82 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        java.lang.String str83 = equation13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution84 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution85 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        int int86 = solution85.getX();
        gcdSolutionWrapper7.setSolution(solution85);
        int int88 = gcdSolutionWrapper7.getGcd();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str14, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=97, y=1]" + "'", str22, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str35, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(solution53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str54, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Solution[x=97, y=1]" + "'", str74, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(solution82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str83, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution84);
        org.junit.Assert.assertNotNull(solution85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-35) + "'", int88 == (-35));
    }

    @Test
    public void test5018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5018");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-75), (int) (short) 0);
        int int3 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-75) + "'", int3 == (-75));
    }

    @Test
    public void test5019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5019");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (byte) 10, (int) (short) -1);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str9 = equation8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        solution16.setY((int) (byte) 1);
        gcdSolutionWrapper13.setSolution(solution16);
        int int21 = gcdSolutionWrapper13.getGcd();
        boolean boolean22 = solution10.equals((java.lang.Object) gcdSolutionWrapper13);
        boolean boolean23 = equation3.equals((java.lang.Object) solution10);
        int int24 = equation3.c();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=100, b=10, c=-1]" + "'", str4, "Equation[a=100, b=10, c=-1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str9, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test5020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5020");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        int int13 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        solution20.setY((int) (byte) 1);
        boolean boolean25 = solution20.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        boolean boolean33 = solution29.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper26.setSolution(solution29);
        int int35 = solution29.getX();
        int int36 = solution29.getY();
        gcdSolutionWrapper8.setSolution(solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, 32);
        gcdSolutionWrapper8.setSolution(solution40);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test5021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5021");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        int int13 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        solution20.setY((int) (byte) 1);
        boolean boolean25 = solution20.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        boolean boolean33 = solution29.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper26.setSolution(solution29);
        int int35 = solution29.getX();
        int int36 = solution29.getY();
        gcdSolutionWrapper8.setSolution(solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = gcdSolutionWrapper8.getSolution();
        java.lang.String str39 = gcdSolutionWrapper8.toString();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str39, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test5022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5022");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = solution4.toString();
        int int6 = solution4.getY();
        solution4.setY(0);
        int int9 = solution4.getX();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=0, y=0]" + "'", str5, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test5023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5023");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, (int) (byte) 0);
        solution3.setY((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        java.lang.String str21 = solution19.toString();
        boolean boolean23 = solution19.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper16.setSolution(solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper25.getSolution();
        int int27 = gcdSolutionWrapper25.getGcd();
        int int28 = gcdSolutionWrapper25.getGcd();
        int int29 = gcdSolutionWrapper25.getGcd();
        java.lang.String str30 = gcdSolutionWrapper25.toString();
        int int31 = gcdSolutionWrapper25.getGcd();
        boolean boolean32 = solution3.equals((java.lang.Object) int31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=97, y=1]" + "'", str21, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GcdSolutionWrapper[gcd=97, solution=Solution[x=97, y=1]]" + "'", str30, "GcdSolutionWrapper[gcd=97, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test5024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5024");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int25 = equation24.c();
        int int26 = equation24.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        solution30.setY((int) (byte) 1);
        boolean boolean35 = solution30.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper36.getSolution();
        java.lang.String str38 = gcdSolutionWrapper36.toString();
        gcdSolutionWrapper36.setGcd((int) (byte) 1);
        boolean boolean41 = equation24.equals((java.lang.Object) gcdSolutionWrapper36);
        boolean boolean42 = equation3.equals((java.lang.Object) equation24);
        int int43 = equation24.a();
        int int44 = equation24.b();
        java.lang.String str45 = equation24.toString();
        int int46 = equation24.b();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str38, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str45, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test5025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5025");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) (short) 100, (int) (short) 0);
        int int4 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test5026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5026");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution3);
        java.lang.String str8 = gcdSolutionWrapper7.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str13 = equation12.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        solution14.setY((int) (byte) 10);
        solution14.setY((int) (byte) 10);
        int int19 = solution14.getX();
        int int20 = solution14.getX();
        gcdSolutionWrapper7.setSolution(solution14);
        java.lang.Object obj22 = null;
        boolean boolean23 = gcdSolutionWrapper7.equals(obj22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper7.getSolution();
        java.lang.String str25 = gcdSolutionWrapper7.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=97, y=1]]" + "'", str8, "GcdSolutionWrapper[gcd=10, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str13, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=0, y=10]]" + "'", str25, "GcdSolutionWrapper[gcd=10, solution=Solution[x=0, y=10]]");
    }

    @Test
    public void test5027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5027");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int20 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = gcdSolutionWrapper9.equals((java.lang.Object) equation19);
        int int23 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        int int25 = equation19.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (-1), (int) (short) 10);
        boolean boolean31 = equation19.equals((java.lang.Object) 35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test5028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5028");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        int int9 = solution8.getX();
        int int10 = solution8.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution8);
        boolean boolean12 = solution2.equals((java.lang.Object) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        solution18.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        int int28 = solution27.getX();
        int int29 = solution27.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution27);
        int int31 = solution27.getX();
        gcdSolutionWrapper21.setSolution(solution27);
        boolean boolean33 = solution2.equals((java.lang.Object) gcdSolutionWrapper21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution37);
        int int39 = gcdSolutionWrapper38.getGcd();
        gcdSolutionWrapper38.setGcd(1);
        boolean boolean42 = gcdSolutionWrapper21.equals((java.lang.Object) gcdSolutionWrapper38);
        java.lang.String str43 = gcdSolutionWrapper38.toString();
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=-1, y=10]]" + "'", str43, "GcdSolutionWrapper[gcd=1, solution=Solution[x=-1, y=10]]");
    }

    @Test
    public void test5029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5029");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test5030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5030");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, 10, (int) (byte) 1);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        int int10 = equation8.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        solution11.setY(0);
        java.lang.String str14 = solution11.toString();
        boolean boolean15 = equation3.equals((java.lang.Object) solution11);
        int int16 = equation3.a();
        int int17 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        solution22.setY((int) (byte) 1);
        boolean boolean27 = solution22.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution22);
        int int30 = gcdSolutionWrapper29.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = gcdSolutionWrapper29.getSolution();
        java.lang.String str32 = solution31.toString();
        boolean boolean33 = equation3.equals((java.lang.Object) str32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=0, y=0]" + "'", str14, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Solution[x=97, y=1]" + "'", str32, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test5031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5031");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getX();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        boolean boolean14 = gcdSolutionWrapper12.equals((java.lang.Object) 1);
        gcdSolutionWrapper12.setGcd(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 0);
        gcdSolutionWrapper12.setSolution(solution19);
        gcdSolutionWrapper9.setSolution(solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper22.getSolution();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution23);
    }

    @Test
    public void test5032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5032");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        boolean boolean15 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        solution20.setY(0);
        gcdSolutionWrapper14.setSolution(solution20);
        java.lang.String str24 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper14.getSolution();
        solution26.setX((int) (byte) -1);
        solution26.setX((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution26);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution20);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=375, y=0]]" + "'", str24, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=375, y=0]]");
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertNotNull(solution26);
    }

    @Test
    public void test5033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5033");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        int int7 = equation3.a();
        int int8 = equation3.c();
        int int9 = equation3.b();
        int int10 = equation3.a();
        java.lang.String str11 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int13 = equation3.a();
        int int14 = equation3.c();
        int int15 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str11, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test5034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5034");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 52);
        int int3 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test5035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5035");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution3);
        boolean boolean6 = gcdSolutionWrapper4.equals((java.lang.Object) 1);
        java.lang.String str7 = gcdSolutionWrapper4.toString();
        gcdSolutionWrapper4.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper4.setSolution(solution12);
        int int14 = solution12.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        java.lang.String str16 = solution12.toString();
        int int17 = solution12.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(125, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(97, 0);
        solution21.setX((int) (byte) -1);
        gcdSolutionWrapper18.setSolution(solution21);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str7, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=100, y=-1]" + "'", str16, "Solution[x=100, y=-1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test5036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5036");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        solution6.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        solution19.setY((int) (byte) 1);
        boolean boolean24 = solution19.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper25.getSolution();
        java.lang.String str27 = gcdSolutionWrapper25.toString();
        gcdSolutionWrapper25.setGcd((int) (byte) 1);
        boolean boolean30 = equation15.equals((java.lang.Object) gcdSolutionWrapper25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int35 = equation34.c();
        int int36 = equation34.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation34);
        boolean boolean38 = gcdSolutionWrapper25.equals((java.lang.Object) solution37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str43 = equation42.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation42);
        solution44.setY((int) (byte) 10);
        gcdSolutionWrapper25.setSolution(solution44);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution44);
        int int49 = gcdSolutionWrapper48.getGcd();
        boolean boolean50 = gcdSolutionWrapper10.equals((java.lang.Object) int49);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = gcdSolutionWrapper10.getSolution();
        int int52 = gcdSolutionWrapper10.getGcd();
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str27, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str43, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(solution51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
    }

    @Test
    public void test5037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5037");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', (int) (byte) -1, (int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.a();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test5038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5038");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution4);
        int int6 = gcdSolutionWrapper5.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        gcdSolutionWrapper9.setGcd((int) ' ');
        gcdSolutionWrapper9.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper9.getSolution();
        int int15 = gcdSolutionWrapper9.getGcd();
        gcdSolutionWrapper9.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation21);
        solution22.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean29 = solution22.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper9.setSolution(solution22);
        gcdSolutionWrapper5.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int36 = equation35.c();
        int int37 = equation35.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int42 = solution41.getY();
        solution41.setY((int) (byte) 1);
        boolean boolean46 = solution41.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = gcdSolutionWrapper47.getSolution();
        java.lang.String str49 = gcdSolutionWrapper47.toString();
        gcdSolutionWrapper47.setGcd((int) (byte) 1);
        boolean boolean52 = equation35.equals((java.lang.Object) gcdSolutionWrapper47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = gcdSolutionWrapper47.getSolution();
        int int54 = solution53.getX();
        solution53.setY((int) 'a');
        gcdSolutionWrapper5.setSolution(solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int64 = solution63.getX();
        int int65 = solution63.getX();
        solution63.setX((int) ' ');
        int int68 = solution63.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution63);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution63);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = gcdSolutionWrapper70.getSolution();
        gcdSolutionWrapper58.setSolution(solution71);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str49, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(solution53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 32 + "'", int68 == 32);
        org.junit.Assert.assertNotNull(solution71);
    }

    @Test
    public void test5039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5039");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, 125, (int) (short) 0);
        int int4 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 125 + "'", int4 == 125);
    }

    @Test
    public void test5040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5040");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, 32, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
    }

    @Test
    public void test5041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5041");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean10 = solution3.equals((java.lang.Object) solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', (int) '4', 125);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) -1, (-35));
        java.lang.String str20 = equation19.toString();
        boolean boolean21 = equation15.equals((java.lang.Object) equation19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        int int24 = solution23.getX();
        gcdSolutionWrapper11.setSolution(solution23);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Equation[a=100, b=-1, c=-35]" + "'", str20, "Equation[a=100, b=-1, c=-35]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 375 + "'", int24 == 375);
    }

    @Test
    public void test5042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5042");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int23 = solution22.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution22);
        java.lang.String str25 = gcdSolutionWrapper24.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper24.getSolution();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-35) + "'", int23 == (-35));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=-35]]" + "'", str25, "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution26);
    }

    @Test
    public void test5043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5043");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        solution3.setY(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        java.lang.String str13 = solution10.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution10);
        int int15 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper14.getSolution();
        boolean boolean17 = solution3.equals((java.lang.Object) gcdSolutionWrapper14);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=97, y=1]" + "'", str13, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test5044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5044");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        boolean boolean17 = solution13.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper10.setSolution(solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution13);
        gcdSolutionWrapper19.setGcd(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution.INFINITE_SOLUTIONS;
        solution22.setY((int) (short) 100);
        solution22.setY((int) (byte) 1);
        solution22.setX((int) (short) 100);
        solution22.setY((int) (byte) 100);
        boolean boolean31 = gcdSolutionWrapper19.equals((java.lang.Object) solution22);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test5045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5045");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        java.lang.String str3 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int11 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution14);
        boolean boolean17 = gcdSolutionWrapper15.equals((java.lang.Object) 1);
        boolean boolean18 = equation10.equals((java.lang.Object) boolean17);
        int int19 = equation10.a();
        boolean boolean20 = solution6.equals((java.lang.Object) int19);
        solution6.setY(10);
        boolean boolean23 = solution2.equals((java.lang.Object) solution6);
        int int24 = solution2.getY();
        int int25 = solution2.getY();
        int int26 = solution2.getY();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=100, y=32]" + "'", str3, "Solution[x=100, y=32]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
    }

    @Test
    public void test5046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5046");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int4 = solution3.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        gcdSolutionWrapper9.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        java.lang.String str16 = solution14.toString();
        gcdSolutionWrapper9.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        solution21.setY((int) (byte) 1);
        boolean boolean26 = solution21.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = gcdSolutionWrapper27.getSolution();
        java.lang.String str29 = gcdSolutionWrapper27.toString();
        gcdSolutionWrapper27.setGcd((int) (byte) 1);
        int int32 = gcdSolutionWrapper27.getGcd();
        boolean boolean33 = solution14.equals((java.lang.Object) gcdSolutionWrapper27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution14);
        gcdSolutionWrapper5.setSolution(solution14);
        java.lang.String str36 = gcdSolutionWrapper5.toString();
        gcdSolutionWrapper5.setGcd(1);
        gcdSolutionWrapper5.setGcd((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str29, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str36, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test5047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5047");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        int int10 = solution9.getX();
        int int11 = solution9.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution9);
        java.lang.String str13 = solution9.toString();
        boolean boolean14 = solution2.equals((java.lang.Object) solution9);
        solution9.setX((int) (byte) 1);
        solution9.setY((-1));
        solution9.setY((-1));
        int int21 = solution9.getY();
        solution9.setX((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=0, y=0]" + "'", str13, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test5048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5048");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.b();
        java.lang.Object obj7 = null;
        boolean boolean8 = equation3.equals(obj7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution9.setY((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution9);
    }

    @Test
    public void test5049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5049");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, (int) '#', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.Object obj6 = null;
        boolean boolean7 = equation3.equals(obj6);
        java.lang.String str8 = equation3.toString();
        java.lang.Class<?> wildcardClass9 = equation3.getClass();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=10, b=35, c=0]" + "'", str8, "Equation[a=10, b=35, c=0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test5050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5050");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-75), 52, 0);
        int int4 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
    }

    @Test
    public void test5051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5051");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution24);
        java.lang.String str26 = gcdSolutionWrapper25.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str31 = equation30.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        boolean boolean33 = gcdSolutionWrapper25.equals((java.lang.Object) solution32);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str36 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution37.setX((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str26, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str31, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str36, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertNotNull(solution37);
    }

    @Test
    public void test5052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5052");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        solution10.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution10);
        gcdSolutionWrapper16.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution23);
        java.lang.String str25 = gcdSolutionWrapper24.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper24.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int31 = equation30.c();
        int int32 = equation30.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        boolean boolean41 = solution36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper42.getSolution();
        java.lang.String str44 = gcdSolutionWrapper42.toString();
        gcdSolutionWrapper42.setGcd((int) (byte) 1);
        boolean boolean47 = equation30.equals((java.lang.Object) gcdSolutionWrapper42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        boolean boolean49 = gcdSolutionWrapper24.equals((java.lang.Object) solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        solution53.setY((int) (byte) 1);
        boolean boolean58 = solution53.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int63 = solution62.getY();
        java.lang.String str64 = solution62.toString();
        boolean boolean66 = solution62.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper59.setSolution(solution62);
        int int68 = solution62.getX();
        boolean boolean69 = solution48.equals((java.lang.Object) solution62);
        gcdSolutionWrapper16.setSolution(solution48);
        boolean boolean71 = equation3.equals((java.lang.Object) solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str73 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution74 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int76 = solution75.getX();
        solution75.setY(35);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str25, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str44, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(solution72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str73, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution74);
        org.junit.Assert.assertNotNull(solution75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test5053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5053");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 125, 97);
        int int4 = equation3.c();
        int int5 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 125 + "'", int5 == 125);
    }

    @Test
    public void test5054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5054");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 100, (int) (byte) 100);
        int int4 = equation3.b();
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.c();
        int int7 = equation3.c();
        boolean boolean9 = equation3.equals((java.lang.Object) "GcdSolutionWrapper[gcd=10, solution=Solution[x=0, y=35]]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=-35, b=100, c=100]" + "'", str5, "Equation[a=-35, b=100, c=100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test5055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5055");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 1, 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.c();
        int int6 = equation3.b();
        int int7 = equation3.a();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test5056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5056");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        int int24 = equation3.a();
        int int25 = equation3.a();
        java.lang.String str26 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str26, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test5057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5057");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str13 = equation12.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        java.lang.Class<?> wildcardClass15 = equation12.getClass();
        boolean boolean16 = gcdSolutionWrapper8.equals((java.lang.Object) equation12);
        gcdSolutionWrapper8.setGcd((int) (short) 1);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str13, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test5058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5058");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, (int) 'a');
        java.lang.String str3 = solution2.toString();
        int int4 = solution2.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        solution10.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution10);
        java.lang.String str17 = solution10.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution10);
        int int19 = gcdSolutionWrapper18.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper18.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int25 = equation24.c();
        int int26 = equation24.b();
        int int27 = equation24.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution35);
        boolean boolean38 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        boolean boolean39 = equation31.equals((java.lang.Object) boolean38);
        int int40 = equation31.a();
        int int41 = equation31.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution43);
        gcdSolutionWrapper44.setGcd((int) ' ');
        gcdSolutionWrapper44.setGcd((int) (short) 1);
        int int49 = gcdSolutionWrapper44.getGcd();
        int int50 = gcdSolutionWrapper44.getGcd();
        boolean boolean51 = equation31.equals((java.lang.Object) int50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int58 = solution57.getY();
        solution57.setY((int) (byte) 1);
        gcdSolutionWrapper54.setSolution(solution57);
        boolean boolean62 = equation31.equals((java.lang.Object) gcdSolutionWrapper54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        boolean boolean65 = equation24.equals((java.lang.Object) equation31);
        int int66 = equation31.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int71 = equation70.c();
        int int72 = equation70.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int77 = solution76.getY();
        solution76.setY((int) (byte) 1);
        boolean boolean81 = solution76.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper82 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution76);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution83 = gcdSolutionWrapper82.getSolution();
        java.lang.String str84 = gcdSolutionWrapper82.toString();
        gcdSolutionWrapper82.setGcd((int) (byte) 1);
        boolean boolean87 = equation70.equals((java.lang.Object) gcdSolutionWrapper82);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution88 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation70);
        int int89 = equation70.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution90 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation70);
        boolean boolean91 = equation31.equals((java.lang.Object) equation70);
        int int92 = equation31.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution93 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        gcdSolutionWrapper18.setSolution(solution93);
        boolean boolean95 = solution2.equals((java.lang.Object) gcdSolutionWrapper18);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=10, y=97]" + "'", str3, "Solution[x=10, y=97]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=1, y=1]" + "'", str17, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(solution63);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(solution83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str84, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(solution88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(solution90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(solution93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test5059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5059");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper4.getSolution();
        java.lang.String str8 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper4.getSolution();
        gcdSolutionWrapper4.setGcd((int) (byte) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution9);
    }

    @Test
    public void test5060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5060");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution14);
        java.lang.String str16 = gcdSolutionWrapper15.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int22 = equation21.c();
        int int23 = equation21.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        solution27.setY((int) (byte) 1);
        boolean boolean32 = solution27.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = gcdSolutionWrapper33.getSolution();
        java.lang.String str35 = gcdSolutionWrapper33.toString();
        gcdSolutionWrapper33.setGcd((int) (byte) 1);
        boolean boolean38 = equation21.equals((java.lang.Object) gcdSolutionWrapper33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation21);
        boolean boolean40 = gcdSolutionWrapper15.equals((java.lang.Object) solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int45 = solution44.getY();
        solution44.setY((int) (byte) 1);
        boolean boolean49 = solution44.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution44);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        java.lang.String str55 = solution53.toString();
        boolean boolean57 = solution53.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper50.setSolution(solution53);
        int int59 = solution53.getX();
        boolean boolean60 = solution39.equals((java.lang.Object) solution53);
        boolean boolean61 = solution10.equals((java.lang.Object) solution53);
        int int62 = solution10.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str16, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str35, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Solution[x=97, y=1]" + "'", str55, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test5061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5061");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, 0, 97);
    }

    @Test
    public void test5062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5062");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = solution4.getX();
        solution4.setX((-75));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        int int17 = solution16.getX();
        int int18 = solution16.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution16);
        boolean boolean20 = solution10.equals((java.lang.Object) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation25);
        solution26.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation34);
        int int36 = solution35.getX();
        int int37 = solution35.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution35);
        int int39 = solution35.getX();
        gcdSolutionWrapper29.setSolution(solution35);
        boolean boolean41 = solution10.equals((java.lang.Object) gcdSolutionWrapper29);
        int int42 = gcdSolutionWrapper29.getGcd();
        int int43 = gcdSolutionWrapper29.getGcd();
        boolean boolean44 = solution4.equals((java.lang.Object) gcdSolutionWrapper29);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test5063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5063");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int25 = equation24.c();
        int int26 = equation24.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        solution30.setY((int) (byte) 1);
        boolean boolean35 = solution30.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper36.getSolution();
        java.lang.String str38 = gcdSolutionWrapper36.toString();
        gcdSolutionWrapper36.setGcd((int) (byte) 1);
        boolean boolean41 = equation24.equals((java.lang.Object) gcdSolutionWrapper36);
        boolean boolean42 = equation3.equals((java.lang.Object) equation24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int44 = equation3.a();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str38, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
    }

    @Test
    public void test5064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5064");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int8 = equation7.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        boolean boolean14 = gcdSolutionWrapper12.equals((java.lang.Object) 1);
        boolean boolean15 = equation7.equals((java.lang.Object) boolean14);
        int int16 = equation7.a();
        boolean boolean17 = solution3.equals((java.lang.Object) int16);
        solution3.setY(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution3);
        java.lang.String str21 = gcdSolutionWrapper20.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int26 = equation25.c();
        java.lang.String str27 = equation25.toString();
        int int28 = equation25.b();
        java.lang.String str29 = equation25.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation25);
        gcdSolutionWrapper20.setSolution(solution30);
        solution30.setY(1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=10]]" + "'", str21, "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=10]]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str27, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str29, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution30);
    }

    @Test
    public void test5065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5065");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 100, 97);
        solution2.setY(1);
    }

    @Test
    public void test5066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5066");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int11 = equation10.c();
        int int12 = equation10.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        solution16.setY((int) (byte) 1);
        boolean boolean21 = solution16.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper22.getSolution();
        java.lang.String str24 = gcdSolutionWrapper22.toString();
        gcdSolutionWrapper22.setGcd((int) (byte) 1);
        boolean boolean27 = equation10.equals((java.lang.Object) gcdSolutionWrapper22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        boolean boolean29 = gcdSolutionWrapper4.equals((java.lang.Object) solution28);
        int int30 = gcdSolutionWrapper4.getGcd();
        int int31 = gcdSolutionWrapper4.getGcd();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str24, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test5067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5067");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) 0, 1);
        int int4 = equation3.b();
        int int5 = equation3.a();
        java.lang.String str6 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=100, b=0, c=1]" + "'", str6, "Equation[a=100, b=0, c=1]");
    }

    @Test
    public void test5068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5068");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        java.lang.String str21 = equation3.toString();
        java.lang.String str22 = equation3.toString();
        int int23 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int25 = equation3.c();
        int int26 = equation3.c();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str21, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str22, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
    }

    @Test
    public void test5069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5069");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution21);
        gcdSolutionWrapper22.setGcd((int) ' ');
        gcdSolutionWrapper22.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        solution29.setX((int) (short) 1);
        boolean boolean35 = solution29.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper22.setSolution(solution29);
        gcdSolutionWrapper14.setSolution(solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution29);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test5070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5070");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        gcdSolutionWrapper8.setGcd((int) ' ');
        gcdSolutionWrapper8.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper8.getSolution();
        int int14 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation20);
        solution21.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean28 = solution21.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper8.setSolution(solution21);
        gcdSolutionWrapper4.setSolution(solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int35 = equation34.c();
        int int36 = equation34.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        solution40.setY((int) (byte) 1);
        boolean boolean45 = solution40.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper46.getSolution();
        java.lang.String str48 = gcdSolutionWrapper46.toString();
        gcdSolutionWrapper46.setGcd((int) (byte) 1);
        boolean boolean51 = equation34.equals((java.lang.Object) gcdSolutionWrapper46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = gcdSolutionWrapper46.getSolution();
        int int53 = solution52.getX();
        solution52.setY((int) 'a');
        gcdSolutionWrapper4.setSolution(solution52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation60 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int65 = solution64.getY();
        solution64.setY((int) (byte) 1);
        boolean boolean69 = solution64.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution64);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = gcdSolutionWrapper70.getSolution();
        java.lang.String str72 = gcdSolutionWrapper70.toString();
        gcdSolutionWrapper70.setGcd((int) (byte) 1);
        boolean boolean75 = equation60.equals((java.lang.Object) gcdSolutionWrapper70);
        gcdSolutionWrapper70.setGcd((int) (short) 0);
        boolean boolean78 = gcdSolutionWrapper4.equals((java.lang.Object) gcdSolutionWrapper70);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution79 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution80 = gcdSolutionWrapper4.getSolution();
        java.lang.Class<?> wildcardClass81 = solution80.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(solution13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str48, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(solution52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(solution71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str72, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(solution79);
        org.junit.Assert.assertNotNull(solution80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test5071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5071");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        java.lang.String str7 = solution2.toString();
        solution2.setX(1);
        java.lang.Object obj10 = null;
        boolean boolean11 = solution2.equals(obj10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=1, y=1]" + "'", str7, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test5072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5072");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int8 = equation3.c();
        int int9 = equation3.b();
        int int10 = equation3.a();
        int int11 = equation3.b();
        java.lang.String str12 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        java.lang.String str21 = solution19.toString();
        solution19.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int28 = equation27.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        boolean boolean30 = solution19.equals((java.lang.Object) solution29);
        boolean boolean32 = solution29.equals((java.lang.Object) 0);
        boolean boolean33 = equation16.equals((java.lang.Object) solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int38 = equation37.c();
        int int39 = equation37.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int44 = solution43.getY();
        solution43.setY((int) (byte) 1);
        boolean boolean48 = solution43.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = gcdSolutionWrapper49.getSolution();
        java.lang.String str51 = gcdSolutionWrapper49.toString();
        gcdSolutionWrapper49.setGcd((int) (byte) 1);
        boolean boolean54 = equation37.equals((java.lang.Object) gcdSolutionWrapper49);
        boolean boolean55 = equation16.equals((java.lang.Object) equation37);
        java.lang.String str56 = equation16.toString();
        int int57 = equation16.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int62 = equation61.c();
        java.lang.String str63 = equation61.toString();
        int int64 = equation61.c();
        int int65 = equation61.a();
        int int66 = equation61.a();
        boolean boolean67 = equation16.equals((java.lang.Object) int66);
        java.lang.String str68 = equation16.toString();
        int int69 = equation16.a();
        boolean boolean70 = equation3.equals((java.lang.Object) int69);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str12, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=97, y=1]" + "'", str21, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(solution50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str51, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str56, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str63, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str68, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test5073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5073");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        boolean boolean5 = gcdSolutionWrapper3.equals((java.lang.Object) 1);
        java.lang.String str6 = gcdSolutionWrapper3.toString();
        gcdSolutionWrapper3.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper3.setSolution(solution11);
        int int13 = solution11.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        java.lang.String str15 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper14.getSolution();
        int int17 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper14.getSolution();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str6, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]");
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(solution18);
    }

    @Test
    public void test5074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5074");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int5 = equation4.c();
        boolean boolean7 = equation4.equals((java.lang.Object) false);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        solution16.setY((int) (byte) 1);
        boolean boolean21 = solution16.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper22.getSolution();
        java.lang.String str24 = gcdSolutionWrapper22.toString();
        gcdSolutionWrapper22.setGcd((int) (byte) 1);
        boolean boolean27 = equation12.equals((java.lang.Object) gcdSolutionWrapper22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = gcdSolutionWrapper22.getSolution();
        gcdSolutionWrapper22.setGcd((int) (byte) 100);
        gcdSolutionWrapper22.setGcd((int) (short) 10);
        boolean boolean33 = solution8.equals((java.lang.Object) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution8);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str24, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test5075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5075");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), (int) ' ', (int) (byte) -1);
    }

    @Test
    public void test5076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5076");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(52, solution1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        solution7.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution7);
        java.lang.String str13 = solution7.toString();
        java.lang.Object obj14 = null;
        boolean boolean15 = solution7.equals(obj14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution7);
        gcdSolutionWrapper2.setSolution(solution7);
        solution7.setY(0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=1, y=1]" + "'", str13, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test5077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5077");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, 35, 0);
        int int4 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test5078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5078");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, 32, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
    }

    @Test
    public void test5079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5079");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        int int7 = solution3.getY();
        java.lang.String str8 = solution3.toString();
        solution3.setY(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper11.getSolution();
        java.lang.String str13 = gcdSolutionWrapper11.toString();
        int int14 = gcdSolutionWrapper11.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation20);
        solution21.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        int int31 = solution30.getX();
        int int32 = solution30.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution30);
        int int34 = solution30.getX();
        gcdSolutionWrapper24.setSolution(solution30);
        int int36 = solution30.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution30);
        gcdSolutionWrapper11.setSolution(solution30);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=97]]" + "'", str13, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=97]]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test5080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5080");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (-97));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution6);
        int int8 = gcdSolutionWrapper7.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        gcdSolutionWrapper7.setSolution(solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        java.lang.String str17 = solution15.toString();
        boolean boolean18 = gcdSolutionWrapper7.equals((java.lang.Object) solution15);
        boolean boolean19 = solution2.equals((java.lang.Object) gcdSolutionWrapper7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=97, y=1]" + "'", str17, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test5081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5081");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper10.getSolution();
        java.lang.String str12 = gcdSolutionWrapper10.toString();
        gcdSolutionWrapper10.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        int int20 = solution17.getX();
        gcdSolutionWrapper10.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, 0);
        java.lang.String str25 = solution24.toString();
        solution24.setX((int) ' ');
        boolean boolean28 = solution17.equals((java.lang.Object) solution24);
        int int29 = solution24.getY();
        java.lang.String str30 = solution24.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(100, solution24);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str12, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=100, y=0]" + "'", str25, "Solution[x=100, y=0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=32, y=0]" + "'", str30, "Solution[x=32, y=0]");
    }

    @Test
    public void test5082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5082");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        boolean boolean39 = solution35.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper32.setSolution(solution35);
        int int41 = solution35.getX();
        java.lang.String str42 = solution35.toString();
        solution35.setX((int) (byte) 0);
        boolean boolean45 = gcdSolutionWrapper15.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = gcdSolutionWrapper15.getSolution();
        int int49 = solution48.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test5083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5083");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        solution7.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int16 = equation15.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        boolean boolean18 = solution7.equals((java.lang.Object) solution17);
        boolean boolean20 = solution17.equals((java.lang.Object) 0);
        boolean boolean21 = equation4.equals((java.lang.Object) solution17);
        boolean boolean23 = solution17.equals((java.lang.Object) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation28);
        solution29.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation36);
        solution37.setY((int) (byte) 10);
        boolean boolean40 = solution29.equals((java.lang.Object) (byte) 10);
        boolean boolean41 = solution17.equals((java.lang.Object) (byte) 10);
        int int42 = solution17.getX();
        solution17.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        java.lang.String str49 = solution48.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int57 = equation56.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation56);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution60 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution60);
        boolean boolean63 = gcdSolutionWrapper61.equals((java.lang.Object) 1);
        boolean boolean64 = equation56.equals((java.lang.Object) boolean63);
        int int65 = equation56.a();
        boolean boolean66 = solution52.equals((java.lang.Object) int65);
        solution52.setY(10);
        boolean boolean69 = solution48.equals((java.lang.Object) solution52);
        gcdSolutionWrapper45.setSolution(solution48);
        int int71 = solution48.getX();
        java.lang.Class<?> wildcardClass72 = solution48.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Solution[x=100, y=32]" + "'", str49, "Solution[x=100, y=32]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test5084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5084");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 100);
        gcdSolutionWrapper8.setSolution(solution15);
        solution15.setX(1);
        boolean boolean20 = solution15.equals((java.lang.Object) "Solution[x=1, y=52]");
        int int21 = solution15.getX();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test5085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5085");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        int int7 = equation3.a();
        int int8 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution12);
        boolean boolean14 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        int int15 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test5086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5086");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 100, (int) (short) 1);
        int int4 = equation3.c();
        int int5 = equation3.c();
        int int6 = equation3.a();
        int int7 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test5087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5087");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 100, 35);
    }

    @Test
    public void test5088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5088");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        int int13 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        gcdSolutionWrapper8.setSolution(solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper8.getSolution();
        int int23 = solution22.getX();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test5089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5089");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (int) 'a');
    }

    @Test
    public void test5090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5090");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 0, 10);
    }

    @Test
    public void test5091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5091");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        solution10.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution10);
        int int16 = gcdSolutionWrapper15.getGcd();
        int int17 = gcdSolutionWrapper15.getGcd();
        gcdSolutionWrapper15.setGcd((int) (short) -1);
        gcdSolutionWrapper15.setGcd((int) (byte) 0);
        boolean boolean23 = gcdSolutionWrapper15.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper15.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        int int32 = solution31.getX();
        int int33 = solution31.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution31);
        gcdSolutionWrapper15.setSolution(solution31);
        boolean boolean36 = solution6.equals((java.lang.Object) gcdSolutionWrapper15);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str4, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-35) + "'", int16 == (-35));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-35) + "'", int17 == (-35));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test5092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5092");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), (int) (byte) 0, (-97));
        int int4 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test5093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5093");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        int int13 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        solution20.setY((int) (byte) 1);
        boolean boolean25 = solution20.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        boolean boolean33 = solution29.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper26.setSolution(solution29);
        int int35 = solution29.getX();
        int int36 = solution29.getY();
        gcdSolutionWrapper8.setSolution(solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int42 = equation41.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        solution44.setY((-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution48);
        gcdSolutionWrapper49.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int55 = solution54.getY();
        java.lang.String str56 = solution54.toString();
        gcdSolutionWrapper49.setSolution(solution54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper49.getSolution();
        int int59 = gcdSolutionWrapper49.getGcd();
        gcdSolutionWrapper49.setGcd((int) (short) 0);
        boolean boolean62 = solution44.equals((java.lang.Object) gcdSolutionWrapper49);
        gcdSolutionWrapper8.setSolution(solution44);
        java.lang.String str64 = gcdSolutionWrapper8.toString();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Solution[x=97, y=1]" + "'", str56, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 32 + "'", int59 == 32);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=10, y=-1]]" + "'", str64, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=10, y=-1]]");
    }

    @Test
    public void test5094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5094");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution9.setX((int) (byte) 10);
        solution9.setX((int) '#');
        int int14 = solution9.getY();
        int int15 = solution9.getY();
        java.lang.String str16 = solution9.toString();
        solution9.setY((int) '#');
        gcdSolutionWrapper2.setSolution(solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper2.getSolution();
        int int21 = solution20.getX();
        int int22 = solution20.getX();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-35) + "'", int14 == (-35));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-35) + "'", int15 == (-35));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=35, y=-35]" + "'", str16, "Solution[x=35, y=-35]");
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
    }

    @Test
    public void test5095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5095");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution4);
        java.lang.String str11 = gcdSolutionWrapper10.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper10.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) 'a', 0);
        int int17 = equation16.c();
        boolean boolean18 = gcdSolutionWrapper10.equals((java.lang.Object) equation16);
        int int19 = equation16.c();
        int int20 = equation16.b();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=1, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=32, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
    }

    @Test
    public void test5096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5096");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', (int) (short) 10, (-1));
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str6 = equation3.toString();
        java.lang.String str7 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=35, b=10, c=-1]" + "'", str6, "Equation[a=35, b=10, c=-1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Equation[a=35, b=10, c=-1]" + "'", str7, "Equation[a=35, b=10, c=-1]");
    }

    @Test
    public void test5097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5097");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int20 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = gcdSolutionWrapper9.equals((java.lang.Object) equation19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        int int24 = solution23.getY();
        int int25 = solution23.getX();
        solution23.setX((-1));
        solution23.setX(96);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test5098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5098");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 0, (int) (byte) 0);
    }

    @Test
    public void test5099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5099");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 1, 0);
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        int int13 = solution12.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int18 = equation17.c();
        int int19 = equation17.c();
        int int20 = equation17.a();
        boolean boolean21 = solution12.equals((java.lang.Object) equation17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution22);
        boolean boolean25 = equation3.equals((java.lang.Object) solution22);
        int int26 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int28 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str5, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test5100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5100");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (-35), (int) (byte) 100);
        int int4 = equation3.a();
        java.lang.String str5 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        solution12.setY((int) (byte) 1);
        boolean boolean17 = solution12.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        java.lang.String str23 = solution21.toString();
        boolean boolean25 = solution21.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper18.setSolution(solution21);
        int int27 = solution21.getX();
        int int28 = solution21.getY();
        solution21.setY((int) (short) 10);
        solution21.setY(35);
        solution21.setX(0);
        boolean boolean35 = solution8.equals((java.lang.Object) solution21);
        java.lang.Class<?> wildcardClass36 = solution21.getClass();
        boolean boolean37 = equation3.equals((java.lang.Object) solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution41);
        java.lang.String str43 = gcdSolutionWrapper42.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper42.getSolution();
        java.lang.String str45 = gcdSolutionWrapper42.toString();
        int int46 = gcdSolutionWrapper42.getGcd();
        java.lang.String str47 = gcdSolutionWrapper42.toString();
        boolean boolean48 = equation3.equals((java.lang.Object) gcdSolutionWrapper42);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=100, b=-35, c=100]" + "'", str5, "Equation[a=100, b=-35, c=100]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=97, y=1]" + "'", str23, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str43, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str45, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str47, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test5101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5101");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getX();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        solution3.setY((int) (short) 100);
        solution3.setX((int) '4');
        solution3.setX(32);
        int int15 = solution3.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
    }

    @Test
    public void test5102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5102");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean11 = solution2.equals((java.lang.Object) equation10);
        int int12 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        solution20.setY((int) (byte) 1);
        boolean boolean25 = solution20.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper26.getSolution();
        java.lang.String str28 = gcdSolutionWrapper26.toString();
        gcdSolutionWrapper26.setGcd((int) (byte) 1);
        boolean boolean31 = equation16.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int36 = equation35.c();
        int int37 = equation35.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        boolean boolean39 = gcdSolutionWrapper26.equals((java.lang.Object) solution38);
        boolean boolean41 = gcdSolutionWrapper26.equals((java.lang.Object) (short) 0);
        int int42 = gcdSolutionWrapper26.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution44);
        gcdSolutionWrapper45.setGcd((int) ' ');
        gcdSolutionWrapper45.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int53 = solution52.getY();
        java.lang.String str54 = solution52.toString();
        solution52.setX((int) (short) 1);
        boolean boolean58 = solution52.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper45.setSolution(solution52);
        boolean boolean60 = gcdSolutionWrapper26.equals((java.lang.Object) gcdSolutionWrapper45);
        boolean boolean61 = equation10.equals((java.lang.Object) gcdSolutionWrapper45);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: null");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str28, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Solution[x=97, y=1]" + "'", str54, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test5103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5103");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper13.getSolution();
        java.lang.String str20 = solution19.toString();
        int int21 = solution19.getX();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=97, y=1]" + "'", str20, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
    }

    @Test
    public void test5104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5104");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, 1, 0);
    }

    @Test
    public void test5105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5105");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
    }

    @Test
    public void test5106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5106");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 32, (int) 'a');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.c();
        int int7 = equation3.a();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-1, b=32, c=97]" + "'", str4, "Equation[a=-1, b=32, c=97]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test5107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5107");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.a();
        java.lang.Object obj7 = null;
        boolean boolean8 = equation3.equals(obj7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        boolean boolean18 = solution13.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        gcdSolutionWrapper20.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int27 = equation26.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution30);
        boolean boolean33 = gcdSolutionWrapper31.equals((java.lang.Object) 1);
        boolean boolean34 = equation26.equals((java.lang.Object) boolean33);
        boolean boolean35 = gcdSolutionWrapper20.equals((java.lang.Object) boolean33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int39 = solution38.getY();
        java.lang.String str40 = solution38.toString();
        solution38.setX((int) (short) 1);
        solution38.setX((int) (byte) 10);
        gcdSolutionWrapper20.setSolution(solution38);
        boolean boolean46 = equation3.equals((java.lang.Object) gcdSolutionWrapper20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int51 = solution50.getY();
        solution50.setY((int) (byte) 1);
        boolean boolean55 = solution50.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int60 = solution59.getY();
        java.lang.String str61 = solution59.toString();
        boolean boolean63 = solution59.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper56.setSolution(solution59);
        int int65 = solution59.getX();
        boolean boolean66 = gcdSolutionWrapper20.equals((java.lang.Object) int65);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation70);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation70);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int77 = solution76.getY();
        solution76.setY((int) (byte) 1);
        boolean boolean81 = solution76.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper82 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution76);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution85 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int86 = solution85.getY();
        java.lang.String str87 = solution85.toString();
        boolean boolean89 = solution85.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper82.setSolution(solution85);
        int int91 = solution85.getX();
        boolean boolean92 = equation70.equals((java.lang.Object) solution85);
        java.lang.String str93 = equation70.toString();
        java.lang.String str94 = equation70.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution95 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation70);
        boolean boolean96 = gcdSolutionWrapper20.equals((java.lang.Object) equation70);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str5, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=97, y=1]" + "'", str40, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Solution[x=97, y=1]" + "'", str61, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 97 + "'", int65 == 97);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(solution71);
        org.junit.Assert.assertNotNull(solution72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Solution[x=97, y=1]" + "'", str87, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 97 + "'", int91 == 97);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str93, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str94, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertNotNull(solution95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test5108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5108");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, (-1), 32);
        int int4 = equation3.c();
        int int5 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test5109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5109");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        boolean boolean15 = gcdSolutionWrapper13.equals((java.lang.Object) 1);
        boolean boolean16 = equation8.equals((java.lang.Object) boolean15);
        int int17 = equation8.a();
        int int18 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 1);
        int int26 = gcdSolutionWrapper21.getGcd();
        int int27 = gcdSolutionWrapper21.getGcd();
        boolean boolean28 = equation8.equals((java.lang.Object) int27);
        boolean boolean29 = equation3.equals((java.lang.Object) equation8);
        java.lang.String str30 = equation8.toString();
        int int31 = equation8.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str30, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test5110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5110");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (byte) 10, (int) (short) -1);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str9 = equation8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        solution16.setY((int) (byte) 1);
        gcdSolutionWrapper13.setSolution(solution16);
        int int21 = gcdSolutionWrapper13.getGcd();
        boolean boolean22 = solution10.equals((java.lang.Object) gcdSolutionWrapper13);
        boolean boolean23 = equation3.equals((java.lang.Object) solution10);
        int int24 = solution10.getY();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=100, b=10, c=-1]" + "'", str4, "Equation[a=100, b=10, c=-1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str9, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-35) + "'", int24 == (-35));
    }

    @Test
    public void test5111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5111");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        java.lang.String str6 = solution5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution9);
        boolean boolean12 = gcdSolutionWrapper10.equals((java.lang.Object) 1);
        java.lang.String str13 = gcdSolutionWrapper10.toString();
        gcdSolutionWrapper10.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper10.setSolution(solution18);
        int int20 = solution18.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution18);
        java.lang.String str22 = gcdSolutionWrapper21.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        java.lang.String str27 = equation26.toString();
        int int28 = equation26.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        gcdSolutionWrapper21.setSolution(solution29);
        int int31 = solution29.getY();
        boolean boolean32 = solution5.equals((java.lang.Object) int31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution5);
        int int34 = gcdSolutionWrapper33.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = gcdSolutionWrapper33.getSolution();
        int int36 = gcdSolutionWrapper33.getGcd();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=0, y=0]" + "'", str6, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str13, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]" + "'", str22, "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Equation[a=10, b=10, c=52]" + "'", str27, "Equation[a=10, b=10, c=52]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test5112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5112");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = solution3.getY();
        solution3.setY((int) '#');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test5113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5113");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int11 = equation10.c();
        int int12 = equation10.c();
        int int13 = equation10.a();
        boolean boolean14 = solution5.equals((java.lang.Object) equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper16.getSolution();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=100, solution=Solution[x=0, y=0]]" + "'", str18, "GcdSolutionWrapper[gcd=100, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertNotNull(solution21);
    }

    @Test
    public void test5114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5114");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.b();
        java.lang.Object obj7 = null;
        boolean boolean8 = equation3.equals(obj7);
        int int9 = equation3.b();
        java.lang.String str10 = equation3.toString();
        int int11 = equation3.c();
        int int12 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str10, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test5115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5115");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.c();
        int int7 = equation3.a();
        int int8 = equation3.c();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test5116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5116");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        java.lang.String str5 = gcdSolutionWrapper2.toString();
        java.lang.String str6 = gcdSolutionWrapper2.toString();
        gcdSolutionWrapper2.setGcd((int) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper2.getSolution();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str5, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str6, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertNull(solution9);
    }

    @Test
    public void test5117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5117");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        int int7 = solution3.getY();
        java.lang.String str8 = solution3.toString();
        solution3.setY(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper11.getSolution();
        int int13 = gcdSolutionWrapper11.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper11.getSolution();
        int int15 = solution14.getX();
        int int16 = solution14.getY();
        int int17 = solution14.getX();
        solution14.setX(35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
    }

    @Test
    public void test5118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5118");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', (int) 'a', 0);
        int int4 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    }

    @Test
    public void test5119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5119");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        java.lang.String str5 = solution2.toString();
        java.lang.String str6 = solution2.toString();
        solution2.setY((int) (short) 0);
        solution2.setY((int) (short) 10);
        int int11 = solution2.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int16 = equation15.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        java.lang.String str18 = equation15.toString();
        int int19 = equation15.b();
        int int20 = equation15.b();
        java.lang.String str21 = equation15.toString();
        boolean boolean22 = solution2.equals((java.lang.Object) equation15);
        solution2.setX((int) ' ');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str18, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str21, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test5120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5120");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper15.setSolution(solution22);
        boolean boolean24 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        int int25 = equation3.a();
        int int26 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int34 = solution33.getY();
        java.lang.String str35 = solution33.toString();
        solution33.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int42 = equation41.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        boolean boolean44 = solution33.equals((java.lang.Object) solution43);
        boolean boolean46 = solution43.equals((java.lang.Object) 0);
        boolean boolean47 = equation30.equals((java.lang.Object) solution43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int52 = equation51.c();
        int int53 = equation51.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int58 = solution57.getY();
        solution57.setY((int) (byte) 1);
        boolean boolean62 = solution57.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = gcdSolutionWrapper63.getSolution();
        java.lang.String str65 = gcdSolutionWrapper63.toString();
        gcdSolutionWrapper63.setGcd((int) (byte) 1);
        boolean boolean68 = equation51.equals((java.lang.Object) gcdSolutionWrapper63);
        boolean boolean69 = equation30.equals((java.lang.Object) equation51);
        int int70 = equation30.c();
        int int71 = equation30.b();
        boolean boolean72 = equation3.equals((java.lang.Object) equation30);
        int int73 = equation30.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution78 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int79 = solution78.getY();
        java.lang.String str80 = solution78.toString();
        solution78.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper83 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution78);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper84 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution78);
        java.lang.String str85 = gcdSolutionWrapper84.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution86 = gcdSolutionWrapper84.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation90 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) 'a', 0);
        int int91 = equation90.c();
        boolean boolean92 = gcdSolutionWrapper84.equals((java.lang.Object) equation90);
        int int93 = equation90.c();
        boolean boolean94 = equation30.equals((java.lang.Object) int93);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Solution[x=97, y=1]" + "'", str35, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str65, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Solution[x=97, y=1]" + "'", str80, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=1, y=1]]" + "'", str85, "GcdSolutionWrapper[gcd=32, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertNotNull(solution86);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test5121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5121");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, (-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution3);
    }

    @Test
    public void test5122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5122");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        boolean boolean14 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        solution19.setY(0);
        gcdSolutionWrapper13.setSolution(solution19);
        int int23 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        gcdSolutionWrapper13.setSolution(solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = gcdSolutionWrapper13.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, 100, 97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation39);
        int int41 = equation39.a();
        boolean boolean42 = gcdSolutionWrapper13.equals((java.lang.Object) equation39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation48);
        int int50 = solution49.getX();
        int int51 = solution49.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution49);
        gcdSolutionWrapper52.setGcd((int) (short) 0);
        gcdSolutionWrapper52.setGcd((int) '4');
        int int57 = gcdSolutionWrapper52.getGcd();
        gcdSolutionWrapper52.setGcd((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation63);
        gcdSolutionWrapper52.setSolution(solution64);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution66 = gcdSolutionWrapper52.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (int) (byte) -1);
        boolean boolean70 = gcdSolutionWrapper52.equals((java.lang.Object) solution69);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution69);
        boolean boolean72 = gcdSolutionWrapper13.equals((java.lang.Object) solution69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertNotNull(solution66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test5123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5123");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int24 = equation23.c();
        int int25 = equation23.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        boolean boolean27 = gcdSolutionWrapper14.equals((java.lang.Object) solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        int int33 = equation31.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        solution37.setY((int) (byte) 1);
        boolean boolean42 = solution37.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper43.getSolution();
        java.lang.String str45 = gcdSolutionWrapper43.toString();
        gcdSolutionWrapper43.setGcd((int) (byte) 1);
        boolean boolean48 = equation31.equals((java.lang.Object) gcdSolutionWrapper43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        int int50 = solution49.getY();
        boolean boolean51 = gcdSolutionWrapper14.equals((java.lang.Object) int50);
        java.lang.String str52 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = gcdSolutionWrapper14.getSolution();
        gcdSolutionWrapper14.setGcd((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution56);
        solution56.setX((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str45, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-35) + "'", int50 == (-35));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str52, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution53);
        org.junit.Assert.assertNotNull(solution56);
    }

    @Test
    public void test5124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5124");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper15.setSolution(solution22);
        boolean boolean24 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        int int25 = equation3.a();
        int int26 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int34 = solution33.getY();
        java.lang.String str35 = solution33.toString();
        solution33.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int42 = equation41.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        boolean boolean44 = solution33.equals((java.lang.Object) solution43);
        boolean boolean46 = solution43.equals((java.lang.Object) 0);
        boolean boolean47 = equation30.equals((java.lang.Object) solution43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int52 = equation51.c();
        int int53 = equation51.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int58 = solution57.getY();
        solution57.setY((int) (byte) 1);
        boolean boolean62 = solution57.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = gcdSolutionWrapper63.getSolution();
        java.lang.String str65 = gcdSolutionWrapper63.toString();
        gcdSolutionWrapper63.setGcd((int) (byte) 1);
        boolean boolean68 = equation51.equals((java.lang.Object) gcdSolutionWrapper63);
        boolean boolean69 = equation30.equals((java.lang.Object) equation51);
        int int70 = equation30.c();
        int int71 = equation30.b();
        boolean boolean72 = equation3.equals((java.lang.Object) equation30);
        int int73 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution74 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Solution[x=97, y=1]" + "'", str35, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str65, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(solution74);
        org.junit.Assert.assertNotNull(solution75);
    }

    @Test
    public void test5125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5125");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(1, (int) (short) 1, 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int12 = solution11.getY();
        solution11.setY((int) (byte) 1);
        boolean boolean16 = solution11.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper17.getSolution();
        java.lang.String str19 = gcdSolutionWrapper17.toString();
        gcdSolutionWrapper17.setGcd((int) (byte) 1);
        boolean boolean22 = equation7.equals((java.lang.Object) gcdSolutionWrapper17);
        int int23 = equation7.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation32);
        int int34 = solution33.getX();
        int int35 = solution33.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution33);
        boolean boolean37 = solution27.equals((java.lang.Object) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper38.getSolution();
        boolean boolean40 = equation7.equals((java.lang.Object) gcdSolutionWrapper38);
        boolean boolean41 = equation3.equals((java.lang.Object) boolean40);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str19, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test5126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5126");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        gcdSolutionWrapper4.setGcd(0);
        java.lang.Object obj7 = null;
        boolean boolean8 = gcdSolutionWrapper4.equals(obj7);
        java.lang.String str9 = gcdSolutionWrapper4.toString();
        gcdSolutionWrapper4.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper4.getSolution();
        java.lang.String str13 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper4.getSolution();
        int int15 = solution14.getX();
        solution14.setY((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str9, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str13, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test5127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5127");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str8 = solution7.toString();
        solution7.setX((int) (byte) -1);
        java.lang.String str11 = solution7.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 1, 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        boolean boolean17 = solution7.equals((java.lang.Object) equation15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        solution21.setY((int) (byte) 1);
        boolean boolean26 = solution21.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        java.lang.String str32 = solution30.toString();
        boolean boolean34 = solution30.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper27.setSolution(solution30);
        boolean boolean36 = solution7.equals((java.lang.Object) solution30);
        int int37 = solution30.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=0, y=-35]" + "'", str8, "Solution[x=0, y=-35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=-1, y=-35]" + "'", str11, "Solution[x=-1, y=-35]");
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Solution[x=97, y=1]" + "'", str32, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
    }

    @Test
    public void test5128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5128");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-75), (int) (byte) 10, 35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        int int16 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper15.getSolution();
        int int18 = solution17.getX();
        int int19 = solution17.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) (short) 0, (int) (short) 0);
        int int24 = equation23.b();
        boolean boolean25 = solution17.equals((java.lang.Object) equation23);
        boolean boolean26 = equation3.equals((java.lang.Object) boolean25);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test5129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5129");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution25);
        gcdSolutionWrapper26.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution32);
        gcdSolutionWrapper33.setGcd(97);
        boolean boolean36 = gcdSolutionWrapper26.equals((java.lang.Object) gcdSolutionWrapper33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        solution41.setY((int) (byte) 10);
        int int44 = solution41.getY();
        boolean boolean45 = gcdSolutionWrapper26.equals((java.lang.Object) solution41);
        boolean boolean46 = gcdSolutionWrapper15.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int51 = equation50.a();
        java.lang.String str52 = equation50.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation50);
        gcdSolutionWrapper15.setSolution(solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = gcdSolutionWrapper15.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Equation[a=32, b=52, c=100]" + "'", str52, "Equation[a=32, b=52, c=100]");
        org.junit.Assert.assertNotNull(solution53);
        org.junit.Assert.assertNotNull(solution55);
    }

    @Test
    public void test5130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5130");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        boolean boolean39 = solution35.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper32.setSolution(solution35);
        int int41 = solution35.getX();
        java.lang.String str42 = solution35.toString();
        solution35.setX((int) (byte) 0);
        boolean boolean45 = gcdSolutionWrapper15.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper15.getSolution();
        java.lang.String str47 = gcdSolutionWrapper15.toString();
        int int48 = gcdSolutionWrapper15.getGcd();
        gcdSolutionWrapper15.setGcd(52);
        gcdSolutionWrapper15.setGcd((int) '#');
        java.lang.String str53 = gcdSolutionWrapper15.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str47, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GcdSolutionWrapper[gcd=35, solution=Solution[x=97, y=1]]" + "'", str53, "GcdSolutionWrapper[gcd=35, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test5131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5131");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) (byte) 100, 32);
        int int4 = equation3.b();
        int int5 = equation3.a();
        int int6 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        solution12.setY((int) (byte) 1);
        gcdSolutionWrapper9.setSolution(solution12);
        int int17 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        java.lang.String str22 = solution20.toString();
        solution20.setX((int) (short) 1);
        boolean boolean26 = solution20.equals((java.lang.Object) (-1.0f));
        java.lang.String str27 = solution20.toString();
        java.lang.String str28 = solution20.toString();
        gcdSolutionWrapper9.setSolution(solution20);
        int int30 = gcdSolutionWrapper9.getGcd();
        gcdSolutionWrapper9.setGcd((int) 'a');
        gcdSolutionWrapper9.setGcd((int) ' ');
        boolean boolean35 = equation3.equals((java.lang.Object) gcdSolutionWrapper9);
        gcdSolutionWrapper9.setGcd(10);
        gcdSolutionWrapper9.setGcd((int) '4');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=97, y=1]" + "'", str22, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=1, y=1]" + "'", str27, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=1, y=1]" + "'", str28, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test5132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5132");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) solution25);
        boolean boolean28 = gcdSolutionWrapper13.equals((java.lang.Object) (short) 0);
        int int29 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution31);
        gcdSolutionWrapper32.setGcd((int) ' ');
        gcdSolutionWrapper32.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int40 = solution39.getY();
        java.lang.String str41 = solution39.toString();
        solution39.setX((int) (short) 1);
        boolean boolean45 = solution39.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper32.setSolution(solution39);
        boolean boolean47 = gcdSolutionWrapper13.equals((java.lang.Object) gcdSolutionWrapper32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int52 = equation51.c();
        int int53 = equation51.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation51);
        gcdSolutionWrapper32.setSolution(solution54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        java.lang.String str59 = solution58.toString();
        solution58.setX((int) '#');
        gcdSolutionWrapper32.setSolution(solution58);
        java.lang.String str63 = gcdSolutionWrapper32.toString();
        gcdSolutionWrapper32.setGcd(32);
        gcdSolutionWrapper32.setGcd((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Solution[x=97, y=1]" + "'", str41, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(solution54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Solution[x=32, y=10]" + "'", str59, "Solution[x=32, y=10]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GcdSolutionWrapper[gcd=100, solution=Solution[x=35, y=10]]" + "'", str63, "GcdSolutionWrapper[gcd=100, solution=Solution[x=35, y=10]]");
    }

    @Test
    public void test5133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5133");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = solution4.toString();
        int int6 = solution4.getY();
        solution4.setY(0);
        solution4.setX((int) (short) 0);
        solution4.setY((int) (short) 0);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=0, y=0]" + "'", str5, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test5134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5134");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        int int10 = solution9.getX();
        int int11 = solution9.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution9);
        boolean boolean13 = solution3.equals((java.lang.Object) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper14.getSolution();
        int int17 = gcdSolutionWrapper14.getGcd();
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-35) + "'", int17 == (-35));
    }

    @Test
    public void test5135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5135");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', 0, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        int int11 = solution10.getX();
        int int12 = solution10.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution10);
        gcdSolutionWrapper13.setGcd((int) (short) 0);
        gcdSolutionWrapper13.setGcd((int) '4');
        int int18 = gcdSolutionWrapper13.getGcd();
        java.lang.String str19 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int23 = solution22.getX();
        int int24 = solution22.getX();
        gcdSolutionWrapper13.setSolution(solution22);
        boolean boolean26 = solution4.equals((java.lang.Object) gcdSolutionWrapper13);
        java.lang.String str27 = gcdSolutionWrapper13.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]" + "'", str19, "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=10, y=0]]" + "'", str27, "GcdSolutionWrapper[gcd=52, solution=Solution[x=10, y=0]]");
    }

    @Test
    public void test5136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5136");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int6 = solution5.getY();
        solution5.setY((int) (byte) 1);
        gcdSolutionWrapper2.setSolution(solution5);
        int int10 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        boolean boolean19 = solution13.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = solution13.toString();
        java.lang.String str21 = solution13.toString();
        gcdSolutionWrapper2.setSolution(solution13);
        java.lang.String str23 = solution13.toString();
        solution13.setY(52);
        int int26 = solution13.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution29);
        boolean boolean32 = gcdSolutionWrapper30.equals((java.lang.Object) 1);
        java.lang.String str33 = gcdSolutionWrapper30.toString();
        gcdSolutionWrapper30.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper30.setSolution(solution38);
        int int40 = solution38.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution38);
        java.lang.String str42 = gcdSolutionWrapper41.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        java.lang.String str47 = equation46.toString();
        int int48 = equation46.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation46);
        gcdSolutionWrapper41.setSolution(solution49);
        java.lang.Class<?> wildcardClass51 = gcdSolutionWrapper41.getClass();
        boolean boolean52 = solution13.equals((java.lang.Object) wildcardClass51);
        int int53 = solution13.getX();
        int int54 = solution13.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=1, y=1]" + "'", str21, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=1, y=1]" + "'", str23, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str33, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]" + "'", str42, "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=-1]]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Equation[a=10, b=10, c=52]" + "'", str47, "Equation[a=10, b=10, c=52]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test5137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5137");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, (int) (byte) 0);
        int int3 = solution2.getY();
        solution2.setY((int) (byte) 100);
        java.lang.String str6 = solution2.toString();
        int int7 = solution2.getY();
        int int8 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=10, y=100]" + "'", str6, "Solution[x=10, y=100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test5138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5138");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        boolean boolean39 = solution35.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper32.setSolution(solution35);
        int int41 = solution35.getX();
        java.lang.String str42 = solution35.toString();
        solution35.setX((int) (byte) 0);
        boolean boolean45 = gcdSolutionWrapper15.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int53 = solution52.getY();
        java.lang.String str54 = solution52.toString();
        solution52.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution52);
        gcdSolutionWrapper58.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution64);
        gcdSolutionWrapper58.setSolution(solution64);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int70 = solution69.getY();
        java.lang.String str71 = solution69.toString();
        java.lang.String str72 = solution69.toString();
        java.lang.String str73 = solution69.toString();
        gcdSolutionWrapper58.setSolution(solution69);
        solution69.setY((int) '#');
        gcdSolutionWrapper15.setSolution(solution69);
        java.lang.Class<?> wildcardClass78 = solution69.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Solution[x=97, y=1]" + "'", str54, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Solution[x=97, y=1]" + "'", str71, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Solution[x=97, y=1]" + "'", str72, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Solution[x=97, y=1]" + "'", str73, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test5139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5139");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        int int4 = solution3.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        java.lang.String str10 = solution8.toString();
        solution8.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean17 = solution8.equals((java.lang.Object) equation16);
        int int18 = equation16.a();
        boolean boolean19 = gcdSolutionWrapper5.equals((java.lang.Object) equation16);
        gcdSolutionWrapper5.setGcd(35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=97, y=1]" + "'", str10, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test5140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5140");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, (int) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution4);
        solution4.setY((-35));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution4);
        java.lang.String str9 = gcdSolutionWrapper8.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=97, solution=Solution[x=-1, y=-35]]" + "'", str9, "GcdSolutionWrapper[gcd=97, solution=Solution[x=-1, y=-35]]");
    }

    @Test
    public void test5141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5141");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        gcdSolutionWrapper2.setGcd((int) (byte) 10);
        gcdSolutionWrapper2.setGcd(100);
        gcdSolutionWrapper2.setGcd(125);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int37 = equation36.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation36);
        boolean boolean39 = solution28.equals((java.lang.Object) solution38);
        boolean boolean41 = solution38.equals((java.lang.Object) 0);
        boolean boolean42 = equation25.equals((java.lang.Object) solution38);
        java.lang.String str43 = equation25.toString();
        boolean boolean44 = solution20.equals((java.lang.Object) equation25);
        java.lang.String str45 = equation25.toString();
        boolean boolean46 = gcdSolutionWrapper2.equals((java.lang.Object) equation25);
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str43, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str45, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test5142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5142");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, 52, (int) 'a');
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=100, b=52, c=97]" + "'", str4, "Equation[a=100, b=52, c=97]");
    }

    @Test
    public void test5143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5143");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', (int) (short) 10, (-1));
        int int4 = equation3.b();
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int11 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution14);
        boolean boolean17 = gcdSolutionWrapper15.equals((java.lang.Object) 1);
        boolean boolean18 = equation10.equals((java.lang.Object) boolean17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        solution23.setY((int) (byte) 10);
        boolean boolean26 = equation10.equals((java.lang.Object) solution23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution27);
        java.lang.String str29 = gcdSolutionWrapper28.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = gcdSolutionWrapper28.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int35 = equation34.c();
        int int36 = equation34.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        solution40.setY((int) (byte) 1);
        boolean boolean45 = solution40.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper46.getSolution();
        java.lang.String str48 = gcdSolutionWrapper46.toString();
        gcdSolutionWrapper46.setGcd((int) (byte) 1);
        boolean boolean51 = equation34.equals((java.lang.Object) gcdSolutionWrapper46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation34);
        int int53 = equation34.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation34);
        boolean boolean55 = gcdSolutionWrapper28.equals((java.lang.Object) solution54);
        boolean boolean56 = equation3.equals((java.lang.Object) gcdSolutionWrapper28);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=0, y=-35]]" + "'", str29, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str48, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(solution52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(solution54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test5144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5144");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 0, 100);
        java.lang.Class<?> wildcardClass4 = equation3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test5145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5145");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, (int) '#', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str8 = equation7.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        boolean boolean10 = equation3.equals((java.lang.Object) solution9);
        int int11 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int16 = equation15.c();
        int int17 = equation15.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        solution21.setY((int) (byte) 1);
        boolean boolean26 = solution21.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = gcdSolutionWrapper27.getSolution();
        java.lang.String str29 = gcdSolutionWrapper27.toString();
        gcdSolutionWrapper27.setGcd((int) (byte) 1);
        boolean boolean32 = equation15.equals((java.lang.Object) gcdSolutionWrapper27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = gcdSolutionWrapper27.getSolution();
        int int34 = gcdSolutionWrapper27.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution36);
        gcdSolutionWrapper37.setGcd((int) ' ');
        gcdSolutionWrapper37.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = gcdSolutionWrapper37.getSolution();
        int int43 = gcdSolutionWrapper37.getGcd();
        gcdSolutionWrapper37.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, 10);
        int int50 = equation49.a();
        boolean boolean51 = gcdSolutionWrapper37.equals((java.lang.Object) int50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int62 = solution61.getY();
        solution61.setY((int) (byte) 1);
        boolean boolean66 = solution61.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution61);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int71 = solution70.getY();
        java.lang.String str72 = solution70.toString();
        boolean boolean74 = solution70.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper67.setSolution(solution70);
        int int76 = solution70.getX();
        boolean boolean77 = equation55.equals((java.lang.Object) solution70);
        int int78 = equation55.a();
        boolean boolean79 = gcdSolutionWrapper37.equals((java.lang.Object) equation55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution80 = gcdSolutionWrapper37.getSolution();
        boolean boolean81 = gcdSolutionWrapper27.equals((java.lang.Object) gcdSolutionWrapper37);
        boolean boolean82 = equation3.equals((java.lang.Object) gcdSolutionWrapper37);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str8, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str29, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(solution42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(solution56);
        org.junit.Assert.assertNotNull(solution57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Solution[x=97, y=1]" + "'", str72, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(solution80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test5146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5146");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str6 = solution5.toString();
        solution5.setX(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        java.lang.String str17 = solution15.toString();
        solution15.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int24 = equation23.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        boolean boolean26 = solution15.equals((java.lang.Object) solution25);
        boolean boolean28 = solution25.equals((java.lang.Object) 0);
        boolean boolean29 = equation12.equals((java.lang.Object) solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution33);
        java.lang.String str35 = gcdSolutionWrapper34.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str40 = equation39.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation39);
        boolean boolean42 = gcdSolutionWrapper34.equals((java.lang.Object) solution41);
        boolean boolean43 = equation12.equals((java.lang.Object) gcdSolutionWrapper34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        solution44.setX((-75));
        int int47 = solution44.getX();
        boolean boolean48 = solution5.equals((java.lang.Object) solution44);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=0, y=-35]" + "'", str6, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=97, y=1]" + "'", str17, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str35, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str40, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-75) + "'", int47 == (-75));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test5147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5147");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) (short) 0, 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution5);
        boolean boolean8 = gcdSolutionWrapper6.equals((java.lang.Object) 1);
        java.lang.String str9 = gcdSolutionWrapper6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper6.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (short) 100);
        gcdSolutionWrapper6.setSolution(solution13);
        boolean boolean15 = equation3.equals((java.lang.Object) gcdSolutionWrapper6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        java.lang.String str19 = solution18.toString();
        gcdSolutionWrapper6.setSolution(solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution22);
        gcdSolutionWrapper23.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        gcdSolutionWrapper23.setSolution(solution28);
        boolean boolean33 = gcdSolutionWrapper23.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper23.setGcd(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int39 = solution38.getY();
        java.lang.String str40 = solution38.toString();
        int int41 = solution38.getX();
        int int42 = solution38.getY();
        solution38.setY((int) (short) 100);
        int int45 = solution38.getX();
        solution38.setY(52);
        java.lang.String str48 = solution38.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int53 = equation52.c();
        int int54 = equation52.a();
        int int55 = equation52.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation52);
        boolean boolean57 = solution38.equals((java.lang.Object) equation52);
        gcdSolutionWrapper23.setSolution(solution38);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int62 = solution61.getY();
        java.lang.String str63 = solution61.toString();
        solution61.setX((int) (short) 1);
        solution61.setX((int) (byte) 10);
        java.lang.String str68 = solution61.toString();
        solution61.setY((int) 'a');
        solution61.setY(35);
        boolean boolean73 = solution38.equals((java.lang.Object) solution61);
        int int74 = solution38.getX();
        java.lang.String str75 = solution38.toString();
        gcdSolutionWrapper6.setSolution(solution38);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str9, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=100, y=32]" + "'", str19, "Solution[x=100, y=32]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=97, y=1]" + "'", str40, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=97, y=52]" + "'", str48, "Solution[x=97, y=52]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(solution56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Solution[x=97, y=1]" + "'", str63, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Solution[x=10, y=1]" + "'", str68, "Solution[x=10, y=1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Solution[x=97, y=52]" + "'", str75, "Solution[x=97, y=52]");
    }

    @Test
    public void test5148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5148");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        int int20 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution21);
        int int23 = gcdSolutionWrapper22.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', (int) (byte) 10);
        solution26.setX((int) (byte) 1);
        gcdSolutionWrapper22.setSolution(solution26);
        solution26.setX((int) (short) 1);
        int int32 = solution26.getY();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
    }

    @Test
    public void test5149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5149");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 100);
        gcdSolutionWrapper8.setSolution(solution15);
        int int17 = solution15.getX();
        int int18 = solution15.getY();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test5150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5150");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 32, (int) 'a');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        java.lang.Object obj8 = null;
        boolean boolean9 = equation3.equals(obj8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.Class<?> wildcardClass11 = solution10.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-1, b=32, c=97]" + "'", str4, "Equation[a=-1, b=32, c=97]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test5151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5151");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, 0);
        solution2.setY((int) (byte) -1);
        java.lang.String str5 = solution2.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=-1, y=-1]" + "'", str5, "Solution[x=-1, y=-1]");
    }

    @Test
    public void test5152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5152");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        int int5 = equation3.c();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        solution15.setY((int) (byte) 1);
        boolean boolean20 = solution15.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper21.getSolution();
        java.lang.String str23 = gcdSolutionWrapper21.toString();
        gcdSolutionWrapper21.setGcd((int) (byte) 1);
        boolean boolean26 = equation11.equals((java.lang.Object) gcdSolutionWrapper21);
        java.lang.String str27 = equation11.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        boolean boolean30 = equation3.equals((java.lang.Object) solution29);
        int int31 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str23, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str27, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
    }

    @Test
    public void test5153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5153");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        int int13 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation20);
        int int22 = solution21.getX();
        int int23 = solution21.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution21);
        gcdSolutionWrapper24.setGcd((int) (byte) 10);
        gcdSolutionWrapper24.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int35 = solution34.getY();
        solution34.setY((int) (byte) 1);
        gcdSolutionWrapper31.setSolution(solution34);
        int int39 = gcdSolutionWrapper31.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int43 = solution42.getY();
        java.lang.String str44 = solution42.toString();
        solution42.setX((int) (short) 1);
        boolean boolean48 = solution42.equals((java.lang.Object) (-1.0f));
        java.lang.String str49 = solution42.toString();
        java.lang.String str50 = solution42.toString();
        gcdSolutionWrapper31.setSolution(solution42);
        java.lang.String str52 = solution42.toString();
        solution42.setY(52);
        int int55 = solution42.getY();
        solution42.setY((int) (short) 100);
        gcdSolutionWrapper24.setSolution(solution42);
        java.lang.String str59 = solution42.toString();
        gcdSolutionWrapper8.setSolution(solution42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = gcdSolutionWrapper8.getSolution();
        solution61.setX((int) (short) 100);
        solution61.setX((int) (short) 0);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Solution[x=97, y=1]" + "'", str44, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Solution[x=1, y=1]" + "'", str49, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Solution[x=1, y=1]" + "'", str50, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=1, y=1]" + "'", str52, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Solution[x=1, y=100]" + "'", str59, "Solution[x=1, y=100]");
        org.junit.Assert.assertNotNull(solution61);
    }

    @Test
    public void test5154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5154");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getX();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        boolean boolean14 = gcdSolutionWrapper12.equals((java.lang.Object) 1);
        gcdSolutionWrapper12.setGcd(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 0);
        gcdSolutionWrapper12.setSolution(solution19);
        gcdSolutionWrapper9.setSolution(solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int27 = equation26.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        java.lang.String str30 = equation26.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        gcdSolutionWrapper22.setSolution(solution32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = gcdSolutionWrapper22.getSolution();
        solution34.setY(32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str30, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertNotNull(solution34);
    }

    @Test
    public void test5155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5155");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) -1, (-35));
        int int4 = equation3.a();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int10 = equation9.c();
        int int11 = equation9.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        solution15.setY((int) (byte) 1);
        boolean boolean20 = solution15.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper21.getSolution();
        java.lang.String str23 = gcdSolutionWrapper21.toString();
        gcdSolutionWrapper21.setGcd((int) (byte) 1);
        boolean boolean26 = equation9.equals((java.lang.Object) gcdSolutionWrapper21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        boolean boolean28 = equation3.equals((java.lang.Object) equation9);
        java.lang.String str29 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-35) + "'", int5 == (-35));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str23, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Equation[a=100, b=-1, c=-35]" + "'", str29, "Equation[a=100, b=-1, c=-35]");
    }

    @Test
    public void test5156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5156");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str6 = equation5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        boolean boolean18 = solution13.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        java.lang.String str24 = solution22.toString();
        boolean boolean26 = solution22.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper19.setSolution(solution22);
        gcdSolutionWrapper9.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int33 = solution32.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution32);
        solution32.setY(0);
        solution32.setX((-75));
        gcdSolutionWrapper9.setSolution(solution32);
        java.lang.String str40 = gcdSolutionWrapper9.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str6, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=-75, y=0]]" + "'", str40, "GcdSolutionWrapper[gcd=10, solution=Solution[x=-75, y=0]]");
    }

    @Test
    public void test5157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5157");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        gcdSolutionWrapper8.setGcd((int) (byte) 10);
        gcdSolutionWrapper8.setGcd(0);
        java.lang.Class<?> wildcardClass13 = gcdSolutionWrapper8.getClass();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test5158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5158");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getX();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution4);
        java.lang.String str11 = gcdSolutionWrapper10.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=35, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=32, solution=Solution[x=35, y=1]]");
    }

    @Test
    public void test5159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5159");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper26);
        java.lang.String str35 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int37 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 52, (int) (byte) 1);
        int int42 = equation41.c();
        boolean boolean43 = equation3.equals((java.lang.Object) equation41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int48 = solution47.getY();
        java.lang.String str49 = solution47.toString();
        solution47.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution47);
        int int53 = gcdSolutionWrapper52.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = gcdSolutionWrapper52.getSolution();
        java.lang.String str55 = gcdSolutionWrapper52.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        solution58.setX((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int69 = solution68.getY();
        solution68.setY((int) (byte) 1);
        boolean boolean73 = solution68.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper74 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution68);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = gcdSolutionWrapper74.getSolution();
        java.lang.String str76 = gcdSolutionWrapper74.toString();
        gcdSolutionWrapper74.setGcd((int) (byte) 1);
        boolean boolean79 = equation64.equals((java.lang.Object) gcdSolutionWrapper74);
        int int80 = gcdSolutionWrapper74.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution81 = gcdSolutionWrapper74.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation85 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str86 = equation85.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution87 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation85);
        solution87.setY((int) (byte) 10);
        boolean boolean90 = solution81.equals((java.lang.Object) solution87);
        int int91 = solution87.getY();
        boolean boolean92 = solution58.equals((java.lang.Object) solution87);
        gcdSolutionWrapper52.setSolution(solution87);
        boolean boolean94 = equation41.equals((java.lang.Object) gcdSolutionWrapper52);
        java.lang.String str95 = equation41.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str35, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Solution[x=97, y=1]" + "'", str49, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-35) + "'", int53 == (-35));
        org.junit.Assert.assertNotNull(solution54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]" + "'", str55, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(solution75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str76, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(solution81);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str86, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Equation[a=0, b=52, c=1]" + "'", str95, "Equation[a=0, b=52, c=1]");
    }

    @Test
    public void test5160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5160");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        boolean boolean7 = gcdSolutionWrapper5.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        boolean boolean19 = solution13.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = solution13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str25 = equation24.toString();
        int int26 = equation24.c();
        boolean boolean27 = solution13.equals((java.lang.Object) equation24);
        int int28 = equation24.c();
        boolean boolean29 = solution10.equals((java.lang.Object) equation24);
        boolean boolean30 = gcdSolutionWrapper5.equals((java.lang.Object) equation24);
        boolean boolean31 = solution2.equals((java.lang.Object) gcdSolutionWrapper5);
        gcdSolutionWrapper5.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        java.lang.String str39 = solution37.toString();
        solution37.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution37);
        int int43 = gcdSolutionWrapper42.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper42.getSolution();
        java.lang.String str45 = gcdSolutionWrapper42.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        solution48.setX((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int59 = solution58.getY();
        solution58.setY((int) (byte) 1);
        boolean boolean63 = solution58.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution58);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = gcdSolutionWrapper64.getSolution();
        java.lang.String str66 = gcdSolutionWrapper64.toString();
        gcdSolutionWrapper64.setGcd((int) (byte) 1);
        boolean boolean69 = equation54.equals((java.lang.Object) gcdSolutionWrapper64);
        int int70 = gcdSolutionWrapper64.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = gcdSolutionWrapper64.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation75 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str76 = equation75.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution77 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation75);
        solution77.setY((int) (byte) 10);
        boolean boolean80 = solution71.equals((java.lang.Object) solution77);
        int int81 = solution77.getY();
        boolean boolean82 = solution48.equals((java.lang.Object) solution77);
        gcdSolutionWrapper42.setSolution(solution77);
        int int84 = solution77.getY();
        boolean boolean85 = gcdSolutionWrapper5.equals((java.lang.Object) solution77);
        int int86 = solution77.getX();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str25, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Solution[x=97, y=1]" + "'", str39, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-35) + "'", int43 == (-35));
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]" + "'", str45, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str66, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(solution71);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str76, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test5161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5161");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 100);
        gcdSolutionWrapper8.setSolution(solution15);
        solution15.setX(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int23 = equation22.c();
        int int24 = equation22.a();
        int int25 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean27 = solution15.equals((java.lang.Object) equation22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        int int33 = equation31.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        solution37.setY((int) (byte) 1);
        boolean boolean42 = solution37.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper43.getSolution();
        java.lang.String str45 = gcdSolutionWrapper43.toString();
        gcdSolutionWrapper43.setGcd((int) (byte) 1);
        boolean boolean48 = equation31.equals((java.lang.Object) gcdSolutionWrapper43);
        int int49 = gcdSolutionWrapper43.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int54 = equation53.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation53);
        int int57 = equation53.b();
        int int58 = equation53.c();
        boolean boolean59 = gcdSolutionWrapper43.equals((java.lang.Object) int58);
        boolean boolean60 = equation22.equals((java.lang.Object) gcdSolutionWrapper43);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str45, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(solution55);
        org.junit.Assert.assertNotNull(solution56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test5162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5162");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, (int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        boolean boolean21 = solution17.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper14.setSolution(solution17);
        solution17.setX(1);
        java.lang.String str25 = solution17.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int33 = solution32.getY();
        java.lang.String str34 = solution32.toString();
        solution32.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int41 = equation40.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        boolean boolean43 = solution32.equals((java.lang.Object) solution42);
        boolean boolean45 = solution42.equals((java.lang.Object) 0);
        boolean boolean46 = equation29.equals((java.lang.Object) solution42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int51 = equation50.c();
        int int52 = equation50.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int57 = solution56.getY();
        solution56.setY((int) (byte) 1);
        boolean boolean61 = solution56.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution56);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = gcdSolutionWrapper62.getSolution();
        java.lang.String str64 = gcdSolutionWrapper62.toString();
        gcdSolutionWrapper62.setGcd((int) (byte) 1);
        boolean boolean67 = equation50.equals((java.lang.Object) gcdSolutionWrapper62);
        boolean boolean68 = equation29.equals((java.lang.Object) equation50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        boolean boolean70 = solution17.equals((java.lang.Object) equation29);
        boolean boolean71 = gcdSolutionWrapper4.equals((java.lang.Object) solution17);
        java.lang.String str72 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=1, y=1]" + "'", str25, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=97, y=1]" + "'", str34, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(solution63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str64, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(solution69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=10, y=1]]" + "'", str72, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=10, y=1]]");
    }

    @Test
    public void test5163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5163");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, 100, (int) (short) 0);
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=100, b=100, c=0]" + "'", str4, "Equation[a=100, b=100, c=0]");
    }

    @Test
    public void test5164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5164");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (-75), (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
    }

    @Test
    public void test5165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5165");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.c();
        int int6 = equation3.b();
        int int7 = equation3.c();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
    }

    @Test
    public void test5166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5166");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str5 = equation4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution6);
        java.lang.String str8 = gcdSolutionWrapper7.toString();
        gcdSolutionWrapper7.setGcd(0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str5, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=0]]" + "'", str8, "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=0]]");
    }

    @Test
    public void test5167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5167");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        java.lang.String str4 = solution3.toString();
        int int5 = solution3.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        java.lang.String str7 = solution3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=100, y=32]" + "'", str4, "Solution[x=100, y=32]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=100, y=32]" + "'", str7, "Solution[x=100, y=32]");
    }

    @Test
    public void test5168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5168");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int5 = equation4.a();
        int int6 = equation4.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        java.lang.String str8 = solution7.toString();
        int int9 = solution7.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(96, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        gcdSolutionWrapper13.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        java.lang.String str20 = solution18.toString();
        gcdSolutionWrapper13.setSolution(solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper13.getSolution();
        java.lang.String str23 = gcdSolutionWrapper13.toString();
        int int24 = gcdSolutionWrapper13.getGcd();
        java.lang.Object obj25 = null;
        boolean boolean26 = gcdSolutionWrapper13.equals(obj25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int33 = solution32.getY();
        solution32.setY((int) (byte) 1);
        gcdSolutionWrapper29.setSolution(solution32);
        int int37 = gcdSolutionWrapper29.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        java.lang.String str42 = solution40.toString();
        solution40.setX((int) (short) 1);
        boolean boolean46 = solution40.equals((java.lang.Object) (-1.0f));
        java.lang.String str47 = solution40.toString();
        java.lang.String str48 = solution40.toString();
        gcdSolutionWrapper29.setSolution(solution40);
        solution40.setX((int) '4');
        java.lang.String str52 = solution40.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int57 = equation56.c();
        boolean boolean59 = equation56.equals((java.lang.Object) false);
        int int60 = equation56.a();
        int int61 = equation56.c();
        int int62 = equation56.b();
        int int63 = equation56.a();
        java.lang.String str64 = equation56.toString();
        boolean boolean65 = solution40.equals((java.lang.Object) str64);
        solution40.setX((int) '4');
        gcdSolutionWrapper13.setSolution(solution40);
        gcdSolutionWrapper10.setSolution(solution40);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=125, y=-75]" + "'", str8, "Solution[x=125, y=-75]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 125 + "'", int9 == 125);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=97, y=1]" + "'", str20, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]" + "'", str23, "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Solution[x=1, y=1]" + "'", str47, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=1, y=1]" + "'", str48, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=52, y=1]" + "'", str52, "Solution[x=52, y=1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str64, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test5169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5169");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        solution7.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int16 = equation15.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        boolean boolean18 = solution7.equals((java.lang.Object) solution17);
        boolean boolean20 = solution17.equals((java.lang.Object) 0);
        boolean boolean21 = equation4.equals((java.lang.Object) solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution25);
        java.lang.String str27 = gcdSolutionWrapper26.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str32 = equation31.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        boolean boolean34 = gcdSolutionWrapper26.equals((java.lang.Object) solution33);
        boolean boolean35 = equation4.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = gcdSolutionWrapper37.getSolution();
        int int39 = solution38.getX();
        solution38.setY(0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str27, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str32, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 96 + "'", int39 == 96);
    }

    @Test
    public void test5170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5170");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        gcdSolutionWrapper4.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution10);
        gcdSolutionWrapper11.setGcd(97);
        boolean boolean14 = gcdSolutionWrapper4.equals((java.lang.Object) gcdSolutionWrapper11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        solution19.setY((int) (byte) 10);
        int int22 = solution19.getY();
        boolean boolean23 = gcdSolutionWrapper4.equals((java.lang.Object) solution19);
        int int24 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper4.getSolution();
        int int26 = gcdSolutionWrapper4.getGcd();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
    }

    @Test
    public void test5171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5171");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', (int) (short) 1, 52);
    }

    @Test
    public void test5172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5172");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        int int7 = equation3.a();
        int int8 = equation3.c();
        int int9 = equation3.b();
        int int10 = equation3.a();
        java.lang.String str11 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution12.setX((int) 'a');
        java.lang.Class<?> wildcardClass15 = solution12.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str11, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test5173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5173");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int11 = equation10.c();
        int int12 = equation10.a();
        int int13 = equation10.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int19 = equation18.c();
        int int20 = equation18.b();
        int int21 = equation18.c();
        boolean boolean22 = solution14.equals((java.lang.Object) equation18);
        boolean boolean23 = solution4.equals((java.lang.Object) boolean22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution4);
        java.lang.String str25 = solution4.toString();
        solution4.setY((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-75), solution4);
        int int29 = gcdSolutionWrapper28.getGcd();
        int int30 = gcdSolutionWrapper28.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=97, y=1]" + "'", str25, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-75) + "'", int29 == (-75));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-75) + "'", int30 == (-75));
    }

    @Test
    public void test5174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5174");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, (int) 'a', (-35));
    }

    @Test
    public void test5175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5175");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper8.getSolution();
        java.lang.String str11 = gcdSolutionWrapper8.toString();
        int int12 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper17.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        boolean boolean23 = gcdSolutionWrapper17.equals((java.lang.Object) 0);
        int int24 = gcdSolutionWrapper17.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int29 = equation28.c();
        boolean boolean31 = equation28.equals((java.lang.Object) false);
        java.lang.String str32 = equation28.toString();
        boolean boolean34 = equation28.equals((java.lang.Object) "");
        boolean boolean35 = gcdSolutionWrapper17.equals((java.lang.Object) "");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        int int42 = solution41.getX();
        int int43 = solution41.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution41);
        gcdSolutionWrapper44.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int51 = solution50.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution50);
        boolean boolean53 = gcdSolutionWrapper44.equals((java.lang.Object) solution50);
        boolean boolean54 = gcdSolutionWrapper17.equals((java.lang.Object) solution50);
        boolean boolean55 = gcdSolutionWrapper8.equals((java.lang.Object) solution50);
        int int56 = gcdSolutionWrapper8.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-35) + "'", int12 == (-35));
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str32, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-35) + "'", int56 == (-35));
    }

    @Test
    public void test5176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5176");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        solution2.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean9 = solution2.equals((java.lang.Object) solution8);
        int int10 = solution8.getX();
        solution8.setX(1);
        java.lang.String str13 = solution8.toString();
        boolean boolean15 = solution8.equals((java.lang.Object) "Equation[a=10, b=0, c=97]");
        int int16 = solution8.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=1, y=1]" + "'", str13, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test5177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5177");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int12 = equation11.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        boolean boolean14 = solution3.equals((java.lang.Object) solution13);
        int int15 = solution13.getY();
        java.lang.String str16 = solution13.toString();
        solution13.setX((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '#', solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int24 = equation23.c();
        int int25 = equation23.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str32 = equation31.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution33);
        java.lang.String str35 = gcdSolutionWrapper34.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper34.getSolution();
        boolean boolean37 = equation23.equals((java.lang.Object) solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        int int39 = solution38.getY();
        gcdSolutionWrapper19.setSolution(solution38);
        int int41 = solution38.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-35) + "'", int15 == (-35));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=0, y=-35]" + "'", str16, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str32, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str35, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-35) + "'", int39 == (-35));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test5178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5178");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (byte) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        int int10 = solution9.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int15 = equation14.c();
        int int16 = equation14.c();
        int int17 = equation14.a();
        boolean boolean18 = solution9.equals((java.lang.Object) equation14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution21);
        gcdSolutionWrapper22.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper22.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        solution28.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean35 = solution28.equals((java.lang.Object) solution34);
        gcdSolutionWrapper22.setSolution(solution28);
        boolean boolean37 = equation14.equals((java.lang.Object) solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution42);
        java.lang.String str44 = gcdSolutionWrapper43.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = gcdSolutionWrapper43.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution45);
        boolean boolean47 = equation14.equals((java.lang.Object) gcdSolutionWrapper46);
        int int48 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean50 = equation3.equals((java.lang.Object) solution49);
        solution49.setX((int) (short) -1);
        int int53 = solution49.getX();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertNull(solution25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str44, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test5179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5179");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        int int7 = solution6.getX();
        int int8 = solution6.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution6);
        gcdSolutionWrapper9.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean21 = solution16.equals((java.lang.Object) (byte) 10);
        gcdSolutionWrapper9.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        int int29 = solution28.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int34 = equation33.c();
        int int35 = equation33.c();
        int int36 = equation33.a();
        boolean boolean37 = solution28.equals((java.lang.Object) equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution40);
        gcdSolutionWrapper41.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper41.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int48 = solution47.getY();
        solution47.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean54 = solution47.equals((java.lang.Object) solution53);
        gcdSolutionWrapper41.setSolution(solution47);
        boolean boolean56 = equation33.equals((java.lang.Object) solution47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution61);
        java.lang.String str63 = gcdSolutionWrapper62.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = gcdSolutionWrapper62.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution64);
        boolean boolean66 = equation33.equals((java.lang.Object) gcdSolutionWrapper65);
        boolean boolean67 = solution16.equals((java.lang.Object) gcdSolutionWrapper65);
        java.lang.String str68 = solution16.toString();
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertNull(solution44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str63, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Solution[x=97, y=10]" + "'", str68, "Solution[x=97, y=10]");
    }

    @Test
    public void test5180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5180");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int25 = equation24.c();
        int int26 = equation24.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        solution30.setY((int) (byte) 1);
        boolean boolean35 = solution30.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper36.getSolution();
        java.lang.String str38 = gcdSolutionWrapper36.toString();
        gcdSolutionWrapper36.setGcd((int) (byte) 1);
        boolean boolean41 = equation24.equals((java.lang.Object) gcdSolutionWrapper36);
        boolean boolean42 = equation3.equals((java.lang.Object) equation24);
        int int43 = equation3.c();
        int int44 = equation3.b();
        int int45 = equation3.b();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str38, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 32 + "'", int43 == 32);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
    }

    @Test
    public void test5181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5181");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        int int22 = gcdSolutionWrapper16.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int27 = equation26.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        int int30 = equation26.b();
        int int31 = equation26.c();
        boolean boolean32 = gcdSolutionWrapper16.equals((java.lang.Object) int31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int38 = solution37.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution42);
        gcdSolutionWrapper43.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int49 = solution48.getY();
        java.lang.String str50 = solution48.toString();
        gcdSolutionWrapper43.setSolution(solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int56 = solution55.getY();
        solution55.setY((int) (byte) 1);
        boolean boolean60 = solution55.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = gcdSolutionWrapper61.getSolution();
        java.lang.String str63 = gcdSolutionWrapper61.toString();
        gcdSolutionWrapper61.setGcd((int) (byte) 1);
        int int66 = gcdSolutionWrapper61.getGcd();
        boolean boolean67 = solution48.equals((java.lang.Object) gcdSolutionWrapper61);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution48);
        gcdSolutionWrapper39.setSolution(solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution48);
        gcdSolutionWrapper16.setSolution(solution48);
        solution48.setX((int) (byte) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper74 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution48);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Solution[x=97, y=1]" + "'", str50, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(solution62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str63, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test5182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5182");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        solution14.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation21);
        solution22.setY((int) (byte) 10);
        boolean boolean25 = solution14.equals((java.lang.Object) (byte) 10);
        boolean boolean27 = solution14.equals((java.lang.Object) (-1));
        solution14.setY((int) (byte) 0);
        gcdSolutionWrapper8.setSolution(solution14);
        gcdSolutionWrapper8.setGcd(1);
        java.lang.String str33 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = gcdSolutionWrapper8.getSolution();
        int int36 = gcdSolutionWrapper8.getGcd();
        java.lang.Class<?> wildcardClass37 = gcdSolutionWrapper8.getClass();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=0]]" + "'", str33, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=0]]");
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test5183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5183");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(97, 10);
        int int3 = solution2.getX();
        int int4 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test5184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5184");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = solution4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int11 = equation10.c();
        int int12 = equation10.b();
        int int13 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        java.lang.String str15 = solution14.toString();
        int int16 = solution14.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution14);
        boolean boolean18 = solution4.equals((java.lang.Object) gcdSolutionWrapper17);
        gcdSolutionWrapper17.setGcd(10);
        int int21 = gcdSolutionWrapper17.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int26 = solution25.getY();
        solution25.setY((int) (byte) 1);
        boolean boolean30 = solution25.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = gcdSolutionWrapper31.getSolution();
        java.lang.String str33 = gcdSolutionWrapper31.toString();
        gcdSolutionWrapper31.setGcd((int) (byte) 1);
        java.lang.String str36 = gcdSolutionWrapper31.toString();
        java.lang.String str37 = gcdSolutionWrapper31.toString();
        int int38 = gcdSolutionWrapper31.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int43 = equation42.c();
        int int44 = equation42.b();
        int int45 = equation42.c();
        int int46 = equation42.c();
        boolean boolean47 = gcdSolutionWrapper31.equals((java.lang.Object) int46);
        gcdSolutionWrapper31.setGcd((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        boolean boolean53 = gcdSolutionWrapper31.equals((java.lang.Object) solution52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = gcdSolutionWrapper31.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = gcdSolutionWrapper31.getSolution();
        gcdSolutionWrapper17.setSolution(solution55);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=0, y=0]" + "'", str5, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=0, y=-35]" + "'", str15, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-35) + "'", int16 == (-35));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str33, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str36, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str37, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(solution54);
        org.junit.Assert.assertNotNull(solution55);
    }

    @Test
    public void test5185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5185");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution35.setY((-75));
        solution35.setY(96);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution35);
    }

    @Test
    public void test5186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5186");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        boolean boolean17 = solution13.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper10.setSolution(solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int24 = equation23.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        java.lang.String str26 = equation23.toString();
        int int27 = equation23.b();
        int int28 = equation23.b();
        boolean boolean29 = gcdSolutionWrapper19.equals((java.lang.Object) equation23);
        int int30 = equation23.a();
        int int31 = equation23.c();
        int int32 = equation23.a();
        int int33 = equation23.b();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str26, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test5187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5187");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        int int7 = solution6.getX();
        int int8 = solution6.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution6);
        java.lang.String str10 = solution6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(52, solution6);
        java.lang.String str12 = gcdSolutionWrapper11.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution14);
        boolean boolean17 = gcdSolutionWrapper15.equals((java.lang.Object) 1);
        java.lang.String str18 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd(32);
        int int21 = gcdSolutionWrapper15.getGcd();
        gcdSolutionWrapper15.setGcd((int) (short) 1);
        gcdSolutionWrapper15.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-35), (int) 'a');
        gcdSolutionWrapper15.setSolution(solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = gcdSolutionWrapper15.getSolution();
        gcdSolutionWrapper11.setSolution(solution30);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=0, y=0]" + "'", str10, "Solution[x=0, y=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]" + "'", str12, "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str18, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertNotNull(solution30);
    }

    @Test
    public void test5188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5188");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        boolean boolean10 = gcdSolutionWrapper4.equals((java.lang.Object) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper4.getSolution();
        java.lang.Class<?> wildcardClass14 = gcdSolutionWrapper4.getClass();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test5189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5189");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        boolean boolean15 = gcdSolutionWrapper13.equals((java.lang.Object) 1);
        boolean boolean16 = equation8.equals((java.lang.Object) boolean15);
        int int17 = equation8.a();
        boolean boolean18 = solution4.equals((java.lang.Object) int17);
        solution4.setY(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution23);
        gcdSolutionWrapper24.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        gcdSolutionWrapper24.setSolution(solution29);
        int int33 = gcdSolutionWrapper24.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        gcdSolutionWrapper24.setSolution(solution36);
        int int39 = solution36.getY();
        gcdSolutionWrapper21.setSolution(solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = gcdSolutionWrapper41.getSolution();
        java.lang.Class<?> wildcardClass43 = solution42.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 32 + "'", int33 == 32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test5190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5190");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) (short) -1);
        int int4 = equation3.b();
        int int5 = equation3.c();
        java.lang.String str6 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper16.setSolution(solution23);
        java.lang.String str25 = solution23.toString();
        solution23.setY((int) ' ');
        solution23.setX(1);
        int int30 = solution23.getX();
        solution23.setY((int) (byte) -1);
        int int33 = solution23.getY();
        java.lang.String str34 = solution23.toString();
        boolean boolean35 = equation3.equals((java.lang.Object) solution23);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=97, b=0, c=-1]" + "'", str6, "Equation[a=97, b=0, c=-1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=-1, y=52]" + "'", str25, "Solution[x=-1, y=52]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=1, y=-1]" + "'", str34, "Solution[x=1, y=-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test5191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5191");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = solution4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        java.lang.Class<?> wildcardClass10 = equation9.getClass();
        boolean boolean11 = solution4.equals((java.lang.Object) wildcardClass10);
        solution4.setY((int) (byte) 0);
        solution4.setY((-75));
        solution4.setY((-97));
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=0, y=0]" + "'", str5, "Solution[x=0, y=0]");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test5192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5192");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        java.lang.String str6 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution3);
        java.lang.String str8 = gcdSolutionWrapper7.toString();
        int int9 = gcdSolutionWrapper7.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=97, y=1]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test5193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5193");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        int int10 = gcdSolutionWrapper9.getGcd();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=0]]" + "'", str11, "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=0]]");
    }

    @Test
    public void test5194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5194");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(97, (int) (short) 1);
        solution3.setY((-35));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-35), (int) '4');
        java.lang.String str9 = solution8.toString();
        boolean boolean10 = solution3.equals((java.lang.Object) str9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=-35, y=52]" + "'", str9, "Solution[x=-35, y=52]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test5195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5195");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(125, (int) (short) 0);
    }

    @Test
    public void test5196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5196");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        int int7 = equation3.a();
        int int8 = equation3.c();
        int int9 = equation3.b();
        int int10 = equation3.a();
        java.lang.String str11 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str13 = equation3.toString();
        int int14 = equation3.a();
        int int15 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str11, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str13, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
    }

    @Test
    public void test5197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5197");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper8.getSolution();
        java.lang.Object obj12 = null;
        boolean boolean13 = solution11.equals(obj12);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test5198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5198");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, 97, (int) (byte) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int8 = equation7.c();
        boolean boolean9 = equation3.equals((java.lang.Object) equation7);
        int int10 = equation3.a();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test5199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5199");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(35, 32);
        java.lang.String str3 = solution2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=35, y=32]" + "'", str3, "Solution[x=35, y=32]");
    }

    @Test
    public void test5200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5200");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 100);
        gcdSolutionWrapper8.setSolution(solution15);
        solution15.setX(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int23 = equation22.c();
        int int24 = equation22.a();
        int int25 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean27 = solution15.equals((java.lang.Object) equation22);
        solution15.setX(32);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test5201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5201");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (byte) 1, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, (int) '#', (int) (short) 10);
        int int8 = equation7.a();
        boolean boolean9 = equation3.equals((java.lang.Object) equation7);
        int int10 = equation3.c();
        int int11 = equation3.a();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test5202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5202");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.c();
        int int7 = equation3.c();
        int int8 = equation3.a();
        int int9 = equation3.b();
        int int10 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        solution20.setY((int) (byte) 1);
        boolean boolean25 = solution20.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        boolean boolean33 = solution29.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper26.setSolution(solution29);
        int int35 = solution29.getX();
        boolean boolean36 = equation14.equals((java.lang.Object) solution29);
        java.lang.String str37 = equation14.toString();
        java.lang.String str38 = equation14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str44 = equation43.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation43);
        int int46 = equation43.c();
        int int47 = equation43.c();
        int int48 = equation43.a();
        int int49 = equation43.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int58 = solution57.getY();
        solution57.setY((int) (byte) 1);
        boolean boolean62 = solution57.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = gcdSolutionWrapper63.getSolution();
        java.lang.String str65 = gcdSolutionWrapper63.toString();
        gcdSolutionWrapper63.setGcd((int) (byte) 1);
        boolean boolean68 = equation53.equals((java.lang.Object) gcdSolutionWrapper63);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution70);
        gcdSolutionWrapper71.setGcd((int) ' ');
        gcdSolutionWrapper71.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution78 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int79 = solution78.getY();
        java.lang.String str80 = solution78.toString();
        solution78.setX((int) (short) 1);
        boolean boolean84 = solution78.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper71.setSolution(solution78);
        gcdSolutionWrapper63.setSolution(solution78);
        boolean boolean87 = equation43.equals((java.lang.Object) solution78);
        boolean boolean88 = equation14.equals((java.lang.Object) boolean87);
        int int89 = equation14.c();
        boolean boolean90 = equation3.equals((java.lang.Object) equation14);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str37, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str38, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str44, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str65, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Solution[x=97, y=1]" + "'", str80, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test5203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5203");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 32);
        solution3.setX((int) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution3);
    }

    @Test
    public void test5204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5204");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        int int8 = solution4.getY();
        java.lang.String str9 = solution4.toString();
        solution4.setY(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper12.getSolution();
        int int14 = gcdSolutionWrapper12.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper12.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        int int17 = solution15.getX();
        solution15.setX(52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
    }

    @Test
    public void test5205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5205");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean10 = solution3.equals((java.lang.Object) solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        int int12 = solution3.getY();
        solution3.setY(96);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test5206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5206");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        java.lang.String str15 = equation12.toString();
        boolean boolean16 = gcdSolutionWrapper8.equals((java.lang.Object) equation12);
        int int17 = equation12.c();
        int int18 = equation12.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str15, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(solution19);
    }

    @Test
    public void test5207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5207");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 0, 97);
        int int4 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test5208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5208");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, 0);
        solution2.setY((int) (byte) -1);
        solution2.setY(96);
        int int7 = solution2.getY();
        solution2.setY((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 96 + "'", int7 == 96);
    }

    @Test
    public void test5209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5209");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        java.lang.String str4 = solution3.toString();
        solution3.setX(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution3);
        gcdSolutionWrapper7.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(96, 52, (int) (short) 0);
        java.lang.String str14 = equation13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        gcdSolutionWrapper7.setSolution(solution15);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=100, y=32]" + "'", str4, "Solution[x=100, y=32]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Equation[a=96, b=52, c=0]" + "'", str14, "Equation[a=96, b=52, c=0]");
        org.junit.Assert.assertNotNull(solution15);
    }

    @Test
    public void test5210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5210");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, 100, (int) (short) 100);
    }

    @Test
    public void test5211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5211");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-75), (-75), 0);
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-75, b=-75, c=0]" + "'", str4, "Equation[a=-75, b=-75, c=0]");
    }

    @Test
    public void test5212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5212");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int20 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = gcdSolutionWrapper9.equals((java.lang.Object) equation19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper9.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int28 = equation27.c();
        java.lang.String str29 = equation27.toString();
        int int30 = equation27.b();
        int int31 = equation27.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        gcdSolutionWrapper9.setSolution(solution32);
        int int34 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(52, (int) '#');
        solution37.setX(100);
        gcdSolutionWrapper9.setSolution(solution37);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str29, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test5213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5213");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        int int10 = solution3.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
    }

    @Test
    public void test5214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5214");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        gcdSolutionWrapper4.setGcd(52);
        int int9 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        int int15 = solution14.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int20 = equation19.c();
        int int21 = equation19.c();
        int int22 = equation19.a();
        boolean boolean23 = solution14.equals((java.lang.Object) equation19);
        int int24 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        gcdSolutionWrapper4.setSolution(solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper4.getSolution();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertNotNull(solution27);
    }

    @Test
    public void test5215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5215");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        boolean boolean12 = solution6.equals((java.lang.Object) (-1.0f));
        java.lang.String str13 = solution6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str18 = equation17.toString();
        int int19 = equation17.c();
        boolean boolean20 = solution6.equals((java.lang.Object) equation17);
        int int21 = equation17.c();
        boolean boolean22 = solution3.equals((java.lang.Object) equation17);
        int int23 = solution3.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution3);
        solution3.setX((-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=1, y=1]" + "'", str13, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str18, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
    }

    @Test
    public void test5216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5216");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 10, 97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean15 = solution10.equals((java.lang.Object) (byte) 10);
        solution10.setX((-1));
        java.lang.String str18 = solution10.toString();
        solution10.setY(0);
        boolean boolean21 = equation5.equals((java.lang.Object) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        int int23 = equation5.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution24);
        gcdSolutionWrapper26.setGcd((-35));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=-1, y=0]" + "'", str18, "Solution[x=-1, y=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(solution24);
    }

    @Test
    public void test5217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5217");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (int) (short) 1);
        java.lang.String str3 = solution2.toString();
        int int4 = solution2.getY();
        java.lang.String str5 = solution2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=1, y=1]" + "'", str3, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=1, y=1]" + "'", str5, "Solution[x=1, y=1]");
    }

    @Test
    public void test5218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5218");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) 1);
        int int5 = gcdSolutionWrapper2.getGcd();
        int int6 = gcdSolutionWrapper2.getGcd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test5219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5219");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        solution6.setY((int) (byte) 1);
        gcdSolutionWrapper3.setSolution(solution6);
        int int11 = gcdSolutionWrapper3.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        java.lang.String str16 = solution14.toString();
        solution14.setX((int) (short) 1);
        boolean boolean20 = solution14.equals((java.lang.Object) (-1.0f));
        java.lang.String str21 = solution14.toString();
        java.lang.String str22 = solution14.toString();
        gcdSolutionWrapper3.setSolution(solution14);
        java.lang.String str24 = solution14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution14);
        int int26 = solution14.getY();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=1, y=1]" + "'", str21, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=1, y=1]" + "'", str22, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=1, y=1]" + "'", str24, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test5220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5220");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        java.lang.String str10 = solution8.toString();
        gcdSolutionWrapper3.setSolution(solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution13);
        gcdSolutionWrapper14.setGcd(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) -1, (-35));
        int int21 = equation20.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution23);
        gcdSolutionWrapper24.setGcd((int) ' ');
        gcdSolutionWrapper24.setGcd((int) (short) 1);
        boolean boolean29 = equation20.equals((java.lang.Object) gcdSolutionWrapper24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        java.lang.String str35 = solution34.toString();
        int int36 = solution34.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int45 = solution44.getY();
        solution44.setY((int) (byte) 1);
        boolean boolean49 = solution44.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution44);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = gcdSolutionWrapper50.getSolution();
        java.lang.String str52 = gcdSolutionWrapper50.toString();
        gcdSolutionWrapper50.setGcd((int) (byte) 1);
        boolean boolean55 = equation40.equals((java.lang.Object) gcdSolutionWrapper50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int60 = equation59.c();
        int int61 = equation59.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation59);
        boolean boolean63 = gcdSolutionWrapper50.equals((java.lang.Object) solution62);
        boolean boolean65 = gcdSolutionWrapper50.equals((java.lang.Object) (short) 0);
        int int66 = gcdSolutionWrapper50.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution68);
        gcdSolutionWrapper69.setGcd((int) ' ');
        gcdSolutionWrapper69.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int77 = solution76.getY();
        java.lang.String str78 = solution76.toString();
        solution76.setX((int) (short) 1);
        boolean boolean82 = solution76.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper69.setSolution(solution76);
        boolean boolean84 = gcdSolutionWrapper50.equals((java.lang.Object) gcdSolutionWrapper69);
        boolean boolean85 = solution34.equals((java.lang.Object) boolean84);
        java.lang.Class<?> wildcardClass86 = solution34.getClass();
        boolean boolean87 = equation20.equals((java.lang.Object) wildcardClass86);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution88 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation20);
        boolean boolean89 = gcdSolutionWrapper14.equals((java.lang.Object) equation20);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=97, y=1]" + "'", str10, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Solution[x=0, y=0]" + "'", str35, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(solution51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str52, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(solution62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Solution[x=97, y=1]" + "'", str78, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(solution88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test5221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5221");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        boolean boolean15 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        solution20.setY(0);
        gcdSolutionWrapper14.setSolution(solution20);
        java.lang.String str24 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution26);
        java.lang.Class<?> wildcardClass28 = gcdSolutionWrapper27.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=-1, y=0]]" + "'", str24, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=-1, y=0]]");
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test5222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5222");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution3);
        solution3.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (-1), 10);
        boolean boolean14 = solution3.equals((java.lang.Object) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test5223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5223");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int10 = equation9.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        boolean boolean16 = gcdSolutionWrapper14.equals((java.lang.Object) 1);
        boolean boolean17 = equation9.equals((java.lang.Object) boolean16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation21);
        solution22.setY((int) (byte) 10);
        boolean boolean25 = equation9.equals((java.lang.Object) solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (int) (short) 1);
        int int30 = solution29.getY();
        boolean boolean31 = solution26.equals((java.lang.Object) int30);
        int int32 = solution26.getY();
        boolean boolean33 = solution5.equals((java.lang.Object) solution26);
        solution5.setX(0);
        int int36 = solution5.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-35) + "'", int32 == (-35));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
    }

    @Test
    public void test5224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5224");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, (int) (short) 1, 125);
    }

    @Test
    public void test5225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5225");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int5 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        int int13 = solution10.getX();
        int int14 = solution10.getY();
        solution10.setY((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        solution27.setY((int) (byte) 1);
        boolean boolean32 = solution27.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = gcdSolutionWrapper33.getSolution();
        java.lang.String str35 = gcdSolutionWrapper33.toString();
        gcdSolutionWrapper33.setGcd((int) (byte) 1);
        boolean boolean38 = equation23.equals((java.lang.Object) gcdSolutionWrapper33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution40);
        gcdSolutionWrapper41.setGcd((int) ' ');
        gcdSolutionWrapper41.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int49 = solution48.getY();
        java.lang.String str50 = solution48.toString();
        solution48.setX((int) (short) 1);
        boolean boolean54 = solution48.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper41.setSolution(solution48);
        gcdSolutionWrapper33.setSolution(solution48);
        int int57 = gcdSolutionWrapper33.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper60 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution59);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int64 = solution63.getY();
        solution63.setY((int) (byte) 1);
        gcdSolutionWrapper60.setSolution(solution63);
        gcdSolutionWrapper60.setGcd((int) (byte) 0);
        boolean boolean70 = gcdSolutionWrapper33.equals((java.lang.Object) (byte) 0);
        boolean boolean71 = solution19.equals((java.lang.Object) gcdSolutionWrapper33);
        boolean boolean72 = solution10.equals((java.lang.Object) boolean71);
        gcdSolutionWrapper7.setSolution(solution10);
        int int74 = solution10.getY();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str35, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Solution[x=97, y=1]" + "'", str50, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
    }

    @Test
    public void test5226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5226");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper4.getSolution();
        java.lang.String str8 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int13 = equation12.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int18 = equation17.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution21);
        boolean boolean24 = gcdSolutionWrapper22.equals((java.lang.Object) 1);
        boolean boolean25 = equation17.equals((java.lang.Object) boolean24);
        int int26 = equation17.a();
        int int27 = equation17.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution29);
        gcdSolutionWrapper30.setGcd((int) ' ');
        gcdSolutionWrapper30.setGcd((int) (short) 1);
        int int35 = gcdSolutionWrapper30.getGcd();
        int int36 = gcdSolutionWrapper30.getGcd();
        boolean boolean37 = equation17.equals((java.lang.Object) int36);
        boolean boolean38 = equation12.equals((java.lang.Object) equation17);
        java.lang.String str39 = equation17.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        gcdSolutionWrapper4.setSolution(solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper4.getSolution();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str39, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertNotNull(solution44);
    }

    @Test
    public void test5227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5227");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str7 = equation6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution8);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str7, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertNotNull(solution8);
    }

    @Test
    public void test5228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5228");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', 1, (int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution5);
        org.junit.Assert.assertNotNull(solution5);
    }

    @Test
    public void test5229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5229");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation6.equals((java.lang.Object) gcdSolutionWrapper16);
        int int22 = gcdSolutionWrapper16.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper25.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(100, solution26);
        int int28 = solution26.getY();
        int int29 = solution26.getY();
        solution26.setY((-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test5230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5230");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        solution4.setX((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        boolean boolean19 = solution14.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper20.getSolution();
        java.lang.String str22 = gcdSolutionWrapper20.toString();
        gcdSolutionWrapper20.setGcd((int) (byte) 1);
        boolean boolean25 = equation10.equals((java.lang.Object) gcdSolutionWrapper20);
        int int26 = gcdSolutionWrapper20.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper20.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str32 = equation31.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        solution33.setY((int) (byte) 10);
        boolean boolean36 = solution27.equals((java.lang.Object) solution33);
        int int37 = solution33.getY();
        boolean boolean38 = solution4.equals((java.lang.Object) solution33);
        solution4.setX((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution4);
        int int43 = gcdSolutionWrapper42.getGcd();
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str22, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str32, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
    }

    @Test
    public void test5231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5231");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test5232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5232");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, (-1), 32);
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.b();
        int int6 = equation3.b();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=97, b=-1, c=32]" + "'", str4, "Equation[a=97, b=-1, c=32]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test5233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5233");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        boolean boolean21 = solution17.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper14.setSolution(solution17);
        int int23 = solution17.getX();
        java.lang.String str24 = solution17.toString();
        solution17.setX((int) (byte) 0);
        gcdSolutionWrapper4.setSolution(solution17);
        gcdSolutionWrapper4.setGcd(375);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
    }

    @Test
    public void test5234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5234");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) (byte) 1, (int) (short) -1);
    }

    @Test
    public void test5235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5235");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        solution27.setY((int) (byte) 1);
        boolean boolean32 = solution27.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        java.lang.String str38 = solution36.toString();
        boolean boolean40 = solution36.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper33.setSolution(solution36);
        int int42 = solution36.getX();
        java.lang.String str43 = solution36.toString();
        solution36.setX((int) (byte) 0);
        boolean boolean46 = gcdSolutionWrapper16.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper16.getSolution();
        java.lang.String str48 = gcdSolutionWrapper16.toString();
        int int49 = gcdSolutionWrapper16.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution56);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper57.getSolution();
        boolean boolean59 = gcdSolutionWrapper52.equals((java.lang.Object) gcdSolutionWrapper57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int64 = equation63.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation63);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution67 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution67);
        boolean boolean70 = gcdSolutionWrapper68.equals((java.lang.Object) 1);
        boolean boolean71 = equation63.equals((java.lang.Object) boolean70);
        int int72 = equation63.a();
        int int73 = equation63.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution75);
        gcdSolutionWrapper76.setGcd((int) ' ');
        gcdSolutionWrapper76.setGcd((int) (short) 1);
        int int81 = gcdSolutionWrapper76.getGcd();
        int int82 = gcdSolutionWrapper76.getGcd();
        boolean boolean83 = equation63.equals((java.lang.Object) int82);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution85 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper86 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution85);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution89 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int90 = solution89.getY();
        solution89.setY((int) (byte) 1);
        gcdSolutionWrapper86.setSolution(solution89);
        boolean boolean94 = equation63.equals((java.lang.Object) gcdSolutionWrapper86);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution95 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation63);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution96 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation63);
        java.lang.String str97 = solution96.toString();
        gcdSolutionWrapper52.setSolution(solution96);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Solution[x=97, y=1]" + "'", str38, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=97, y=1]" + "'", str43, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str48, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(solution50);
        org.junit.Assert.assertNotNull(solution51);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(solution95);
        org.junit.Assert.assertNotNull(solution96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Solution[x=0, y=-35]" + "'", str97, "Solution[x=0, y=-35]");
    }

    @Test
    public void test5236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5236");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.a();
        int int6 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution.INFINITE_SOLUTIONS;
        solution8.setY((int) (short) 100);
        int int11 = solution8.getX();
        boolean boolean12 = equation3.equals((java.lang.Object) solution8);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test5237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5237");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, 1, 100);
        int int4 = equation3.b();
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int10 = equation9.b();
        java.lang.String str11 = equation9.toString();
        int int12 = equation9.c();
        boolean boolean13 = equation3.equals((java.lang.Object) equation9);
        int int14 = equation9.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=-35, b=1, c=-1]" + "'", str11, "Equation[a=-35, b=1, c=-1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test5238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5238");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), (int) (short) 100, 35);
        java.lang.Object obj4 = null;
        boolean boolean5 = equation3.equals(obj4);
        boolean boolean7 = equation3.equals((java.lang.Object) 10.0f);
        int int8 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int13 = equation12.c();
        int int14 = equation12.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str21 = equation20.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution22);
        java.lang.String str24 = gcdSolutionWrapper23.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper23.getSolution();
        boolean boolean26 = equation12.equals((java.lang.Object) solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation32);
        int int34 = solution33.getX();
        int int35 = solution33.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution33);
        gcdSolutionWrapper36.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean48 = solution43.equals((java.lang.Object) (byte) 10);
        gcdSolutionWrapper36.setSolution(solution43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution43);
        boolean boolean51 = equation12.equals((java.lang.Object) 32);
        boolean boolean52 = equation3.equals((java.lang.Object) boolean51);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str21, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str24, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test5239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5239");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) -1, (-35));
        int int4 = equation3.a();
        int int5 = equation3.c();
        int int6 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution18);
        boolean boolean21 = gcdSolutionWrapper19.equals((java.lang.Object) 1);
        boolean boolean22 = equation14.equals((java.lang.Object) boolean21);
        int int23 = equation14.a();
        boolean boolean24 = solution10.equals((java.lang.Object) int23);
        solution10.setY(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution10);
        java.lang.String str28 = gcdSolutionWrapper27.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int33 = equation32.c();
        java.lang.String str34 = equation32.toString();
        int int35 = equation32.b();
        java.lang.String str36 = equation32.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation32);
        gcdSolutionWrapper27.setSolution(solution37);
        boolean boolean39 = equation3.equals((java.lang.Object) gcdSolutionWrapper27);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-35) + "'", int5 == (-35));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=10]]" + "'", str28, "GcdSolutionWrapper[gcd=1, solution=Solution[x=100, y=10]]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str34, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str36, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test5240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5240");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        int int7 = equation3.c();
        java.lang.String str8 = equation3.toString();
        java.lang.Object obj9 = null;
        boolean boolean10 = equation3.equals(obj9);
        java.lang.String str11 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str8, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str11, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test5241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5241");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) (short) 10, (-97));
    }

    @Test
    public void test5242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5242");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int12 = equation11.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        boolean boolean14 = solution3.equals((java.lang.Object) solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution17);
        boolean boolean19 = solution13.equals((java.lang.Object) (byte) 1);
        solution13.setX((int) 'a');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test5243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5243");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        int int7 = solution6.getX();
        int int8 = solution6.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution6);
        boolean boolean11 = solution6.equals((java.lang.Object) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        boolean boolean15 = solution6.equals((java.lang.Object) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution6);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test5244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5244");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), (int) (byte) 100, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = solution4.getY();
        solution4.setX((int) (short) 0);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test5245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5245");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        boolean boolean34 = solution28.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper21.setSolution(solution28);
        gcdSolutionWrapper13.setSolution(solution28);
        int int37 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int44 = solution43.getY();
        solution43.setY((int) (byte) 1);
        gcdSolutionWrapper40.setSolution(solution43);
        gcdSolutionWrapper40.setGcd((int) (byte) 0);
        boolean boolean50 = gcdSolutionWrapper13.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int55 = equation54.c();
        int int56 = equation54.a();
        int int57 = equation54.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation54);
        solution58.setY((int) ' ');
        boolean boolean61 = gcdSolutionWrapper13.equals((java.lang.Object) solution58);
        int int62 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation66 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int67 = equation66.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation66);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution70);
        boolean boolean73 = gcdSolutionWrapper71.equals((java.lang.Object) 1);
        boolean boolean74 = equation66.equals((java.lang.Object) boolean73);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation78 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution79 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation78);
        solution79.setY((int) (byte) 10);
        boolean boolean82 = equation66.equals((java.lang.Object) solution79);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution83 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation66);
        solution83.setY((int) (short) 100);
        gcdSolutionWrapper13.setSolution(solution83);
        solution83.setY(32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(solution68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(solution79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(solution83);
    }

    @Test
    public void test5246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5246");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        solution6.setY((int) (byte) 1);
        boolean boolean11 = solution6.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper12.getSolution();
        java.lang.String str14 = gcdSolutionWrapper12.toString();
        boolean boolean15 = solution2.equals((java.lang.Object) str14);
        solution2.setX(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        java.lang.String str22 = equation21.toString();
        int int23 = equation21.c();
        boolean boolean24 = solution2.equals((java.lang.Object) equation21);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str22, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test5247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5247");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int6 = solution5.getY();
        solution5.setY((int) (byte) 1);
        boolean boolean10 = solution5.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        java.lang.String str16 = solution14.toString();
        boolean boolean18 = solution14.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper11.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution14);
        int int21 = solution14.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper22.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        java.lang.String str28 = solution26.toString();
        solution26.setX((int) (short) 1);
        boolean boolean32 = solution26.equals((java.lang.Object) (-1.0f));
        java.lang.String str33 = solution26.toString();
        java.lang.String str34 = solution26.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution38);
        java.lang.String str40 = gcdSolutionWrapper39.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = gcdSolutionWrapper39.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int46 = equation45.c();
        int int47 = equation45.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        solution51.setY((int) (byte) 1);
        boolean boolean56 = solution51.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper57.getSolution();
        java.lang.String str59 = gcdSolutionWrapper57.toString();
        gcdSolutionWrapper57.setGcd((int) (byte) 1);
        boolean boolean62 = equation45.equals((java.lang.Object) gcdSolutionWrapper57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation45);
        boolean boolean64 = gcdSolutionWrapper39.equals((java.lang.Object) solution63);
        boolean boolean65 = solution26.equals((java.lang.Object) gcdSolutionWrapper39);
        solution26.setY((int) (short) -1);
        boolean boolean68 = gcdSolutionWrapper22.equals((java.lang.Object) solution26);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=97, y=1]" + "'", str28, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Solution[x=1, y=1]" + "'", str33, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=1, y=1]" + "'", str34, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str40, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str59, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(solution63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test5248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5248");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int25 = equation24.c();
        int int26 = equation24.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        solution30.setY((int) (byte) 1);
        boolean boolean35 = solution30.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper36.getSolution();
        java.lang.String str38 = gcdSolutionWrapper36.toString();
        gcdSolutionWrapper36.setGcd((int) (byte) 1);
        boolean boolean41 = equation24.equals((java.lang.Object) gcdSolutionWrapper36);
        boolean boolean42 = equation3.equals((java.lang.Object) equation24);
        int int43 = equation24.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        solution51.setY((int) (byte) 1);
        boolean boolean56 = solution51.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper57.getSolution();
        java.lang.String str59 = gcdSolutionWrapper57.toString();
        gcdSolutionWrapper57.setGcd((int) (byte) 1);
        boolean boolean62 = equation47.equals((java.lang.Object) gcdSolutionWrapper57);
        java.lang.String str63 = equation47.toString();
        boolean boolean64 = equation24.equals((java.lang.Object) equation47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int74 = solution73.getY();
        solution73.setY((int) (byte) 1);
        boolean boolean78 = solution73.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper79 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution73);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution80 = gcdSolutionWrapper79.getSolution();
        java.lang.String str81 = gcdSolutionWrapper79.toString();
        gcdSolutionWrapper79.setGcd((int) (byte) 1);
        boolean boolean84 = equation69.equals((java.lang.Object) gcdSolutionWrapper79);
        int int85 = gcdSolutionWrapper79.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution86 = gcdSolutionWrapper79.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper87 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution86);
        int int88 = gcdSolutionWrapper87.getGcd();
        boolean boolean89 = equation47.equals((java.lang.Object) int88);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution90 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation47);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str38, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str59, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str63, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(solution80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str81, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(solution86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 32 + "'", int88 == 32);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(solution90);
    }

    @Test
    public void test5249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5249");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int5 = equation4.c();
        int int6 = equation4.a();
        int int7 = equation4.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        java.lang.String str9 = solution8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution8);
        gcdSolutionWrapper10.setGcd(10);
        int int13 = gcdSolutionWrapper10.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=0, y=10]" + "'", str9, "Solution[x=0, y=10]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test5250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5250");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation5.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int25 = equation24.c();
        int int26 = equation24.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        boolean boolean28 = gcdSolutionWrapper15.equals((java.lang.Object) solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str33 = equation32.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation32);
        solution34.setY((int) (byte) 10);
        gcdSolutionWrapper15.setSolution(solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution34);
        int int39 = gcdSolutionWrapper38.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation48);
        int int50 = solution49.getX();
        boolean boolean51 = equation43.equals((java.lang.Object) solution49);
        gcdSolutionWrapper38.setSolution(solution49);
        int int53 = solution49.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-75), solution49);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, 0);
        solution57.setX(1);
        int int60 = solution57.getX();
        int int61 = solution57.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper66 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution65);
        java.lang.String str67 = gcdSolutionWrapper66.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = gcdSolutionWrapper66.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = gcdSolutionWrapper66.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = gcdSolutionWrapper66.getSolution();
        java.lang.String str71 = gcdSolutionWrapper66.toString();
        gcdSolutionWrapper66.setGcd((int) (byte) 10);
        int int74 = gcdSolutionWrapper66.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = gcdSolutionWrapper66.getSolution();
        boolean boolean76 = solution57.equals((java.lang.Object) solution75);
        gcdSolutionWrapper54.setSolution(solution75);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str33, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str67, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution68);
        org.junit.Assert.assertNotNull(solution69);
        org.junit.Assert.assertNotNull(solution70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str71, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(solution75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test5251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5251");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.c();
        int int6 = equation3.b();
        int int7 = equation3.a();
        int int8 = equation3.c();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test5252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5252");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        boolean boolean11 = gcdSolutionWrapper9.equals((java.lang.Object) 1);
        boolean boolean12 = equation4.equals((java.lang.Object) boolean11);
        int int13 = equation4.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution14);
        int int16 = gcdSolutionWrapper15.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test5253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5253");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        int int11 = solution10.getX();
        int int12 = solution10.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution10);
        boolean boolean14 = solution4.equals((java.lang.Object) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        solution20.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation28);
        int int30 = solution29.getX();
        int int31 = solution29.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution29);
        int int33 = solution29.getX();
        gcdSolutionWrapper23.setSolution(solution29);
        boolean boolean35 = solution4.equals((java.lang.Object) gcdSolutionWrapper23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution4);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test5254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5254");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) 0, 1);
        int int4 = equation3.b();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test5255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5255");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        solution10.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution10);
        int int16 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, 0);
        solution19.setX(1);
        gcdSolutionWrapper15.setSolution(solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution24);
        gcdSolutionWrapper25.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        java.lang.String str32 = solution30.toString();
        gcdSolutionWrapper25.setSolution(solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = gcdSolutionWrapper25.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution38);
        boolean boolean41 = gcdSolutionWrapper39.equals((java.lang.Object) 1);
        java.lang.String str42 = gcdSolutionWrapper39.toString();
        gcdSolutionWrapper39.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper39.setSolution(solution47);
        int int49 = solution47.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution47);
        java.lang.String str51 = solution47.toString();
        solution47.setX((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution47);
        gcdSolutionWrapper25.setSolution(solution47);
        java.lang.String str56 = solution47.toString();
        gcdSolutionWrapper15.setSolution(solution47);
        boolean boolean58 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=10, b=10, c=52]" + "'", str4, "Equation[a=10, b=10, c=52]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-35) + "'", int16 == (-35));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Solution[x=97, y=1]" + "'", str32, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str42, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Solution[x=100, y=-1]" + "'", str51, "Solution[x=100, y=-1]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Solution[x=10, y=-1]" + "'", str56, "Solution[x=10, y=-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test5256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5256");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(35, (int) (short) 100);
        int int4 = solution3.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper5.getSolution();
        gcdSolutionWrapper5.setGcd((int) '4');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution6);
    }

    @Test
    public void test5257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5257");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution4);
        solution4.setX((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution4);
        solution4.setY((int) '#');
        java.lang.String str15 = solution4.toString();
        int int16 = solution4.getY();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=-1, y=35]" + "'", str15, "Solution[x=-1, y=35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
    }

    @Test
    public void test5258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5258");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        int int8 = equation3.c();
        int int9 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str11 = equation3.toString();
        int int12 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str11, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test5259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5259");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(375, 32, 96);
    }

    @Test
    public void test5260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5260");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (-35), (int) (byte) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution.NO_SOLUTION;
        boolean boolean5 = equation3.equals((java.lang.Object) solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str7 = equation3.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Equation[a=100, b=-35, c=100]" + "'", str7, "Equation[a=100, b=-35, c=100]");
    }

    @Test
    public void test5261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5261");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution4);
        gcdSolutionWrapper5.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution11);
        gcdSolutionWrapper12.setGcd(97);
        boolean boolean15 = gcdSolutionWrapper5.equals((java.lang.Object) gcdSolutionWrapper12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 52);
        solution18.setY((-75));
        gcdSolutionWrapper12.setSolution(solution18);
        java.lang.String str22 = gcdSolutionWrapper12.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution26);
        int int28 = gcdSolutionWrapper27.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution30);
        gcdSolutionWrapper31.setGcd((int) ' ');
        gcdSolutionWrapper31.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper31.getSolution();
        int int37 = gcdSolutionWrapper31.getGcd();
        gcdSolutionWrapper31.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation43);
        solution44.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean51 = solution44.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper31.setSolution(solution44);
        gcdSolutionWrapper27.setSolution(solution44);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int58 = equation57.c();
        int int59 = equation57.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int64 = solution63.getY();
        solution63.setY((int) (byte) 1);
        boolean boolean68 = solution63.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution63);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = gcdSolutionWrapper69.getSolution();
        java.lang.String str71 = gcdSolutionWrapper69.toString();
        gcdSolutionWrapper69.setGcd((int) (byte) 1);
        boolean boolean74 = equation57.equals((java.lang.Object) gcdSolutionWrapper69);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = gcdSolutionWrapper69.getSolution();
        int int76 = solution75.getX();
        solution75.setY((int) 'a');
        gcdSolutionWrapper27.setSolution(solution75);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution83 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int84 = solution83.getY();
        solution83.setY((int) (byte) 1);
        int int87 = solution83.getY();
        java.lang.String str88 = solution83.toString();
        solution83.setY(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper91 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution83);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution92 = gcdSolutionWrapper91.getSolution();
        int int93 = gcdSolutionWrapper91.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution94 = gcdSolutionWrapper91.getSolution();
        boolean boolean95 = solution75.equals((java.lang.Object) solution94);
        gcdSolutionWrapper12.setSolution(solution75);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper97 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution75);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=97, solution=Solution[x=-1, y=-75]]" + "'", str22, "GcdSolutionWrapper[gcd=97, solution=Solution[x=-1, y=-75]]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(solution36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(solution70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str71, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(solution75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Solution[x=97, y=1]" + "'", str88, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(solution94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test5262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5262");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, 10);
        solution2.setY((-1));
        int int5 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test5263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5263");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        int int7 = solution6.getX();
        int int8 = solution6.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution6);
        gcdSolutionWrapper9.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean21 = solution16.equals((java.lang.Object) (byte) 10);
        gcdSolutionWrapper9.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        int int29 = solution28.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int34 = equation33.c();
        int int35 = equation33.c();
        int int36 = equation33.a();
        boolean boolean37 = solution28.equals((java.lang.Object) equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution40);
        gcdSolutionWrapper41.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper41.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int48 = solution47.getY();
        solution47.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean54 = solution47.equals((java.lang.Object) solution53);
        gcdSolutionWrapper41.setSolution(solution47);
        boolean boolean56 = equation33.equals((java.lang.Object) solution47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution61);
        java.lang.String str63 = gcdSolutionWrapper62.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = gcdSolutionWrapper62.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution64);
        boolean boolean66 = equation33.equals((java.lang.Object) gcdSolutionWrapper65);
        boolean boolean67 = solution16.equals((java.lang.Object) gcdSolutionWrapper65);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int71 = solution70.getY();
        java.lang.String str72 = solution70.toString();
        solution70.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation78 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean79 = solution70.equals((java.lang.Object) equation78);
        int int80 = equation78.c();
        int int81 = equation78.a();
        int int82 = equation78.a();
        boolean boolean83 = gcdSolutionWrapper65.equals((java.lang.Object) int82);
        java.lang.String str84 = gcdSolutionWrapper65.toString();
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertNull(solution44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str63, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Solution[x=97, y=1]" + "'", str72, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=52, y=52]]" + "'", str84, "GcdSolutionWrapper[gcd=1, solution=Solution[x=52, y=52]]");
    }

    @Test
    public void test5264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5264");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.c();
        int int7 = equation3.c();
        int int8 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(solution9);
    }

    @Test
    public void test5265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5265");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) '4', (int) (short) 100);
    }

    @Test
    public void test5266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5266");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) solution25);
        boolean boolean28 = gcdSolutionWrapper13.equals((java.lang.Object) (short) 0);
        int int29 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution31);
        gcdSolutionWrapper32.setGcd((int) ' ');
        gcdSolutionWrapper32.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int40 = solution39.getY();
        java.lang.String str41 = solution39.toString();
        solution39.setX((int) (short) 1);
        boolean boolean45 = solution39.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper32.setSolution(solution39);
        boolean boolean47 = gcdSolutionWrapper13.equals((java.lang.Object) gcdSolutionWrapper32);
        int int48 = gcdSolutionWrapper32.getGcd();
        gcdSolutionWrapper32.setGcd((int) (short) 0);
        int int51 = gcdSolutionWrapper32.getGcd();
        java.lang.Class<?> wildcardClass52 = gcdSolutionWrapper32.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Solution[x=97, y=1]" + "'", str41, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test5267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5267");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) ' ', 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
    }

    @Test
    public void test5268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5268");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (short) 1);
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.b();
        int int6 = equation3.b();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=32, b=-35, c=1]" + "'", str4, "Equation[a=32, b=-35, c=1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-35) + "'", int5 == (-35));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-35) + "'", int6 == (-35));
    }

    @Test
    public void test5269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5269");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper8.getSolution();
        java.lang.String str11 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        solution14.setX((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int25 = solution24.getY();
        solution24.setY((int) (byte) 1);
        boolean boolean29 = solution24.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = gcdSolutionWrapper30.getSolution();
        java.lang.String str32 = gcdSolutionWrapper30.toString();
        gcdSolutionWrapper30.setGcd((int) (byte) 1);
        boolean boolean35 = equation20.equals((java.lang.Object) gcdSolutionWrapper30);
        int int36 = gcdSolutionWrapper30.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper30.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str42 = equation41.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        solution43.setY((int) (byte) 10);
        boolean boolean46 = solution37.equals((java.lang.Object) solution43);
        int int47 = solution43.getY();
        boolean boolean48 = solution14.equals((java.lang.Object) solution43);
        gcdSolutionWrapper8.setSolution(solution43);
        java.lang.String str50 = gcdSolutionWrapper8.toString();
        java.lang.String str51 = gcdSolutionWrapper8.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str32, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str42, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=0, y=10]]" + "'", str50, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=0, y=10]]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=0, y=10]]" + "'", str51, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=0, y=10]]");
    }

    @Test
    public void test5270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5270");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int11 = equation10.c();
        int int12 = equation10.c();
        int int13 = equation10.a();
        boolean boolean14 = solution5.equals((java.lang.Object) equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        solution17.setX(1);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertNotNull(solution17);
    }

    @Test
    public void test5271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5271");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.c();
        int int7 = equation3.c();
        int int8 = equation3.b();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test5272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5272");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-75), (int) (short) 0, (int) '#');
        int int4 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
    }

    @Test
    public void test5273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5273");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int8 = equation3.c();
        int int9 = equation3.b();
        int int10 = equation3.a();
        int int11 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test5274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5274");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        boolean boolean9 = solution3.equals((java.lang.Object) true);
        solution3.setY(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution16);
        solution16.setY((int) (byte) 0);
        gcdSolutionWrapper12.setSolution(solution16);
        gcdSolutionWrapper12.setGcd((-35));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper12.getSolution();
        java.lang.String str24 = gcdSolutionWrapper12.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper12.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=100, y=0]]" + "'", str24, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=100, y=0]]");
        org.junit.Assert.assertNotNull(solution25);
    }

    @Test
    public void test5275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5275");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        gcdSolutionWrapper8.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        java.lang.String str16 = solution14.toString();
        solution14.setX((int) (short) 1);
        solution14.setX((int) (byte) 10);
        java.lang.String str21 = solution14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution14);
        boolean boolean23 = gcdSolutionWrapper8.equals((java.lang.Object) solution14);
        int int24 = gcdSolutionWrapper8.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=10, y=1]" + "'", str21, "Solution[x=10, y=1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test5276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5276");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        java.lang.String str5 = solution2.toString();
        java.lang.String str6 = solution2.toString();
        solution2.setY((int) (short) 0);
        solution2.setY((int) (short) 10);
        int int11 = solution2.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, 10);
        int int16 = equation15.a();
        int int17 = equation15.a();
        int int18 = equation15.c();
        boolean boolean19 = solution2.equals((java.lang.Object) equation15);
        solution2.setY((-75));
        solution2.setY((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test5277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5277");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean11 = solution2.equals((java.lang.Object) equation10);
        int int12 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        solution20.setY((int) (byte) 1);
        boolean boolean25 = solution20.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper26.getSolution();
        java.lang.String str28 = gcdSolutionWrapper26.toString();
        gcdSolutionWrapper26.setGcd((int) (byte) 1);
        boolean boolean31 = equation16.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int36 = equation35.c();
        int int37 = equation35.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        boolean boolean39 = gcdSolutionWrapper26.equals((java.lang.Object) solution38);
        boolean boolean41 = gcdSolutionWrapper26.equals((java.lang.Object) (short) 0);
        int int42 = gcdSolutionWrapper26.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution44);
        gcdSolutionWrapper45.setGcd((int) ' ');
        gcdSolutionWrapper45.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int53 = solution52.getY();
        java.lang.String str54 = solution52.toString();
        solution52.setX((int) (short) 1);
        boolean boolean58 = solution52.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper45.setSolution(solution52);
        boolean boolean60 = gcdSolutionWrapper26.equals((java.lang.Object) gcdSolutionWrapper45);
        boolean boolean61 = equation10.equals((java.lang.Object) gcdSolutionWrapper45);
        gcdSolutionWrapper45.setGcd((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str28, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Solution[x=97, y=1]" + "'", str54, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test5278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5278");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 1, (int) (byte) 100);
        solution2.setX((int) 'a');
        int int5 = solution2.getY();
        solution2.setY((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test5279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5279");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = solution4.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        boolean boolean9 = solution4.equals((java.lang.Object) 32);
        solution4.setY((int) (byte) 0);
        solution4.setX(35);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test5280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5280");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution4);
        java.lang.String str6 = gcdSolutionWrapper5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper5.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int12 = equation11.c();
        int int13 = equation11.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        solution17.setY((int) (byte) 1);
        boolean boolean22 = solution17.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper23.getSolution();
        java.lang.String str25 = gcdSolutionWrapper23.toString();
        gcdSolutionWrapper23.setGcd((int) (byte) 1);
        boolean boolean28 = equation11.equals((java.lang.Object) gcdSolutionWrapper23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        boolean boolean30 = gcdSolutionWrapper5.equals((java.lang.Object) solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution32);
        gcdSolutionWrapper33.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int39 = solution38.getY();
        java.lang.String str40 = solution38.toString();
        gcdSolutionWrapper33.setSolution(solution38);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = gcdSolutionWrapper33.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str47 = equation46.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation46);
        java.lang.String str49 = solution48.toString();
        boolean boolean50 = gcdSolutionWrapper33.equals((java.lang.Object) solution48);
        gcdSolutionWrapper5.setSolution(solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-75), solution48);
        gcdSolutionWrapper52.setGcd(1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str6, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str25, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=97, y=1]" + "'", str40, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str47, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Solution[x=0, y=-35]" + "'", str49, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test5281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5281");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        boolean boolean39 = solution35.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper32.setSolution(solution35);
        int int41 = solution35.getX();
        java.lang.String str42 = solution35.toString();
        solution35.setX((int) (byte) 0);
        boolean boolean45 = gcdSolutionWrapper15.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int53 = solution52.getY();
        java.lang.String str54 = solution52.toString();
        solution52.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution52);
        gcdSolutionWrapper58.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution64);
        gcdSolutionWrapper58.setSolution(solution64);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int70 = solution69.getY();
        java.lang.String str71 = solution69.toString();
        java.lang.String str72 = solution69.toString();
        java.lang.String str73 = solution69.toString();
        gcdSolutionWrapper58.setSolution(solution69);
        solution69.setY((int) '#');
        gcdSolutionWrapper15.setSolution(solution69);
        java.lang.Class<?> wildcardClass78 = gcdSolutionWrapper15.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Solution[x=97, y=1]" + "'", str54, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Solution[x=97, y=1]" + "'", str71, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Solution[x=97, y=1]" + "'", str72, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Solution[x=97, y=1]" + "'", str73, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test5282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5282");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution4);
        gcdSolutionWrapper10.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution16);
        gcdSolutionWrapper10.setSolution(solution16);
        int int19 = solution16.getX();
        solution16.setY((int) (short) -1);
        java.lang.Class<?> wildcardClass22 = solution16.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test5283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5283");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, (-1), 32);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution5.setX(0);
        solution5.setY((int) (byte) 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=97, b=-1, c=32]" + "'", str4, "Equation[a=97, b=-1, c=32]");
        org.junit.Assert.assertNotNull(solution5);
    }

    @Test
    public void test5284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5284");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        int int20 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str26 = equation25.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation25);
        solution27.setY((int) (byte) 10);
        boolean boolean30 = solution21.equals((java.lang.Object) solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(125, solution21);
        int int32 = solution21.getY();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str26, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test5285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5285");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) 1);
        int int3 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test5286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5286");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int4 = solution3.getY();
        int int5 = solution3.getY();
        boolean boolean7 = solution3.equals((java.lang.Object) "GcdSolutionWrapper[gcd=100, solution=null]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution10);
        gcdSolutionWrapper11.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        java.lang.String str18 = solution16.toString();
        gcdSolutionWrapper11.setSolution(solution16);
        boolean boolean21 = gcdSolutionWrapper11.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper11.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper11.getSolution();
        gcdSolutionWrapper8.setSolution(solution24);
        int int26 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        solution29.setX((int) (short) 1);
        solution29.setX((int) (byte) 1);
        boolean boolean36 = gcdSolutionWrapper8.equals((java.lang.Object) solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = gcdSolutionWrapper8.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=97, y=1]" + "'", str18, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertNotNull(solution38);
    }

    @Test
    public void test5287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5287");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        java.lang.String str7 = solution4.toString();
        java.lang.String str8 = solution4.toString();
        solution4.setY((int) (short) 0);
        solution4.setY((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        int int16 = solution15.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        java.lang.String str22 = solution20.toString();
        solution20.setX((int) (short) 1);
        boolean boolean26 = solution20.equals((java.lang.Object) (-1.0f));
        java.lang.String str27 = solution20.toString();
        java.lang.String str28 = solution20.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution32);
        java.lang.String str34 = gcdSolutionWrapper33.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = gcdSolutionWrapper33.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int40 = equation39.c();
        int int41 = equation39.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int46 = solution45.getY();
        solution45.setY((int) (byte) 1);
        boolean boolean50 = solution45.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = gcdSolutionWrapper51.getSolution();
        java.lang.String str53 = gcdSolutionWrapper51.toString();
        gcdSolutionWrapper51.setGcd((int) (byte) 1);
        boolean boolean56 = equation39.equals((java.lang.Object) gcdSolutionWrapper51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation39);
        boolean boolean58 = gcdSolutionWrapper33.equals((java.lang.Object) solution57);
        boolean boolean59 = solution20.equals((java.lang.Object) gcdSolutionWrapper33);
        solution20.setY((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper62.setGcd(32);
        boolean boolean65 = solution15.equals((java.lang.Object) 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=97, y=1]" + "'", str7, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=97, y=1]" + "'", str22, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=1, y=1]" + "'", str27, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=1, y=1]" + "'", str28, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str34, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(solution52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str53, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(solution57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test5288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5288");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 1, 0);
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        java.lang.String str6 = equation3.toString();
        int int7 = equation3.a();
        int int8 = equation3.b();
        int int9 = equation3.b();
        int int10 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str5, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str6, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test5289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5289");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper4.getSolution();
        java.lang.String str8 = gcdSolutionWrapper4.toString();
        java.lang.String str9 = gcdSolutionWrapper4.toString();
        java.lang.String str10 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str9, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str10, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
    }

    @Test
    public void test5290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5290");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.b();
        java.lang.Object obj7 = null;
        boolean boolean8 = equation3.equals(obj7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int10 = solution9.getY();
        int int11 = solution9.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-35) + "'", int10 == (-35));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-35) + "'", int11 == (-35));
    }

    @Test
    public void test5291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5291");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 100);
        int int3 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test5292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5292");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        int int8 = equation3.c();
        java.lang.String str9 = equation3.toString();
        int int10 = equation3.c();
        int int11 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution12.setY((int) '4');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str9, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(solution12);
    }

    @Test
    public void test5293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5293");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        int int6 = gcdSolutionWrapper4.getGcd();
        int int7 = gcdSolutionWrapper4.getGcd();
        java.lang.Class<?> wildcardClass8 = gcdSolutionWrapper4.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test5294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5294");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        solution27.setY((int) (byte) 1);
        boolean boolean32 = solution27.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        java.lang.String str38 = solution36.toString();
        boolean boolean40 = solution36.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper33.setSolution(solution36);
        int int42 = solution36.getX();
        java.lang.String str43 = solution36.toString();
        solution36.setX((int) (byte) 0);
        boolean boolean46 = gcdSolutionWrapper16.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        solution51.setY((int) (byte) 1);
        boolean boolean56 = solution51.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper57.getSolution();
        java.lang.String str59 = gcdSolutionWrapper57.toString();
        gcdSolutionWrapper57.setGcd((int) (byte) 1);
        java.lang.String str62 = gcdSolutionWrapper57.toString();
        gcdSolutionWrapper57.setGcd(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = gcdSolutionWrapper57.getSolution();
        boolean boolean66 = gcdSolutionWrapper16.equals((java.lang.Object) gcdSolutionWrapper57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution67 = gcdSolutionWrapper57.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution67);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int72 = solution71.getX();
        java.lang.String str73 = solution71.toString();
        solution71.setX((int) '#');
        gcdSolutionWrapper68.setSolution(solution71);
        int int77 = solution71.getX();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Solution[x=97, y=1]" + "'", str38, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=97, y=1]" + "'", str43, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str59, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str62, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(solution67);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 97 + "'", int72 == 97);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Solution[x=97, y=1]" + "'", str73, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
    }

    @Test
    public void test5295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5295");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(97, (int) (short) 1);
        java.lang.String str3 = solution2.toString();
        solution2.setX((int) 'a');
        java.lang.String str6 = solution2.toString();
        solution2.setX((int) '4');
        solution2.setX(375);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=97, y=1]" + "'", str3, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
    }

    @Test
    public void test5296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5296");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 35, 0);
    }

    @Test
    public void test5297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5297");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (byte) 10, (int) (short) -1);
        int int4 = equation3.b();
        int int5 = equation3.c();
        int int6 = equation3.b();
        int int7 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int12 = solution11.getY();
        java.lang.String str13 = solution11.toString();
        int int14 = solution11.getX();
        int int15 = solution11.getY();
        solution11.setY((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution11);
        boolean boolean19 = equation3.equals((java.lang.Object) 1);
        int int20 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=97, y=1]" + "'", str13, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test5298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5298");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        java.lang.String str9 = gcdSolutionWrapper8.toString();
        gcdSolutionWrapper8.setGcd((-1));
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]" + "'", str9, "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]");
    }

    @Test
    public void test5299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5299");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 0, (int) (byte) 0, 32);
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.a();
        int int6 = equation3.a();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=0, c=32]" + "'", str4, "Equation[a=0, b=0, c=32]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test5300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5300");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(35, 97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        gcdSolutionWrapper4.setGcd((int) '#');
    }

    @Test
    public void test5301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5301");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', (int) (short) 10, (-1));
        int int4 = equation3.b();
        int int5 = equation3.a();
        int int6 = equation3.a();
        int int7 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test5302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5302");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        int int5 = equation3.b();
        int int6 = equation3.c();
        int int7 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
    }

    @Test
    public void test5303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5303");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (-75), (int) '#');
        int int4 = equation3.b();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int10 = solution9.getX();
        int int11 = solution9.getX();
        solution9.setX((int) ' ');
        int int14 = solution9.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution9);
        boolean boolean16 = equation3.equals((java.lang.Object) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-75) + "'", int4 == (-75));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test5304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5304");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int4 = solution3.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        gcdSolutionWrapper5.setGcd(97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test5305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5305");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper4.getSolution();
        java.lang.String str6 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper4.getSolution();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=32, y=1]]" + "'", str6, "GcdSolutionWrapper[gcd=52, solution=Solution[x=32, y=1]]");
        org.junit.Assert.assertNotNull(solution7);
    }

    @Test
    public void test5306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5306");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper13.getSolution();
        int int20 = solution19.getY();
        int int21 = solution19.getY();
        int int22 = solution19.getX();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
    }

    @Test
    public void test5307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5307");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 10, (int) '#');
        int int4 = equation3.b();
        int int5 = equation3.b();
        int int6 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test5308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5308");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        java.lang.String str8 = equation3.toString();
        int int9 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        int int14 = equation13.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int19 = equation18.b();
        java.lang.String str20 = equation18.toString();
        int int21 = equation18.a();
        boolean boolean22 = equation13.equals((java.lang.Object) int21);
        boolean boolean23 = equation3.equals((java.lang.Object) equation13);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str8, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Equation[a=-35, b=1, c=-1]" + "'", str20, "Equation[a=-35, b=1, c=-1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-35) + "'", int21 == (-35));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test5309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5309");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        boolean boolean12 = gcdSolutionWrapper2.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper2.setGcd(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        int int20 = solution17.getX();
        int int21 = solution17.getY();
        solution17.setY((int) (short) 100);
        int int24 = solution17.getX();
        solution17.setY(52);
        java.lang.String str27 = solution17.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        int int33 = equation31.a();
        int int34 = equation31.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        boolean boolean36 = solution17.equals((java.lang.Object) equation31);
        gcdSolutionWrapper2.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper2.getSolution();
        int int40 = solution39.getY();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=97, y=52]" + "'", str27, "Solution[x=97, y=52]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
    }

    @Test
    public void test5310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5310");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', (int) ' ', 35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test5311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5311");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) 'a', 0);
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        gcdSolutionWrapper8.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        gcdSolutionWrapper8.setSolution(solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper8.getSolution();
        boolean boolean19 = equation3.equals((java.lang.Object) solution18);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=100, b=97, c=0]" + "'", str5, "Equation[a=100, b=97, c=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test5312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5312");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, 52);
        int int3 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test5313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5313");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        int int10 = solution9.getX();
        boolean boolean11 = equation3.equals((java.lang.Object) solution9);
        int int12 = equation3.c();
        int int13 = equation3.b();
        int int14 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(solution15);
    }

    @Test
    public void test5314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5314");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        solution2.setX((int) (byte) 10);
        java.lang.String str9 = solution2.toString();
        solution2.setY((int) 'a');
        solution2.setY(35);
        int int14 = solution2.getX();
        int int15 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=10, y=1]" + "'", str9, "Solution[x=10, y=1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test5315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5315");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) 1);
        java.lang.String str5 = gcdSolutionWrapper2.toString();
        gcdSolutionWrapper2.setGcd(32);
        int int8 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        solution13.setY((int) (byte) 10);
        solution13.setY((-1));
        int int18 = solution13.getX();
        solution13.setY(0);
        gcdSolutionWrapper2.setSolution(solution13);
        int int22 = solution13.getX();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str5, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test5316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5316");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        boolean boolean7 = gcdSolutionWrapper5.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        boolean boolean19 = solution13.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = solution13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str25 = equation24.toString();
        int int26 = equation24.c();
        boolean boolean27 = solution13.equals((java.lang.Object) equation24);
        int int28 = equation24.c();
        boolean boolean29 = solution10.equals((java.lang.Object) equation24);
        boolean boolean30 = gcdSolutionWrapper5.equals((java.lang.Object) equation24);
        boolean boolean31 = solution2.equals((java.lang.Object) gcdSolutionWrapper5);
        gcdSolutionWrapper5.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        java.lang.String str39 = solution37.toString();
        solution37.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution37);
        int int43 = gcdSolutionWrapper42.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper42.getSolution();
        java.lang.String str45 = gcdSolutionWrapper42.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        solution48.setX((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int59 = solution58.getY();
        solution58.setY((int) (byte) 1);
        boolean boolean63 = solution58.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution58);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = gcdSolutionWrapper64.getSolution();
        java.lang.String str66 = gcdSolutionWrapper64.toString();
        gcdSolutionWrapper64.setGcd((int) (byte) 1);
        boolean boolean69 = equation54.equals((java.lang.Object) gcdSolutionWrapper64);
        int int70 = gcdSolutionWrapper64.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = gcdSolutionWrapper64.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation75 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str76 = equation75.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution77 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation75);
        solution77.setY((int) (byte) 10);
        boolean boolean80 = solution71.equals((java.lang.Object) solution77);
        int int81 = solution77.getY();
        boolean boolean82 = solution48.equals((java.lang.Object) solution77);
        gcdSolutionWrapper42.setSolution(solution77);
        int int84 = solution77.getY();
        boolean boolean85 = gcdSolutionWrapper5.equals((java.lang.Object) solution77);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution88 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (short) 0);
        gcdSolutionWrapper5.setSolution(solution88);
        gcdSolutionWrapper5.setGcd((int) (byte) 1);
        int int92 = gcdSolutionWrapper5.getGcd();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str25, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Solution[x=97, y=1]" + "'", str39, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-35) + "'", int43 == (-35));
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]" + "'", str45, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str66, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(solution71);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str76, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test5317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5317");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', (int) '4');
        int int4 = solution3.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        java.lang.String str19 = gcdSolutionWrapper14.toString();
        java.lang.String str20 = gcdSolutionWrapper14.toString();
        int int21 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int26 = equation25.c();
        int int27 = equation25.b();
        int int28 = equation25.c();
        int int29 = equation25.c();
        boolean boolean30 = gcdSolutionWrapper14.equals((java.lang.Object) int29);
        gcdSolutionWrapper14.setGcd((int) (byte) 10);
        java.lang.String str33 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = gcdSolutionWrapper14.getSolution();
        boolean boolean35 = solution3.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        solution40.setY((int) (byte) 1);
        boolean boolean45 = solution40.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper46.getSolution();
        java.lang.String str48 = gcdSolutionWrapper46.toString();
        gcdSolutionWrapper46.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper46.setSolution(solution53);
        java.lang.String str55 = solution53.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution53);
        boolean boolean57 = gcdSolutionWrapper14.equals((java.lang.Object) solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper14.getSolution();
        java.lang.String str59 = solution58.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper60 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution58);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str19, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str20, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=97, y=1]]" + "'", str33, "GcdSolutionWrapper[gcd=10, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str48, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Solution[x=-1, y=52]" + "'", str55, "Solution[x=-1, y=52]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Solution[x=97, y=1]" + "'", str59, "Solution[x=97, y=1]");
    }

    @Test
    public void test5318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5318");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        java.lang.String str6 = solution3.toString();
        java.lang.String str7 = solution3.toString();
        solution3.setY((int) (short) 0);
        solution3.setY((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        java.lang.String str18 = solution16.toString();
        java.lang.String str19 = solution16.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str25 = equation24.toString();
        int int26 = equation24.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int32 = solution31.getY();
        java.lang.String str33 = solution31.toString();
        solution31.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution31);
        gcdSolutionWrapper37.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = gcdSolutionWrapper37.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution44);
        java.lang.String str46 = gcdSolutionWrapper45.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper45.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int52 = equation51.c();
        int int53 = equation51.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int58 = solution57.getY();
        solution57.setY((int) (byte) 1);
        boolean boolean62 = solution57.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = gcdSolutionWrapper63.getSolution();
        java.lang.String str65 = gcdSolutionWrapper63.toString();
        gcdSolutionWrapper63.setGcd((int) (byte) 1);
        boolean boolean68 = equation51.equals((java.lang.Object) gcdSolutionWrapper63);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation51);
        boolean boolean70 = gcdSolutionWrapper45.equals((java.lang.Object) solution69);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution74 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int75 = solution74.getY();
        solution74.setY((int) (byte) 1);
        boolean boolean79 = solution74.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper80 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution74);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution83 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int84 = solution83.getY();
        java.lang.String str85 = solution83.toString();
        boolean boolean87 = solution83.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper80.setSolution(solution83);
        int int89 = solution83.getX();
        boolean boolean90 = solution69.equals((java.lang.Object) solution83);
        gcdSolutionWrapper37.setSolution(solution69);
        boolean boolean92 = equation24.equals((java.lang.Object) solution69);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution93 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        boolean boolean94 = gcdSolutionWrapper20.equals((java.lang.Object) solution93);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution95 = gcdSolutionWrapper20.getSolution();
        boolean boolean96 = solution3.equals((java.lang.Object) gcdSolutionWrapper20);
        int int97 = solution3.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=97, y=1]" + "'", str7, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=97, y=1]" + "'", str18, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str25, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Solution[x=97, y=1]" + "'", str33, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str46, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str65, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(solution69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Solution[x=97, y=1]" + "'", str85, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 97 + "'", int89 == 97);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(solution93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(solution95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 10 + "'", int97 == 10);
    }

    @Test
    public void test5319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5319");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 10, (-97), 375);
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=10, b=-97, c=375]" + "'", str4, "Equation[a=10, b=-97, c=375]");
    }

    @Test
    public void test5320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5320");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int4 = solution3.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution3);
        java.lang.String str6 = gcdSolutionWrapper5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution10);
        boolean boolean13 = gcdSolutionWrapper11.equals((java.lang.Object) 1);
        java.lang.String str14 = gcdSolutionWrapper11.toString();
        gcdSolutionWrapper11.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper11.setSolution(solution19);
        int int21 = solution19.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(100, solution19);
        boolean boolean24 = gcdSolutionWrapper5.equals((java.lang.Object) 100);
        java.lang.String str25 = gcdSolutionWrapper5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        java.lang.String str31 = equation29.toString();
        int int32 = equation29.a();
        java.lang.Object obj33 = null;
        boolean boolean34 = equation29.equals(obj33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int40 = solution39.getY();
        solution39.setY((int) (byte) 1);
        boolean boolean44 = solution39.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution39);
        gcdSolutionWrapper46.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int53 = equation52.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution56);
        boolean boolean59 = gcdSolutionWrapper57.equals((java.lang.Object) 1);
        boolean boolean60 = equation52.equals((java.lang.Object) boolean59);
        boolean boolean61 = gcdSolutionWrapper46.equals((java.lang.Object) boolean59);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int65 = solution64.getY();
        java.lang.String str66 = solution64.toString();
        solution64.setX((int) (short) 1);
        solution64.setX((int) (byte) 10);
        gcdSolutionWrapper46.setSolution(solution64);
        boolean boolean72 = equation29.equals((java.lang.Object) gcdSolutionWrapper46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int76 = solution75.getY();
        java.lang.String str77 = solution75.toString();
        solution75.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation83 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int84 = equation83.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution85 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation83);
        boolean boolean86 = solution75.equals((java.lang.Object) solution85);
        int int87 = solution75.getY();
        java.lang.String str88 = solution75.toString();
        boolean boolean89 = gcdSolutionWrapper46.equals((java.lang.Object) solution75);
        gcdSolutionWrapper5.setSolution(solution75);
        int int91 = gcdSolutionWrapper5.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=1, y=52]]" + "'", str6, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=1, y=52]]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=1, y=52]]" + "'", str25, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=1, y=52]]");
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str31, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(solution54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Solution[x=97, y=1]" + "'", str66, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Solution[x=97, y=1]" + "'", str77, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(solution85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Solution[x=1, y=1]" + "'", str88, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test5321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5321");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-75), (int) '#');
        solution2.setX(125);
        solution2.setX((int) (short) -1);
    }

    @Test
    public void test5322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5322");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int20 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = gcdSolutionWrapper9.equals((java.lang.Object) equation19);
        int int23 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        int int25 = equation19.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        solution26.setY(97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(solution26);
    }

    @Test
    public void test5323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5323");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 1, 0);
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(solution5);
    }

    @Test
    public void test5324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5324");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-97), 1, (-75));
    }

    @Test
    public void test5325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5325");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        int int5 = solution2.getX();
        int int6 = solution2.getY();
        solution2.setX((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        int int15 = solution14.getX();
        int int16 = solution14.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution14);
        gcdSolutionWrapper17.setGcd((int) (short) 0);
        gcdSolutionWrapper17.setGcd((int) '4');
        int int22 = gcdSolutionWrapper17.getGcd();
        java.lang.String str23 = gcdSolutionWrapper17.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int27 = solution26.getX();
        int int28 = solution26.getX();
        gcdSolutionWrapper17.setSolution(solution26);
        boolean boolean30 = solution2.equals((java.lang.Object) solution26);
        int int31 = solution26.getX();
        int int32 = solution26.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]" + "'", str23, "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
    }

    @Test
    public void test5326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5326");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        solution2.setY((int) (byte) 1);
        int int6 = solution2.getY();
        java.lang.String str7 = solution2.toString();
        int int8 = solution2.getX();
        solution2.setY(1);
        solution2.setY((int) (byte) 100);
        int int13 = solution2.getY();
        int int14 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=97, y=1]" + "'", str7, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test5327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5327");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        boolean boolean15 = gcdSolutionWrapper13.equals((java.lang.Object) 1);
        boolean boolean16 = equation8.equals((java.lang.Object) boolean15);
        int int17 = equation8.a();
        int int18 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 1);
        int int26 = gcdSolutionWrapper21.getGcd();
        int int27 = gcdSolutionWrapper21.getGcd();
        boolean boolean28 = equation8.equals((java.lang.Object) int27);
        boolean boolean29 = equation3.equals((java.lang.Object) equation8);
        java.lang.String str30 = equation8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        int int32 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = gcdSolutionWrapper37.getSolution();
        java.lang.String str39 = gcdSolutionWrapper37.toString();
        gcdSolutionWrapper37.setGcd((-1));
        int int42 = gcdSolutionWrapper37.getGcd();
        boolean boolean43 = equation8.equals((java.lang.Object) gcdSolutionWrapper37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int48 = equation47.c();
        int int49 = equation47.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        solution53.setY((int) (byte) 1);
        boolean boolean58 = solution53.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution60 = gcdSolutionWrapper59.getSolution();
        java.lang.String str61 = gcdSolutionWrapper59.toString();
        gcdSolutionWrapper59.setGcd((int) (byte) 1);
        boolean boolean64 = equation47.equals((java.lang.Object) gcdSolutionWrapper59);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation47);
        int int66 = solution65.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation70);
        int int72 = solution71.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int77 = equation76.c();
        int int78 = equation76.c();
        int int79 = equation76.a();
        boolean boolean80 = solution71.equals((java.lang.Object) equation76);
        int int81 = equation76.c();
        boolean boolean82 = solution65.equals((java.lang.Object) equation76);
        int int83 = equation76.b();
        boolean boolean84 = gcdSolutionWrapper37.equals((java.lang.Object) equation76);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution85 = null;
        gcdSolutionWrapper37.setSolution(solution85);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str30, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str39, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(solution60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str61, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-35) + "'", int66 == (-35));
        org.junit.Assert.assertNotNull(solution71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test5328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5328");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str5 = equation4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution6);
        gcdSolutionWrapper7.setGcd(0);
        java.lang.String str10 = gcdSolutionWrapper7.toString();
        int int11 = gcdSolutionWrapper7.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        int int17 = solution16.getX();
        int int18 = solution16.getX();
        solution16.setX(0);
        gcdSolutionWrapper7.setSolution(solution16);
        int int22 = solution16.getX();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str10, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test5329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5329");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution4);
        gcdSolutionWrapper5.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution11);
        gcdSolutionWrapper12.setGcd(97);
        boolean boolean15 = gcdSolutionWrapper5.equals((java.lang.Object) gcdSolutionWrapper12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        solution20.setY((int) (byte) 10);
        int int23 = solution20.getY();
        boolean boolean24 = gcdSolutionWrapper5.equals((java.lang.Object) solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        int int28 = solution27.getY();
        boolean boolean29 = solution20.equals((java.lang.Object) solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation34);
        int int36 = solution35.getX();
        int int37 = solution35.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution35);
        boolean boolean40 = solution35.equals((java.lang.Object) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution42);
        boolean boolean45 = gcdSolutionWrapper43.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation49);
        solution50.setY((int) (byte) 10);
        int int53 = solution50.getY();
        gcdSolutionWrapper43.setSolution(solution50);
        boolean boolean55 = solution35.equals((java.lang.Object) solution50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) 0, 1);
        int int60 = equation59.b();
        java.lang.Class<?> wildcardClass61 = equation59.getClass();
        boolean boolean62 = solution35.equals((java.lang.Object) wildcardClass61);
        boolean boolean63 = solution27.equals((java.lang.Object) boolean62);
        solution27.setY((-75));
        int int66 = solution27.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution27);
        int int68 = solution27.getX();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
    }

    @Test
    public void test5330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5330");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) (short) 10, (int) (byte) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test5331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5331");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int4 = solution3.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 100, 97);
        gcdSolutionWrapper5.setSolution(solution8);
        java.lang.String str10 = gcdSolutionWrapper5.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=100, y=97]]" + "'", str10, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=100, y=97]]");
    }

    @Test
    public void test5332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5332");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        int int22 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution24);
        gcdSolutionWrapper25.setGcd((int) ' ');
        gcdSolutionWrapper25.setGcd((int) (short) 1);
        java.lang.String str30 = gcdSolutionWrapper25.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int34 = solution33.getY();
        java.lang.String str35 = solution33.toString();
        solution33.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int42 = equation41.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        boolean boolean44 = solution33.equals((java.lang.Object) solution43);
        boolean boolean46 = solution33.equals((java.lang.Object) false);
        gcdSolutionWrapper25.setSolution(solution33);
        gcdSolutionWrapper15.setSolution(solution33);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str30, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Solution[x=97, y=1]" + "'", str35, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test5333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5333");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        boolean boolean8 = solution2.equals((java.lang.Object) (-1.0f));
        java.lang.String str9 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str14 = equation13.toString();
        int int15 = equation13.c();
        boolean boolean16 = solution2.equals((java.lang.Object) equation13);
        int int17 = equation13.c();
        int int18 = equation13.a();
        int int19 = equation13.c();
        java.lang.String str20 = equation13.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=1, y=1]" + "'", str9, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str14, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str20, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test5334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5334");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        solution2.setY(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 100, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        int int15 = solution14.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        solution27.setY((int) (byte) 1);
        boolean boolean32 = solution27.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = gcdSolutionWrapper33.getSolution();
        java.lang.String str35 = gcdSolutionWrapper33.toString();
        gcdSolutionWrapper33.setGcd((int) (byte) 1);
        boolean boolean38 = equation23.equals((java.lang.Object) gcdSolutionWrapper33);
        int int39 = gcdSolutionWrapper33.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = gcdSolutionWrapper33.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper42.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(100, solution43);
        solution43.setX((int) 'a');
        int int47 = solution43.getX();
        gcdSolutionWrapper16.setSolution(solution43);
        boolean boolean49 = solution2.equals((java.lang.Object) solution43);
        solution2.setY(96);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str35, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test5335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5335");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int15 = solution14.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution14);
        boolean boolean17 = gcdSolutionWrapper8.equals((java.lang.Object) solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper8.getSolution();
        solution18.setY((int) 'a');
        int int21 = solution18.getX();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test5336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5336");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int5 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int12 = solution11.getY();
        java.lang.String str13 = solution11.toString();
        solution11.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int20 = equation19.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = solution11.equals((java.lang.Object) solution21);
        int int23 = solution21.getY();
        int int24 = solution21.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '#', solution21);
        gcdSolutionWrapper25.setGcd(97);
        java.lang.Class<?> wildcardClass28 = gcdSolutionWrapper25.getClass();
        boolean boolean29 = gcdSolutionWrapper7.equals((java.lang.Object) wildcardClass28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = gcdSolutionWrapper7.getSolution();
        int int31 = gcdSolutionWrapper7.getGcd();
        int int32 = gcdSolutionWrapper7.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=97, y=1]" + "'", str13, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-35) + "'", int23 == (-35));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-35) + "'", int24 == (-35));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test5337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5337");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        boolean boolean11 = gcdSolutionWrapper9.equals((java.lang.Object) 1);
        boolean boolean12 = equation4.equals((java.lang.Object) boolean11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation16);
        solution17.setY((int) (byte) 10);
        boolean boolean20 = equation4.equals((java.lang.Object) solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        solution28.setY((int) (byte) 1);
        boolean boolean33 = solution28.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = gcdSolutionWrapper34.getSolution();
        java.lang.String str36 = gcdSolutionWrapper34.toString();
        gcdSolutionWrapper34.setGcd((int) (byte) 1);
        boolean boolean39 = equation24.equals((java.lang.Object) gcdSolutionWrapper34);
        int int40 = gcdSolutionWrapper34.getGcd();
        boolean boolean41 = solution17.equals((java.lang.Object) int40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(100, solution17);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str36, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test5338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5338");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', 52, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean8 = equation3.equals((java.lang.Object) (short) 10);
        int int9 = equation3.b();
        int int10 = equation3.a();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test5339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5339");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution5);
        org.junit.Assert.assertNotNull(solution5);
    }

    @Test
    public void test5340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5340");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        int int4 = equation3.c();
        int int5 = equation3.a();
        int int6 = equation3.a();
        int int7 = equation3.a();
        int int8 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-75), (-75), 0);
        boolean boolean13 = equation3.equals((java.lang.Object) equation12);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test5341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5341");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        java.lang.String str6 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution3);
        java.lang.String str8 = gcdSolutionWrapper7.toString();
        java.lang.Class<?> wildcardClass9 = gcdSolutionWrapper7.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=97, y=1]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test5342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5342");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 32, 0);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int9 = equation8.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int14 = equation13.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution17);
        boolean boolean20 = gcdSolutionWrapper18.equals((java.lang.Object) 1);
        boolean boolean21 = equation13.equals((java.lang.Object) boolean20);
        int int22 = equation13.a();
        int int23 = equation13.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        gcdSolutionWrapper26.setGcd((int) ' ');
        gcdSolutionWrapper26.setGcd((int) (short) 1);
        int int31 = gcdSolutionWrapper26.getGcd();
        int int32 = gcdSolutionWrapper26.getGcd();
        boolean boolean33 = equation13.equals((java.lang.Object) int32);
        boolean boolean34 = equation8.equals((java.lang.Object) equation13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        boolean boolean37 = equation3.equals((java.lang.Object) equation13);
        java.lang.Class<?> wildcardClass38 = equation3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-1, b=32, c=0]" + "'", str4, "Equation[a=-1, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test5343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5343");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (short) 100);
        int int3 = solution2.getX();
        solution2.setY(97);
        java.lang.String str6 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int11 = solution10.getX();
        solution10.setX(100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        solution20.setY((int) (byte) 1);
        gcdSolutionWrapper17.setSolution(solution20);
        int int25 = gcdSolutionWrapper17.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        boolean boolean34 = solution28.equals((java.lang.Object) (-1.0f));
        java.lang.String str35 = solution28.toString();
        java.lang.String str36 = solution28.toString();
        gcdSolutionWrapper17.setSolution(solution28);
        solution28.setX((int) '4');
        java.lang.String str40 = solution28.toString();
        gcdSolutionWrapper14.setSolution(solution28);
        java.lang.String str42 = gcdSolutionWrapper14.toString();
        boolean boolean43 = solution2.equals((java.lang.Object) gcdSolutionWrapper14);
        java.lang.String str44 = gcdSolutionWrapper14.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=100, y=97]" + "'", str6, "Solution[x=100, y=97]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Solution[x=1, y=1]" + "'", str35, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Solution[x=1, y=1]" + "'", str36, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=52, y=1]" + "'", str40, "Solution[x=52, y=1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=52, y=1]]" + "'", str42, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=52, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=52, y=1]]" + "'", str44, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=52, y=1]]");
    }

    @Test
    public void test5344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5344");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        int int19 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper13.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper13.getSolution();
        int int25 = gcdSolutionWrapper13.getGcd();
        java.lang.String str26 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper13.getSolution();
        java.lang.String str28 = gcdSolutionWrapper13.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=-1, y=52]]" + "'", str26, "GcdSolutionWrapper[gcd=1, solution=Solution[x=-1, y=52]]");
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=-1, y=52]]" + "'", str28, "GcdSolutionWrapper[gcd=1, solution=Solution[x=-1, y=52]]");
    }

    @Test
    public void test5345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5345");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (int) (byte) 0);
    }

    @Test
    public void test5346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5346");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int5 = equation4.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int10 = equation9.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        boolean boolean16 = gcdSolutionWrapper14.equals((java.lang.Object) 1);
        boolean boolean17 = equation9.equals((java.lang.Object) boolean16);
        int int18 = equation9.a();
        int int19 = equation9.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution21);
        gcdSolutionWrapper22.setGcd((int) ' ');
        gcdSolutionWrapper22.setGcd((int) (short) 1);
        int int27 = gcdSolutionWrapper22.getGcd();
        int int28 = gcdSolutionWrapper22.getGcd();
        boolean boolean29 = equation9.equals((java.lang.Object) int28);
        boolean boolean30 = equation4.equals((java.lang.Object) equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation37);
        int int39 = solution38.getX();
        int int40 = solution38.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution38);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation46);
        solution47.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation54);
        solution55.setY((int) (byte) 10);
        boolean boolean58 = solution47.equals((java.lang.Object) (byte) 10);
        boolean boolean60 = solution47.equals((java.lang.Object) (-1));
        solution47.setY((int) (byte) 0);
        gcdSolutionWrapper41.setSolution(solution47);
        solution47.setY((int) ' ');
        int int66 = solution47.getX();
        boolean boolean67 = solution32.equals((java.lang.Object) solution47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper72 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution71);
        java.lang.String str73 = gcdSolutionWrapper72.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation77 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str78 = equation77.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution79 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation77);
        boolean boolean80 = gcdSolutionWrapper72.equals((java.lang.Object) solution79);
        boolean boolean81 = solution32.equals((java.lang.Object) solution79);
        solution32.setY((int) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper84 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(375, solution32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertNotNull(solution55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str73, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str78, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test5347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5347");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, 1, 100);
        int int4 = equation3.b();
        int int5 = equation3.a();
        int int6 = equation3.c();
        int int7 = equation3.c();
        java.lang.String str8 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=1, b=1, c=100]" + "'", str8, "Equation[a=1, b=1, c=100]");
    }

    @Test
    public void test5348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5348");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution5);
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test5349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5349");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        int int21 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = null;
        gcdSolutionWrapper15.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(125, (int) ' ');
        boolean boolean27 = gcdSolutionWrapper15.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution29);
        gcdSolutionWrapper30.setGcd((int) ' ');
        gcdSolutionWrapper30.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        java.lang.String str39 = solution37.toString();
        solution37.setX((int) (short) 1);
        boolean boolean43 = solution37.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper30.setSolution(solution37);
        int int45 = gcdSolutionWrapper30.getGcd();
        boolean boolean46 = gcdSolutionWrapper15.equals((java.lang.Object) int45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution48);
        gcdSolutionWrapper49.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int55 = solution54.getY();
        java.lang.String str56 = solution54.toString();
        gcdSolutionWrapper49.setSolution(solution54);
        int int58 = gcdSolutionWrapper49.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int62 = solution61.getY();
        gcdSolutionWrapper49.setSolution(solution61);
        java.lang.String str64 = solution61.toString();
        gcdSolutionWrapper15.setSolution(solution61);
        solution61.setX(0);
        int int68 = solution61.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Solution[x=97, y=1]" + "'", str39, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Solution[x=97, y=1]" + "'", str56, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 32 + "'", int58 == 32);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test5350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5350");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = solution4.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int10 = equation9.c();
        int int11 = equation9.c();
        int int12 = equation9.a();
        boolean boolean13 = solution4.equals((java.lang.Object) equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution16);
        gcdSolutionWrapper17.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper17.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int24 = solution23.getY();
        solution23.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean30 = solution23.equals((java.lang.Object) solution29);
        gcdSolutionWrapper17.setSolution(solution23);
        boolean boolean32 = equation9.equals((java.lang.Object) solution23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution37);
        java.lang.String str39 = gcdSolutionWrapper38.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = gcdSolutionWrapper38.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution40);
        boolean boolean42 = equation9.equals((java.lang.Object) gcdSolutionWrapper41);
        int int43 = gcdSolutionWrapper41.getGcd();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertNull(solution20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str39, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test5351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5351");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        int int8 = gcdSolutionWrapper2.getGcd();
        gcdSolutionWrapper2.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        solution15.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean22 = solution15.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper2.setSolution(solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        java.lang.String str29 = solution27.toString();
        solution27.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution27);
        java.lang.String str33 = solution27.toString();
        gcdSolutionWrapper2.setSolution(solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (int) (byte) 100, 1);
        int int39 = equation38.b();
        boolean boolean40 = gcdSolutionWrapper2.equals((java.lang.Object) int39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int44 = solution43.getY();
        java.lang.String str45 = solution43.toString();
        solution43.setX((int) (short) 1);
        solution43.setX((int) (byte) 10);
        java.lang.String str50 = solution43.toString();
        solution43.setY((int) 'a');
        solution43.setY(35);
        gcdSolutionWrapper2.setSolution(solution43);
        gcdSolutionWrapper2.setGcd((int) (byte) -1);
        java.lang.String str58 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 100, (int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution62);
        gcdSolutionWrapper2.setSolution(solution62);
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=97, y=1]" + "'", str29, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Solution[x=1, y=1]" + "'", str33, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Solution[x=97, y=1]" + "'", str45, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Solution[x=10, y=1]" + "'", str50, "Solution[x=10, y=1]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=10, y=35]]" + "'", str58, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=10, y=35]]");
    }

    @Test
    public void test5352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5352");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution5.setX((-97));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-35) + "'", int4 == (-35));
        org.junit.Assert.assertNotNull(solution5);
    }

    @Test
    public void test5353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5353");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, 32, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.Class<?> wildcardClass6 = equation3.getClass();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test5354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5354");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-97), 125, (int) (short) 10);
        java.lang.String str4 = equation3.toString();
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.b();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-97, b=125, c=10]" + "'", str4, "Equation[a=-97, b=125, c=10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=-97, b=125, c=10]" + "'", str5, "Equation[a=-97, b=125, c=10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 125 + "'", int6 == 125);
    }

    @Test
    public void test5355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5355");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', (int) (short) 10, (-1));
        int int10 = equation9.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        int int12 = equation9.a();
        boolean boolean13 = equation3.equals((java.lang.Object) int12);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-35) + "'", int4 == (-35));
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test5356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5356");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        gcdSolutionWrapper8.setGcd((int) (byte) 1);
        gcdSolutionWrapper8.setGcd((-75));
        java.lang.Class<?> wildcardClass13 = gcdSolutionWrapper8.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test5357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5357");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        int int22 = gcdSolutionWrapper15.getGcd();
        gcdSolutionWrapper15.setGcd((-75));
        gcdSolutionWrapper15.setGcd((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test5358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5358");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(1, (int) (short) 1, (int) ' ');
        int int4 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test5359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5359");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        int int22 = gcdSolutionWrapper16.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper16.getSolution();
        int int24 = solution23.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution23);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
    }

    @Test
    public void test5360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5360");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', 125);
    }

    @Test
    public void test5361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5361");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int5 = solution4.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, 10, (-97));
        boolean boolean12 = gcdSolutionWrapper7.equals((java.lang.Object) (-97));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test5362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5362");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (-1), (int) '#');
    }

    @Test
    public void test5363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5363");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int7 = equation6.c();
        int int8 = equation6.b();
        int int9 = equation6.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation6);
        java.lang.String str11 = solution10.toString();
        int int12 = solution10.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(375, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=0, y=-35]" + "'", str11, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-35) + "'", int12 == (-35));
    }

    @Test
    public void test5364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5364");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str8 = solution7.toString();
        java.lang.String str9 = solution7.toString();
        solution7.setY(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        java.lang.String str17 = solution16.toString();
        int int18 = solution16.getY();
        solution16.setY(0);
        boolean boolean21 = solution7.equals((java.lang.Object) solution16);
        java.lang.String str22 = solution7.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=0, y=-35]" + "'", str8, "Solution[x=0, y=-35]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=0, y=-35]" + "'", str9, "Solution[x=0, y=-35]");
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=0, y=0]" + "'", str17, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=0, y=97]" + "'", str22, "Solution[x=0, y=97]");
    }

    @Test
    public void test5365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5365");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) solution25);
        boolean boolean28 = gcdSolutionWrapper13.equals((java.lang.Object) (short) 0);
        int int29 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution31);
        gcdSolutionWrapper32.setGcd((int) ' ');
        gcdSolutionWrapper32.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int40 = solution39.getY();
        java.lang.String str41 = solution39.toString();
        solution39.setX((int) (short) 1);
        boolean boolean45 = solution39.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper32.setSolution(solution39);
        boolean boolean47 = gcdSolutionWrapper13.equals((java.lang.Object) gcdSolutionWrapper32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int52 = equation51.c();
        int int53 = equation51.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation51);
        gcdSolutionWrapper32.setSolution(solution54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = gcdSolutionWrapper32.getSolution();
        int int57 = solution56.getX();
        solution56.setY(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation64);
        int int66 = solution65.getX();
        int int67 = solution65.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution65);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution74 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation73);
        solution74.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper77 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution74);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation81 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution82 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation81);
        solution82.setY((int) (byte) 10);
        boolean boolean85 = solution74.equals((java.lang.Object) (byte) 10);
        boolean boolean87 = solution74.equals((java.lang.Object) (-1));
        solution74.setY((int) (byte) 0);
        gcdSolutionWrapper68.setSolution(solution74);
        solution74.setY((int) ' ');
        java.lang.String str93 = solution74.toString();
        solution74.setY((int) '#');
        int int96 = solution74.getX();
        java.lang.String str97 = solution74.toString();
        boolean boolean98 = solution56.equals((java.lang.Object) solution74);
        int int99 = solution56.getY();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Solution[x=97, y=1]" + "'", str41, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(solution54);
        org.junit.Assert.assertNotNull(solution56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(solution74);
        org.junit.Assert.assertNotNull(solution82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Solution[x=0, y=32]" + "'", str93, "Solution[x=0, y=32]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Solution[x=0, y=35]" + "'", str97, "Solution[x=0, y=35]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 52 + "'", int99 == 52);
    }

    @Test
    public void test5366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5366");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int12 = solution11.getY();
        solution11.setY((int) (byte) 1);
        gcdSolutionWrapper8.setSolution(solution11);
        int int16 = gcdSolutionWrapper8.getGcd();
        boolean boolean17 = solution5.equals((java.lang.Object) gcdSolutionWrapper8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper8.getSolution();
        solution19.setY((int) (byte) -1);
        int int22 = solution19.getX();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
    }

    @Test
    public void test5367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5367");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper4.getSolution();
        java.lang.String str9 = gcdSolutionWrapper4.toString();
        gcdSolutionWrapper4.setGcd((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-35), (int) '4');
        java.lang.String str15 = solution14.toString();
        gcdSolutionWrapper4.setSolution(solution14);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str9, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=-35, y=52]" + "'", str15, "Solution[x=-35, y=52]");
    }

    @Test
    public void test5368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5368");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int11 = equation10.c();
        int int12 = equation10.c();
        int int13 = equation10.a();
        boolean boolean14 = solution5.equals((java.lang.Object) equation10);
        int int15 = equation10.a();
        int int16 = equation10.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution17);
        int int19 = solution17.getX();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test5369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5369");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper26);
        int int35 = gcdSolutionWrapper26.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) (short) 10, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (short) 10);
        boolean boolean43 = equation39.equals((java.lang.Object) (short) 10);
        int int44 = equation39.a();
        int int45 = equation39.a();
        int int46 = equation39.a();
        boolean boolean47 = gcdSolutionWrapper26.equals((java.lang.Object) equation39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        solution51.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean58 = solution51.equals((java.lang.Object) solution57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution51);
        int int60 = solution51.getY();
        gcdSolutionWrapper26.setSolution(solution51);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test5370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5370");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int15 = solution14.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-35) + "'", int15 == (-35));
    }

    @Test
    public void test5371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5371");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 100, (int) (byte) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        java.lang.String str18 = gcdSolutionWrapper13.toString();
        java.lang.String str19 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int24 = equation23.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) equation23);
        java.lang.String str27 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(35, 35);
        gcdSolutionWrapper13.setSolution(solution30);
        boolean boolean32 = equation3.equals((java.lang.Object) solution30);
        int int33 = equation3.c();
        int int34 = equation3.c();
        java.lang.String str35 = equation3.toString();
        java.lang.String str36 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str19, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str27, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Equation[a=-35, b=100, c=100]" + "'", str35, "Equation[a=-35, b=100, c=100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Equation[a=-35, b=100, c=100]" + "'", str36, "Equation[a=-35, b=100, c=100]");
    }

    @Test
    public void test5372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5372");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution3.setX((int) (byte) 10);
        int int6 = solution3.getX();
        solution3.setX(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        gcdSolutionWrapper9.setGcd((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(solution10);
    }

    @Test
    public void test5373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5373");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        boolean boolean15 = gcdSolutionWrapper13.equals((java.lang.Object) 1);
        boolean boolean16 = equation8.equals((java.lang.Object) boolean15);
        int int17 = equation8.a();
        int int18 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 1);
        int int26 = gcdSolutionWrapper21.getGcd();
        int int27 = gcdSolutionWrapper21.getGcd();
        boolean boolean28 = equation8.equals((java.lang.Object) int27);
        boolean boolean29 = equation3.equals((java.lang.Object) equation8);
        int int30 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int32 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
    }

    @Test
    public void test5374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5374");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-97), 97);
    }

    @Test
    public void test5375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5375");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) (byte) 100, 32);
        int int4 = equation3.b();
        int int5 = equation3.a();
        int int6 = equation3.c();
        int int7 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
    }

    @Test
    public void test5376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5376");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int9 = equation8.c();
        boolean boolean11 = equation8.equals((java.lang.Object) false);
        int int12 = equation8.a();
        int int13 = equation8.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution17);
        boolean boolean19 = equation8.equals((java.lang.Object) gcdSolutionWrapper18);
        java.lang.String str20 = equation8.toString();
        boolean boolean21 = equation3.equals((java.lang.Object) equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int23 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str20, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test5377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5377");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', (-35), 35);
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=32, b=-35, c=35]" + "'", str4, "Equation[a=32, b=-35, c=35]");
    }

    @Test
    public void test5378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5378");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        boolean boolean8 = equation3.equals((java.lang.Object) 0L);
        int int9 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(solution10);
    }

    @Test
    public void test5379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5379");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (byte) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = solution5.getY();
        solution5.setY(0);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test5380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5380");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (int) (short) 100, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.a();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    }

    @Test
    public void test5381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5381");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        gcdSolutionWrapper13.setGcd((int) (short) 0);
        int int21 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        java.lang.String str28 = solution26.toString();
        solution26.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution26);
        gcdSolutionWrapper13.setSolution(solution26);
        gcdSolutionWrapper13.setGcd((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper13.getSolution();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=97, y=1]" + "'", str28, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution36);
    }

    @Test
    public void test5382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5382");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        int int16 = gcdSolutionWrapper9.getGcd();
        java.lang.String str17 = gcdSolutionWrapper9.toString();
        int int18 = gcdSolutionWrapper9.getGcd();
        int int19 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution23);
        boolean boolean26 = gcdSolutionWrapper24.equals((java.lang.Object) 1);
        java.lang.String str27 = gcdSolutionWrapper24.toString();
        gcdSolutionWrapper24.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper24.setSolution(solution32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int43 = solution42.getY();
        solution42.setY((int) (byte) 1);
        boolean boolean47 = solution42.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = gcdSolutionWrapper48.getSolution();
        java.lang.String str50 = gcdSolutionWrapper48.toString();
        gcdSolutionWrapper48.setGcd((int) (byte) 1);
        boolean boolean53 = equation38.equals((java.lang.Object) gcdSolutionWrapper48);
        int int54 = gcdSolutionWrapper48.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper48.setSolution(solution57);
        gcdSolutionWrapper34.setSolution(solution57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper60 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-75), solution57);
        gcdSolutionWrapper9.setSolution(solution57);
        int int62 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = gcdSolutionWrapper9.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str27, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str50, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(solution63);
    }

    @Test
    public void test5383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5383");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(10, (int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution7);
        int int9 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper8.getSolution();
        boolean boolean13 = equation3.equals((java.lang.Object) gcdSolutionWrapper8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, 52);
        boolean boolean17 = gcdSolutionWrapper8.equals((java.lang.Object) (short) 0);
        int int18 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        int int25 = solution24.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int30 = equation29.c();
        int int31 = equation29.c();
        int int32 = equation29.a();
        boolean boolean33 = solution24.equals((java.lang.Object) equation29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper35.getSolution();
        boolean boolean37 = gcdSolutionWrapper8.equals((java.lang.Object) solution36);
        java.lang.String str38 = gcdSolutionWrapper8.toString();
        gcdSolutionWrapper8.setGcd(100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=-1, y=10]]" + "'", str38, "GcdSolutionWrapper[gcd=1, solution=Solution[x=-1, y=10]]");
    }

    @Test
    public void test5384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5384");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        int int21 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int23 = equation3.a();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
    }

    @Test
    public void test5385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5385");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, (int) (short) 100, (int) 'a');
        int int4 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test5386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5386");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int20 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = gcdSolutionWrapper9.equals((java.lang.Object) equation19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper9.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper9.getSolution();
        gcdSolutionWrapper9.setGcd(100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertNotNull(solution24);
    }

    @Test
    public void test5387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5387");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        gcdSolutionWrapper13.setGcd((int) (short) 0);
        int int21 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        java.lang.String str28 = solution26.toString();
        solution26.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution26);
        gcdSolutionWrapper13.setSolution(solution26);
        gcdSolutionWrapper13.setGcd((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution37);
        gcdSolutionWrapper38.setGcd((int) ' ');
        gcdSolutionWrapper38.setGcd((int) (short) 1);
        int int43 = gcdSolutionWrapper38.getGcd();
        int int44 = gcdSolutionWrapper38.getGcd();
        java.lang.String str45 = gcdSolutionWrapper38.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper38.getSolution();
        int int47 = gcdSolutionWrapper38.getGcd();
        boolean boolean48 = gcdSolutionWrapper13.equals((java.lang.Object) gcdSolutionWrapper38);
        gcdSolutionWrapper38.setGcd((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        java.lang.String str55 = solution53.toString();
        solution53.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int62 = equation61.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation61);
        boolean boolean64 = solution53.equals((java.lang.Object) solution63);
        int int65 = solution63.getY();
        java.lang.String str66 = solution63.toString();
        gcdSolutionWrapper38.setSolution(solution63);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=97, y=1]" + "'", str28, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str45, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertNull(solution46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Solution[x=97, y=1]" + "'", str55, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(solution63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-35) + "'", int65 == (-35));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Solution[x=0, y=-35]" + "'", str66, "Solution[x=0, y=-35]");
    }

    @Test
    public void test5388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5388");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        java.lang.String str7 = solution6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution6);
        solution6.setX((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, 1, 100);
        int int16 = equation15.b();
        int int17 = equation15.a();
        java.lang.String str18 = equation15.toString();
        boolean boolean19 = gcdSolutionWrapper11.equals((java.lang.Object) equation15);
        java.lang.String str20 = gcdSolutionWrapper11.toString();
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=0, y=0]" + "'", str7, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Equation[a=1, b=1, c=100]" + "'", str18, "Equation[a=1, b=1, c=100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=35, solution=Solution[x=32, y=0]]" + "'", str20, "GcdSolutionWrapper[gcd=35, solution=Solution[x=32, y=0]]");
    }

    @Test
    public void test5389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5389");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        int int8 = gcdSolutionWrapper2.getGcd();
        gcdSolutionWrapper2.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        solution15.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean22 = solution15.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper2.setSolution(solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        java.lang.String str29 = solution27.toString();
        solution27.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution27);
        java.lang.String str33 = solution27.toString();
        gcdSolutionWrapper2.setSolution(solution27);
        int int35 = gcdSolutionWrapper2.getGcd();
        java.lang.String str36 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int47 = solution46.getY();
        solution46.setY((int) (byte) 1);
        boolean boolean51 = solution46.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int56 = solution55.getY();
        java.lang.String str57 = solution55.toString();
        boolean boolean59 = solution55.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper52.setSolution(solution55);
        int int61 = solution55.getX();
        boolean boolean62 = equation40.equals((java.lang.Object) solution55);
        int int63 = equation40.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution66 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(35, (int) '#');
        int int67 = solution66.getX();
        boolean boolean68 = equation40.equals((java.lang.Object) solution66);
        java.lang.String str69 = equation40.toString();
        boolean boolean70 = gcdSolutionWrapper2.equals((java.lang.Object) equation40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = gcdSolutionWrapper2.getSolution();
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=97, y=1]" + "'", str29, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Solution[x=1, y=1]" + "'", str33, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=1, y=1]]" + "'", str36, "GcdSolutionWrapper[gcd=0, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Solution[x=97, y=1]" + "'", str57, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 97 + "'", int61 == 97);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str69, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(solution71);
    }

    @Test
    public void test5390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5390");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-97), 52, 125);
    }

    @Test
    public void test5391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5391");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 10, (-1), (int) (byte) -1);
    }

    @Test
    public void test5392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5392");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int4 = solution3.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution3);
        java.lang.String str6 = gcdSolutionWrapper5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        boolean boolean19 = solution14.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper20.getSolution();
        java.lang.String str22 = gcdSolutionWrapper20.toString();
        gcdSolutionWrapper20.setGcd((int) (byte) 1);
        boolean boolean25 = equation10.equals((java.lang.Object) gcdSolutionWrapper20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution27);
        gcdSolutionWrapper28.setGcd((int) ' ');
        gcdSolutionWrapper28.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        solution35.setX((int) (short) 1);
        boolean boolean41 = solution35.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper28.setSolution(solution35);
        gcdSolutionWrapper20.setSolution(solution35);
        int int44 = gcdSolutionWrapper20.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution46);
        boolean boolean49 = gcdSolutionWrapper47.equals((java.lang.Object) 1);
        java.lang.String str50 = gcdSolutionWrapper47.toString();
        gcdSolutionWrapper47.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper47.setSolution(solution55);
        int int57 = solution55.getX();
        gcdSolutionWrapper20.setSolution(solution55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = gcdSolutionWrapper20.getSolution();
        solution59.setX((int) '4');
        gcdSolutionWrapper5.setSolution(solution59);
        java.lang.Class<?> wildcardClass63 = gcdSolutionWrapper5.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=1, y=52]]" + "'", str6, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=1, y=52]]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str22, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str50, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(solution59);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test5393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5393");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) (short) 0, 97);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        java.lang.String str11 = solution9.toString();
        solution9.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution9);
        int int15 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper14.getSolution();
        java.lang.String str17 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int22 = solution21.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper23.getSolution();
        solution24.setX(52);
        gcdSolutionWrapper14.setSolution(solution24);
        boolean boolean28 = equation3.equals((java.lang.Object) gcdSolutionWrapper14);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=35, b=0, c=97]" + "'", str4, "Equation[a=35, b=0, c=97]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-35) + "'", int15 == (-35));
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test5394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5394");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution5.setY((int) (byte) 10);
        solution5.setY((int) (short) 100);
        int int10 = solution5.getX();
        java.lang.String str11 = solution5.toString();
        solution5.setY((int) (short) 1);
        java.lang.Class<?> wildcardClass14 = solution5.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=0, y=100]" + "'", str11, "Solution[x=0, y=100]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test5395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5395");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, 35, (int) (byte) 100);
        int int4 = equation3.a();
        int int5 = equation3.c();
        java.lang.String str6 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=100, b=35, c=100]" + "'", str6, "Equation[a=100, b=35, c=100]");
        org.junit.Assert.assertNotNull(solution7);
    }

    @Test
    public void test5396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5396");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 100, (int) (short) -1);
    }

    @Test
    public void test5397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5397");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int24 = equation23.c();
        int int25 = equation23.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        boolean boolean27 = gcdSolutionWrapper14.equals((java.lang.Object) solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        int int33 = equation31.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        solution37.setY((int) (byte) 1);
        boolean boolean42 = solution37.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper43.getSolution();
        java.lang.String str45 = gcdSolutionWrapper43.toString();
        gcdSolutionWrapper43.setGcd((int) (byte) 1);
        boolean boolean48 = equation31.equals((java.lang.Object) gcdSolutionWrapper43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        int int50 = solution49.getY();
        boolean boolean51 = gcdSolutionWrapper14.equals((java.lang.Object) int50);
        java.lang.String str52 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = gcdSolutionWrapper14.getSolution();
        gcdSolutionWrapper14.setGcd((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = gcdSolutionWrapper14.getSolution();
        solution56.setX((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution56);
        int int60 = gcdSolutionWrapper59.getGcd();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str45, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-35) + "'", int50 == (-35));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str52, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution53);
        org.junit.Assert.assertNotNull(solution56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
    }

    @Test
    public void test5398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5398");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution9);
        gcdSolutionWrapper10.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution16);
        gcdSolutionWrapper17.setGcd(97);
        boolean boolean20 = gcdSolutionWrapper10.equals((java.lang.Object) gcdSolutionWrapper17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 52);
        solution23.setY((-75));
        gcdSolutionWrapper17.setSolution(solution23);
        boolean boolean27 = equation3.equals((java.lang.Object) gcdSolutionWrapper17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, 10, (int) (byte) 1);
        int int32 = equation31.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int37 = equation36.c();
        int int38 = equation36.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation36);
        solution39.setY(0);
        java.lang.String str42 = solution39.toString();
        boolean boolean43 = equation31.equals((java.lang.Object) solution39);
        int int44 = equation31.c();
        boolean boolean45 = gcdSolutionWrapper17.equals((java.lang.Object) int44);
        gcdSolutionWrapper17.setGcd((int) (short) -1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str4, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=0, y=0]" + "'", str42, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test5399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5399");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.a();
        int int6 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str8 = equation3.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str8, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test5400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5400");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        boolean boolean17 = solution13.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper10.setSolution(solution13);
        int int19 = solution13.getX();
        int int20 = solution13.getY();
        solution13.setY((int) (short) 10);
        solution13.setY(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        solution28.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean35 = solution28.equals((java.lang.Object) solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution28);
        boolean boolean37 = solution13.equals((java.lang.Object) gcdSolutionWrapper36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str44 = equation43.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution45);
        gcdSolutionWrapper46.setGcd(0);
        java.lang.String str49 = gcdSolutionWrapper46.toString();
        java.lang.String str50 = gcdSolutionWrapper46.toString();
        boolean boolean51 = solution13.equals((java.lang.Object) gcdSolutionWrapper46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int57 = solution56.getY();
        java.lang.String str58 = solution56.toString();
        solution56.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution56);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution56);
        gcdSolutionWrapper62.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = gcdSolutionWrapper62.getSolution();
        solution65.setX((int) (short) 0);
        int int68 = solution65.getY();
        solution65.setY((int) 'a');
        boolean boolean71 = solution13.equals((java.lang.Object) solution65);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str44, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str49, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str50, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Solution[x=97, y=1]" + "'", str58, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test5401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5401");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        java.lang.String str8 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        boolean boolean19 = solution14.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int24 = solution23.getY();
        java.lang.String str25 = solution23.toString();
        boolean boolean27 = solution23.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper20.setSolution(solution23);
        int int29 = solution23.getX();
        java.lang.String str30 = solution23.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution32);
        gcdSolutionWrapper33.setGcd((int) ' ');
        gcdSolutionWrapper33.setGcd((int) (short) 1);
        boolean boolean38 = solution23.equals((java.lang.Object) gcdSolutionWrapper33);
        int int39 = gcdSolutionWrapper33.getGcd();
        gcdSolutionWrapper33.setGcd((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int46 = equation45.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation45);
        boolean boolean48 = gcdSolutionWrapper33.equals((java.lang.Object) equation45);
        boolean boolean49 = gcdSolutionWrapper9.equals((java.lang.Object) gcdSolutionWrapper33);
        gcdSolutionWrapper33.setGcd((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = gcdSolutionWrapper33.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=1, y=1]" + "'", str8, "Solution[x=1, y=1]");
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=97, y=1]" + "'", str25, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(solution52);
    }

    @Test
    public void test5402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5402");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        java.lang.String str16 = solution14.toString();
        solution14.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean23 = solution14.equals((java.lang.Object) equation22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        boolean boolean28 = solution14.equals((java.lang.Object) (byte) 1);
        int int29 = solution14.getY();
        solution14.setX((int) (short) -1);
        boolean boolean32 = gcdSolutionWrapper8.equals((java.lang.Object) solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution.INFINITE_SOLUTIONS;
        solution33.setY((int) (short) 100);
        boolean boolean36 = gcdSolutionWrapper8.equals((java.lang.Object) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        boolean boolean40 = gcdSolutionWrapper8.equals((java.lang.Object) solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = gcdSolutionWrapper8.getSolution();
        java.lang.Class<?> wildcardClass42 = gcdSolutionWrapper8.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test5403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5403");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        java.lang.String str7 = gcdSolutionWrapper2.toString();
        int int8 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper2.getSolution();
        gcdSolutionWrapper2.setGcd((int) '#');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str7, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(solution9);
    }

    @Test
    public void test5404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5404");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.a();
        int int6 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int8 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.Class<?> wildcardClass10 = solution9.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test5405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5405");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        boolean boolean11 = gcdSolutionWrapper9.equals((java.lang.Object) 1);
        boolean boolean12 = equation4.equals((java.lang.Object) boolean11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation16);
        solution17.setY((int) (byte) 10);
        boolean boolean20 = equation4.equals((java.lang.Object) solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '#', solution21);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
    }

    @Test
    public void test5406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5406");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean11 = solution2.equals((java.lang.Object) equation10);
        int int12 = equation10.a();
        java.lang.String str13 = equation10.toString();
        java.lang.String str14 = equation10.toString();
        int int15 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', 0, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        int int21 = equation19.b();
        boolean boolean22 = equation10.equals((java.lang.Object) int21);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: null");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str13, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str14, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test5407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5407");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        gcdSolutionWrapper8.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        gcdSolutionWrapper8.setSolution(solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper8.getSolution();
        java.lang.String str18 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        int int26 = solution25.getX();
        int int27 = solution25.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution25);
        gcdSolutionWrapper28.setGcd((int) (short) 0);
        gcdSolutionWrapper28.setGcd((int) '4');
        int int33 = gcdSolutionWrapper28.getGcd();
        gcdSolutionWrapper28.setGcd((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper28.getSolution();
        boolean boolean37 = solution19.equals((java.lang.Object) gcdSolutionWrapper28);
        boolean boolean38 = gcdSolutionWrapper4.equals((java.lang.Object) boolean37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution45);
        java.lang.String str47 = gcdSolutionWrapper46.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = gcdSolutionWrapper46.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = gcdSolutionWrapper46.getSolution();
        java.lang.String str50 = gcdSolutionWrapper46.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int55 = equation54.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int60 = equation59.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation59);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution63);
        boolean boolean66 = gcdSolutionWrapper64.equals((java.lang.Object) 1);
        boolean boolean67 = equation59.equals((java.lang.Object) boolean66);
        int int68 = equation59.a();
        int int69 = equation59.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper72 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution71);
        gcdSolutionWrapper72.setGcd((int) ' ');
        gcdSolutionWrapper72.setGcd((int) (short) 1);
        int int77 = gcdSolutionWrapper72.getGcd();
        int int78 = gcdSolutionWrapper72.getGcd();
        boolean boolean79 = equation59.equals((java.lang.Object) int78);
        boolean boolean80 = equation54.equals((java.lang.Object) equation59);
        java.lang.String str81 = equation59.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution82 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation59);
        gcdSolutionWrapper46.setSolution(solution82);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution84 = gcdSolutionWrapper46.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper85 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution84);
        gcdSolutionWrapper4.setSolution(solution84);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str47, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str50, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(solution61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str81, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution82);
        org.junit.Assert.assertNotNull(solution84);
    }

    @Test
    public void test5408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5408");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        boolean boolean12 = gcdSolutionWrapper2.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper2.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper2.getSolution();
        java.lang.String str16 = solution15.toString();
        solution15.setY((int) (byte) -1);
        solution15.setY((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
    }

    @Test
    public void test5409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5409");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        gcdSolutionWrapper3.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper3.getSolution();
        int int9 = gcdSolutionWrapper3.getGcd();
        gcdSolutionWrapper3.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        solution16.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean23 = solution16.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper3.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution28);
        java.lang.String str34 = solution28.toString();
        gcdSolutionWrapper3.setSolution(solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        solution40.setY((int) (byte) 1);
        boolean boolean45 = solution40.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int50 = solution49.getY();
        java.lang.String str51 = solution49.toString();
        boolean boolean53 = solution49.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper46.setSolution(solution49);
        solution49.setX(1);
        boolean boolean57 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str62 = equation61.toString();
        java.lang.Object obj63 = null;
        boolean boolean64 = equation61.equals(obj63);
        int int65 = equation61.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        int int70 = equation69.b();
        java.lang.String str71 = equation69.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution74 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        int int75 = solution74.getX();
        boolean boolean76 = equation69.equals((java.lang.Object) solution74);
        boolean boolean77 = equation61.equals((java.lang.Object) boolean76);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution78 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation61);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution83 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int84 = solution83.getX();
        java.lang.String str85 = solution83.toString();
        solution83.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper88 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution83);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper89 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution83);
        boolean boolean90 = solution78.equals((java.lang.Object) solution83);
        boolean boolean91 = gcdSolutionWrapper36.equals((java.lang.Object) solution83);
        org.junit.Assert.assertNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=1, y=1]" + "'", str34, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Solution[x=97, y=1]" + "'", str51, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str62, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-35) + "'", int70 == (-35));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Equation[a=32, b=-35, c=1]" + "'", str71, "Equation[a=32, b=-35, c=1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(solution78);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Solution[x=97, y=1]" + "'", str85, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test5410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5410");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution4);
        java.lang.String str6 = gcdSolutionWrapper5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper5.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper5.getSolution();
        java.lang.String str9 = gcdSolutionWrapper5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int14 = equation13.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int19 = equation18.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution22);
        boolean boolean25 = gcdSolutionWrapper23.equals((java.lang.Object) 1);
        boolean boolean26 = equation18.equals((java.lang.Object) boolean25);
        int int27 = equation18.a();
        int int28 = equation18.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution30);
        gcdSolutionWrapper31.setGcd((int) ' ');
        gcdSolutionWrapper31.setGcd((int) (short) 1);
        int int36 = gcdSolutionWrapper31.getGcd();
        int int37 = gcdSolutionWrapper31.getGcd();
        boolean boolean38 = equation18.equals((java.lang.Object) int37);
        boolean boolean39 = equation13.equals((java.lang.Object) equation18);
        java.lang.String str40 = equation18.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        gcdSolutionWrapper5.setSolution(solution41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper5.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper5.getSolution();
        int int45 = solution44.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-75), solution44);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution50);
        java.lang.String str52 = gcdSolutionWrapper51.toString();
        gcdSolutionWrapper51.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation58);
        solution59.setY((int) (byte) 10);
        int int62 = solution59.getY();
        gcdSolutionWrapper51.setSolution(solution59);
        gcdSolutionWrapper51.setGcd((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution66 = gcdSolutionWrapper51.getSolution();
        boolean boolean67 = solution44.equals((java.lang.Object) gcdSolutionWrapper51);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str6, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str9, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str40, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str52, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(solution66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test5411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5411");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) 'a', (int) '#');
    }

    @Test
    public void test5412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5412");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (byte) 100);
        java.lang.String str3 = solution2.toString();
        solution2.setX(10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=0, y=100]" + "'", str3, "Solution[x=0, y=100]");
    }

    @Test
    public void test5413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5413");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int22 = equation3.a();
        java.lang.String str23 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str25 = equation3.toString();
        int int26 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, (int) '#', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str35 = equation34.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation34);
        boolean boolean37 = equation30.equals((java.lang.Object) solution36);
        int int38 = equation30.b();
        boolean boolean39 = equation3.equals((java.lang.Object) equation30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str44 = equation43.toString();
        int int45 = equation43.c();
        int int46 = equation43.a();
        int int47 = equation43.a();
        boolean boolean48 = equation30.equals((java.lang.Object) equation43);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str23, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str25, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str35, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str44, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test5414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5414");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        int int7 = solution6.getX();
        int int8 = solution6.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution6);
        gcdSolutionWrapper9.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int16 = solution15.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution15);
        boolean boolean18 = gcdSolutionWrapper9.equals((java.lang.Object) solution15);
        java.lang.String str19 = solution15.toString();
        solution15.setY((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(96, solution15);
        gcdSolutionWrapper22.setGcd((int) (short) 10);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=1, y=52]" + "'", str19, "Solution[x=1, y=52]");
    }

    @Test
    public void test5415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5415");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), 0, 35);
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.b();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-35, b=0, c=35]" + "'", str4, "Equation[a=-35, b=0, c=35]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test5416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5416");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 52);
        solution2.setY((int) (byte) 10);
        int int5 = solution2.getY();
        boolean boolean7 = solution2.equals((java.lang.Object) "Equation[a=0, b=97, c=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test5417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5417");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(1, 125, (int) (byte) 1);
    }

    @Test
    public void test5418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5418");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (short) 100);
        int int3 = solution2.getX();
        solution2.setY(97);
        java.lang.String str6 = solution2.toString();
        solution2.setY(10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=100, y=97]" + "'", str6, "Solution[x=100, y=97]");
    }
}

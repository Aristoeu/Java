package LinearDiophantineEquationsSolver;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int6 = solution5.getY();
        solution5.setY((int) (byte) 1);
        gcdSolutionWrapper2.setSolution(solution5);
        int int10 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        boolean boolean19 = solution13.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = solution13.toString();
        java.lang.String str21 = solution13.toString();
        gcdSolutionWrapper2.setSolution(solution13);
        int int23 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(125, 32, 97);
        int int28 = equation27.a();
        boolean boolean29 = gcdSolutionWrapper2.equals((java.lang.Object) int28);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=1, y=1]" + "'", str21, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 125 + "'", int28 == 125);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getX();
        java.lang.String str12 = solution10.toString();
        solution10.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution10);
        solution10.setY((int) (short) 100);
        solution10.setX((int) '4');
        boolean boolean20 = solution6.equals((java.lang.Object) solution10);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper4.getSolution();
        java.lang.String str6 = gcdSolutionWrapper4.toString();
        gcdSolutionWrapper4.setGcd((-1));
        gcdSolutionWrapper4.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(97, (int) (short) 1);
        solution13.setY((-35));
        gcdSolutionWrapper4.setSolution(solution13);
        boolean boolean18 = gcdSolutionWrapper4.equals((java.lang.Object) "GcdSolutionWrapper[gcd=35, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str6, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        java.lang.String str21 = equation3.toString();
        java.lang.String str22 = equation3.toString();
        int int23 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int25 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int31 = equation30.c();
        int int32 = equation30.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        boolean boolean41 = solution36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper42.getSolution();
        java.lang.String str44 = gcdSolutionWrapper42.toString();
        gcdSolutionWrapper42.setGcd((int) (byte) 1);
        boolean boolean47 = equation30.equals((java.lang.Object) gcdSolutionWrapper42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = gcdSolutionWrapper42.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = gcdSolutionWrapper42.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        solution53.setY((int) (byte) 1);
        boolean boolean58 = solution53.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int63 = solution62.getY();
        java.lang.String str64 = solution62.toString();
        boolean boolean66 = solution62.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper59.setSolution(solution62);
        int int68 = solution62.getX();
        java.lang.String str69 = solution62.toString();
        solution62.setX((int) (byte) 0);
        boolean boolean72 = gcdSolutionWrapper42.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution73 = gcdSolutionWrapper42.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution77 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int78 = solution77.getY();
        solution77.setY((int) (byte) 1);
        boolean boolean82 = solution77.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper83 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution77);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution84 = gcdSolutionWrapper83.getSolution();
        java.lang.String str85 = gcdSolutionWrapper83.toString();
        gcdSolutionWrapper83.setGcd((int) (byte) 1);
        java.lang.String str88 = gcdSolutionWrapper83.toString();
        gcdSolutionWrapper83.setGcd(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution91 = gcdSolutionWrapper83.getSolution();
        boolean boolean92 = gcdSolutionWrapper42.equals((java.lang.Object) gcdSolutionWrapper83);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution93 = gcdSolutionWrapper83.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper94 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution93);
        int int95 = solution93.getY();
        boolean boolean96 = equation3.equals((java.lang.Object) int95);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str21, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str22, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str44, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Solution[x=97, y=1]" + "'", str69, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(solution73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(solution84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str85, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str88, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(solution93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        boolean boolean7 = gcdSolutionWrapper5.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        boolean boolean19 = solution13.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = solution13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str25 = equation24.toString();
        int int26 = equation24.c();
        boolean boolean27 = solution13.equals((java.lang.Object) equation24);
        int int28 = equation24.c();
        boolean boolean29 = solution10.equals((java.lang.Object) equation24);
        boolean boolean30 = gcdSolutionWrapper5.equals((java.lang.Object) equation24);
        boolean boolean31 = solution2.equals((java.lang.Object) gcdSolutionWrapper5);
        int int32 = gcdSolutionWrapper5.getGcd();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str25, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        boolean boolean16 = solution12.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper9.setSolution(solution12);
        gcdSolutionWrapper9.setGcd((int) 'a');
        java.lang.String str20 = gcdSolutionWrapper9.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=97, solution=Solution[x=97, y=1]]" + "'", str20, "GcdSolutionWrapper[gcd=97, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int11 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution14);
        boolean boolean17 = gcdSolutionWrapper15.equals((java.lang.Object) 1);
        boolean boolean18 = equation10.equals((java.lang.Object) boolean17);
        int int19 = equation10.a();
        int int20 = equation10.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution22);
        gcdSolutionWrapper23.setGcd((int) ' ');
        gcdSolutionWrapper23.setGcd((int) (short) 1);
        int int28 = gcdSolutionWrapper23.getGcd();
        int int29 = gcdSolutionWrapper23.getGcd();
        boolean boolean30 = equation10.equals((java.lang.Object) int29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        gcdSolutionWrapper33.setSolution(solution36);
        boolean boolean41 = equation10.equals((java.lang.Object) gcdSolutionWrapper33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        boolean boolean44 = equation3.equals((java.lang.Object) equation10);
        int int45 = equation10.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int50 = equation49.c();
        int int51 = equation49.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int56 = solution55.getY();
        solution55.setY((int) (byte) 1);
        boolean boolean60 = solution55.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = gcdSolutionWrapper61.getSolution();
        java.lang.String str63 = gcdSolutionWrapper61.toString();
        gcdSolutionWrapper61.setGcd((int) (byte) 1);
        boolean boolean66 = equation49.equals((java.lang.Object) gcdSolutionWrapper61);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution67 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation49);
        int int68 = equation49.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation49);
        boolean boolean70 = equation10.equals((java.lang.Object) equation49);
        int int71 = equation10.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        int int73 = equation10.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(solution62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str63, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(solution67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(solution69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(solution72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) 1);
        gcdSolutionWrapper2.setGcd(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 0);
        gcdSolutionWrapper2.setSolution(solution9);
        int int11 = solution9.getX();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int22 = equation3.a();
        int int23 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        int int8 = gcdSolutionWrapper2.getGcd();
        gcdSolutionWrapper2.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str15 = equation14.toString();
        boolean boolean16 = gcdSolutionWrapper2.equals((java.lang.Object) equation14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper2.getSolution();
        gcdSolutionWrapper2.setGcd(0);
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str15, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(solution17);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getX();
        solution3.setY(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '#', solution3);
        java.lang.String str8 = solution3.toString();
        solution3.setY((int) (short) 10);
        java.lang.String str11 = solution3.toString();
        java.lang.String str12 = solution3.toString();
        java.lang.Class<?> wildcardClass13 = solution3.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=52]" + "'", str8, "Solution[x=97, y=52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=10]" + "'", str11, "Solution[x=97, y=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=10]" + "'", str12, "Solution[x=97, y=10]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution5.setY((int) (byte) 10);
        solution5.setY((int) (byte) 10);
        int int10 = solution5.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        java.lang.String str17 = solution15.toString();
        solution15.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution15);
        gcdSolutionWrapper21.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution27);
        gcdSolutionWrapper21.setSolution(solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int33 = solution32.getY();
        java.lang.String str34 = solution32.toString();
        java.lang.String str35 = solution32.toString();
        java.lang.String str36 = solution32.toString();
        gcdSolutionWrapper21.setSolution(solution32);
        java.lang.String str38 = gcdSolutionWrapper21.toString();
        gcdSolutionWrapper21.setGcd(52);
        gcdSolutionWrapper21.setGcd((int) (short) 0);
        java.lang.Class<?> wildcardClass43 = gcdSolutionWrapper21.getClass();
        boolean boolean44 = solution5.equals((java.lang.Object) gcdSolutionWrapper21);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=97, y=1]" + "'", str17, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=97, y=1]" + "'", str34, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Solution[x=97, y=1]" + "'", str35, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Solution[x=97, y=1]" + "'", str36, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=97, y=1]]" + "'", str38, "GcdSolutionWrapper[gcd=52, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, (int) (short) 1, (int) (short) 100);
        int int4 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        solution2.setY((int) (byte) 1);
        int int6 = solution2.getY();
        java.lang.String str7 = solution2.toString();
        solution2.setY(97);
        solution2.setY(125);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        int int17 = equation15.b();
        boolean boolean18 = solution2.equals((java.lang.Object) equation15);
        int int19 = equation15.a();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=97, y=1]" + "'", str7, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        int int21 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = null;
        gcdSolutionWrapper15.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(125, (int) ' ');
        boolean boolean27 = gcdSolutionWrapper15.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution29);
        gcdSolutionWrapper30.setGcd((int) ' ');
        gcdSolutionWrapper30.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        java.lang.String str39 = solution37.toString();
        solution37.setX((int) (short) 1);
        boolean boolean43 = solution37.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper30.setSolution(solution37);
        int int45 = gcdSolutionWrapper30.getGcd();
        boolean boolean46 = gcdSolutionWrapper15.equals((java.lang.Object) int45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution48);
        gcdSolutionWrapper49.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int55 = solution54.getY();
        java.lang.String str56 = solution54.toString();
        gcdSolutionWrapper49.setSolution(solution54);
        int int58 = gcdSolutionWrapper49.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int62 = solution61.getY();
        gcdSolutionWrapper49.setSolution(solution61);
        java.lang.String str64 = solution61.toString();
        gcdSolutionWrapper15.setSolution(solution61);
        solution61.setY(125);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Solution[x=97, y=1]" + "'", str39, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Solution[x=97, y=1]" + "'", str56, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 32 + "'", int58 == 32);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        boolean boolean14 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        solution19.setY(0);
        gcdSolutionWrapper13.setSolution(solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int27 = equation26.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution30);
        boolean boolean33 = gcdSolutionWrapper31.equals((java.lang.Object) 1);
        boolean boolean34 = equation26.equals((java.lang.Object) boolean33);
        int int35 = equation26.a();
        int int36 = equation26.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution38);
        gcdSolutionWrapper39.setGcd((int) ' ');
        gcdSolutionWrapper39.setGcd((int) (short) 1);
        int int44 = gcdSolutionWrapper39.getGcd();
        int int45 = gcdSolutionWrapper39.getGcd();
        boolean boolean46 = equation26.equals((java.lang.Object) int45);
        boolean boolean47 = gcdSolutionWrapper13.equals((java.lang.Object) boolean46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation52);
        int int54 = solution53.getX();
        int int55 = solution53.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int60 = solution59.getY();
        java.lang.String str61 = solution59.toString();
        solution59.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int68 = equation67.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation67);
        boolean boolean70 = solution59.equals((java.lang.Object) solution69);
        boolean boolean71 = solution53.equals((java.lang.Object) boolean70);
        solution53.setY((int) (short) 1);
        gcdSolutionWrapper13.setSolution(solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation80 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution81 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation80);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution82 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation80);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper83 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution82);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper84 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution82);
        int int85 = gcdSolutionWrapper84.getGcd();
        boolean boolean86 = gcdSolutionWrapper13.equals((java.lang.Object) gcdSolutionWrapper84);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution89 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 52);
        int int90 = solution89.getX();
        boolean boolean91 = gcdSolutionWrapper84.equals((java.lang.Object) int90);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(solution53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Solution[x=97, y=1]" + "'", str61, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(solution69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(solution81);
        org.junit.Assert.assertNotNull(solution82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        boolean boolean16 = solution12.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper9.setSolution(solution12);
        solution12.setX(1);
        solution12.setY((int) (byte) 1);
        int int22 = solution12.getY();
        java.lang.String str23 = solution12.toString();
        int int24 = solution12.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=1, y=1]" + "'", str23, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        gcdSolutionWrapper8.setGcd((int) (byte) 1);
        java.lang.String str11 = gcdSolutionWrapper8.toString();
        int int12 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (short) 10);
        java.lang.String str15 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int20 = equation19.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution23);
        boolean boolean26 = gcdSolutionWrapper24.equals((java.lang.Object) 1);
        boolean boolean27 = equation19.equals((java.lang.Object) boolean26);
        int int28 = equation19.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        gcdSolutionWrapper8.setSolution(solution29);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(solution29);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int8 = equation7.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        boolean boolean14 = gcdSolutionWrapper12.equals((java.lang.Object) 1);
        boolean boolean15 = equation7.equals((java.lang.Object) boolean14);
        int int16 = equation7.a();
        boolean boolean17 = solution3.equals((java.lang.Object) int16);
        solution3.setY(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution22);
        gcdSolutionWrapper23.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        gcdSolutionWrapper23.setSolution(solution28);
        int int32 = gcdSolutionWrapper23.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        gcdSolutionWrapper23.setSolution(solution35);
        int int38 = solution35.getY();
        gcdSolutionWrapper20.setSolution(solution35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int49 = solution48.getY();
        solution48.setY((int) (byte) 1);
        boolean boolean53 = solution48.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = gcdSolutionWrapper54.getSolution();
        java.lang.String str56 = gcdSolutionWrapper54.toString();
        gcdSolutionWrapper54.setGcd((int) (byte) 1);
        boolean boolean59 = equation44.equals((java.lang.Object) gcdSolutionWrapper54);
        int int60 = gcdSolutionWrapper54.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = gcdSolutionWrapper54.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution61);
        gcdSolutionWrapper20.setSolution(solution61);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int68 = equation67.c();
        int int69 = equation67.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int74 = solution73.getY();
        solution73.setY((int) (byte) 1);
        boolean boolean78 = solution73.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper79 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution73);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution80 = gcdSolutionWrapper79.getSolution();
        java.lang.String str81 = gcdSolutionWrapper79.toString();
        gcdSolutionWrapper79.setGcd((int) (byte) 1);
        boolean boolean84 = equation67.equals((java.lang.Object) gcdSolutionWrapper79);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution85 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation67);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution86 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation67);
        boolean boolean87 = gcdSolutionWrapper20.equals((java.lang.Object) equation67);
        int int88 = gcdSolutionWrapper20.getGcd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(solution55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str56, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(solution61);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(solution80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str81, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(solution85);
        org.junit.Assert.assertNotNull(solution86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getX();
        solution3.setY(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '#', solution3);
        java.lang.String str8 = solution3.toString();
        solution3.setY((int) (short) 10);
        java.lang.String str11 = solution3.toString();
        java.lang.String str12 = solution3.toString();
        solution3.setY((int) 'a');
        int int15 = solution3.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=52]" + "'", str8, "Solution[x=97, y=52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=10]" + "'", str11, "Solution[x=97, y=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=10]" + "'", str12, "Solution[x=97, y=10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int11 = equation10.c();
        int int12 = equation10.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        solution16.setY((int) (byte) 1);
        boolean boolean21 = solution16.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper22.getSolution();
        java.lang.String str24 = gcdSolutionWrapper22.toString();
        gcdSolutionWrapper22.setGcd((int) (byte) 1);
        boolean boolean27 = equation10.equals((java.lang.Object) gcdSolutionWrapper22);
        int int28 = gcdSolutionWrapper22.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = null;
        gcdSolutionWrapper22.setSolution(solution29);
        java.lang.String str31 = gcdSolutionWrapper22.toString();
        int int32 = gcdSolutionWrapper22.getGcd();
        boolean boolean33 = equation3.equals((java.lang.Object) gcdSolutionWrapper22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        solution37.setY((int) (byte) 1);
        boolean boolean42 = solution37.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution37);
        gcdSolutionWrapper43.setGcd((-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int51 = solution50.getY();
        java.lang.String str52 = solution50.toString();
        solution50.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution50);
        gcdSolutionWrapper43.setSolution(solution50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str62 = equation61.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation61);
        int int64 = equation61.c();
        int int65 = equation61.c();
        boolean boolean66 = solution50.equals((java.lang.Object) int65);
        gcdSolutionWrapper22.setSolution(solution50);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str24, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str31, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=97, y=1]" + "'", str52, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str62, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-75), 35, 0);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', 0, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.b();
        int int6 = equation3.a();
        int int7 = equation3.c();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        gcdSolutionWrapper4.setGcd(52);
        java.lang.String str9 = gcdSolutionWrapper4.toString();
        int int10 = gcdSolutionWrapper4.getGcd();
        java.lang.String str11 = gcdSolutionWrapper4.toString();
        gcdSolutionWrapper4.setGcd(35);
        gcdSolutionWrapper4.setGcd((int) ' ');
        int int16 = gcdSolutionWrapper4.getGcd();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]" + "'", str9, "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]" + "'", str11, "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (short) 100);
        int int3 = solution2.getX();
        java.lang.Class<?> wildcardClass4 = solution2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getX();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper8.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(solution10);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) (short) 10, 32);
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution5.setY(0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertNotNull(solution5);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = solution4.getX();
        solution4.setX((-75));
        int int8 = solution4.getX();
        java.lang.String str9 = solution4.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-75) + "'", int8 == (-75));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=-75, y=0]" + "'", str9, "Solution[x=-75, y=0]");
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        boolean boolean12 = gcdSolutionWrapper2.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper2.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) 0, 1);
        int int19 = equation18.b();
        int int20 = equation18.c();
        boolean boolean21 = gcdSolutionWrapper2.equals((java.lang.Object) equation18);
        int int22 = equation18.b();
        int int23 = equation18.b();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.c();
        int int6 = equation3.a();
        java.lang.String str7 = equation3.toString();
        int int8 = equation3.b();
        int int9 = equation3.c();
        java.lang.String str10 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str7, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str10, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int22 = equation3.a();
        java.lang.String str23 = equation3.toString();
        java.lang.String str24 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int26 = solution25.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str23, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str24, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, 0, (int) (byte) 10);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution4.setX((int) (byte) 10);
        int int7 = solution4.getX();
        solution4.setX(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(100, solution4);
        java.lang.String str12 = gcdSolutionWrapper11.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        solution16.setY((int) (byte) 1);
        int int20 = solution16.getY();
        java.lang.String str21 = solution16.toString();
        solution16.setY(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        int int31 = solution30.getX();
        int int32 = solution30.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution30);
        java.lang.String str34 = gcdSolutionWrapper33.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution36);
        boolean boolean39 = gcdSolutionWrapper37.equals((java.lang.Object) 1);
        java.lang.String str40 = gcdSolutionWrapper37.toString();
        gcdSolutionWrapper37.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper37.setSolution(solution45);
        int int47 = solution45.getX();
        gcdSolutionWrapper33.setSolution(solution45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = gcdSolutionWrapper33.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = gcdSolutionWrapper33.getSolution();
        boolean boolean51 = solution16.equals((java.lang.Object) solution50);
        boolean boolean52 = gcdSolutionWrapper11.equals((java.lang.Object) solution50);
        gcdSolutionWrapper11.setGcd((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GcdSolutionWrapper[gcd=100, solution=Solution[x=10, y=-35]]" + "'", str12, "GcdSolutionWrapper[gcd=100, solution=Solution[x=10, y=-35]]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=97, y=1]" + "'", str21, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]" + "'", str34, "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str40, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertNotNull(solution50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', 1, (int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.c();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str5, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        boolean boolean9 = solution3.equals((java.lang.Object) (-1.0f));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution3);
        java.lang.String str11 = gcdSolutionWrapper10.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        solution18.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        int int28 = solution27.getX();
        int int29 = solution27.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution27);
        int int31 = solution27.getX();
        gcdSolutionWrapper21.setSolution(solution27);
        int int33 = solution27.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution27);
        boolean boolean35 = gcdSolutionWrapper10.equals((java.lang.Object) gcdSolutionWrapper34);
        int int36 = gcdSolutionWrapper34.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=100, solution=Solution[x=1, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=100, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int4 = solution3.getY();
        int int5 = solution3.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getX();
        solution10.setY(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '#', solution10);
        java.lang.String str15 = solution10.toString();
        solution10.setY((int) (short) 10);
        java.lang.String str18 = solution10.toString();
        java.lang.String str19 = solution10.toString();
        solution10.setY(0);
        gcdSolutionWrapper6.setSolution(solution10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=52]" + "'", str15, "Solution[x=97, y=52]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=97, y=10]" + "'", str18, "Solution[x=97, y=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=10]" + "'", str19, "Solution[x=97, y=10]");
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        int int5 = gcdSolutionWrapper2.getGcd();
        int int6 = gcdSolutionWrapper2.getGcd();
        java.lang.String str7 = gcdSolutionWrapper2.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=null]" + "'", str7, "GcdSolutionWrapper[gcd=32, solution=null]");
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (byte) 10, 125);
        int int4 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-35), 1);
        solution8.setY((int) (byte) 0);
        boolean boolean11 = solution4.equals((java.lang.Object) solution8);
        solution8.setY((-35));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        solution19.setY((int) (byte) 1);
        boolean boolean24 = solution19.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        boolean boolean32 = solution28.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper25.setSolution(solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation37);
        int int39 = solution38.getX();
        int int40 = solution38.getY();
        boolean boolean41 = solution28.equals((java.lang.Object) solution38);
        int int42 = solution28.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution44);
        boolean boolean47 = gcdSolutionWrapper45.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        java.lang.String str55 = solution53.toString();
        solution53.setX((int) (short) 1);
        boolean boolean59 = solution53.equals((java.lang.Object) (-1.0f));
        java.lang.String str60 = solution53.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str65 = equation64.toString();
        int int66 = equation64.c();
        boolean boolean67 = solution53.equals((java.lang.Object) equation64);
        int int68 = equation64.c();
        boolean boolean69 = solution50.equals((java.lang.Object) equation64);
        boolean boolean70 = gcdSolutionWrapper45.equals((java.lang.Object) equation64);
        boolean boolean71 = solution28.equals((java.lang.Object) boolean70);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation75 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int76 = equation75.a();
        int int77 = equation75.c();
        boolean boolean78 = solution28.equals((java.lang.Object) int77);
        gcdSolutionWrapper15.setSolution(solution28);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Solution[x=97, y=1]" + "'", str55, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Solution[x=1, y=1]" + "'", str60, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str65, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 32 + "'", int76 == 32);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        solution10.setX((int) (short) 1);
        boolean boolean16 = solution10.equals((java.lang.Object) (-1.0f));
        java.lang.String str17 = solution10.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str22 = equation21.toString();
        int int23 = equation21.c();
        boolean boolean24 = solution10.equals((java.lang.Object) equation21);
        int int25 = equation21.c();
        boolean boolean26 = solution7.equals((java.lang.Object) equation21);
        boolean boolean27 = gcdSolutionWrapper2.equals((java.lang.Object) equation21);
        int int28 = equation21.a();
        java.lang.String str29 = equation21.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=1, y=1]" + "'", str17, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str22, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str29, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-35), 1);
        solution6.setY((int) (byte) 0);
        boolean boolean9 = solution2.equals((java.lang.Object) solution6);
        int int10 = solution6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-35) + "'", int10 == (-35));
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', 52, (int) 'a');
        int int4 = equation3.c();
        int int5 = equation3.a();
        int int6 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        java.lang.String str18 = solution16.toString();
        boolean boolean20 = solution16.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper13.setSolution(solution16);
        int int22 = solution16.getX();
        int int23 = solution16.getY();
        solution16.setY((int) (short) 10);
        solution16.setY(35);
        solution16.setX(0);
        boolean boolean30 = solution3.equals((java.lang.Object) solution16);
        solution16.setY((-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int42 = solution41.getY();
        solution41.setY((int) (byte) 1);
        boolean boolean46 = solution41.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = gcdSolutionWrapper47.getSolution();
        java.lang.String str49 = gcdSolutionWrapper47.toString();
        gcdSolutionWrapper47.setGcd((int) (byte) 1);
        boolean boolean52 = equation37.equals((java.lang.Object) gcdSolutionWrapper47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int57 = equation56.c();
        int int58 = equation56.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation56);
        boolean boolean60 = gcdSolutionWrapper47.equals((java.lang.Object) solution59);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str65 = equation64.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution66 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation64);
        solution66.setY((int) (byte) 10);
        gcdSolutionWrapper47.setSolution(solution66);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution66);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution73 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper74 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution73);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution77 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int78 = solution77.getY();
        solution77.setY((int) (byte) 1);
        gcdSolutionWrapper74.setSolution(solution77);
        int int82 = gcdSolutionWrapper74.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution85 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int86 = solution85.getY();
        java.lang.String str87 = solution85.toString();
        solution85.setX((int) (short) 1);
        boolean boolean91 = solution85.equals((java.lang.Object) (-1.0f));
        java.lang.String str92 = solution85.toString();
        java.lang.String str93 = solution85.toString();
        gcdSolutionWrapper74.setSolution(solution85);
        java.lang.String str95 = solution85.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper96 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution85);
        boolean boolean97 = solution66.equals((java.lang.Object) gcdSolutionWrapper96);
        boolean boolean98 = solution16.equals((java.lang.Object) solution66);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper99 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution66);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=97, y=1]" + "'", str18, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str49, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(solution59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str65, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution66);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Solution[x=97, y=1]" + "'", str87, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Solution[x=1, y=1]" + "'", str92, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Solution[x=1, y=1]" + "'", str93, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Solution[x=1, y=1]" + "'", str95, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        java.lang.String str10 = solution8.toString();
        gcdSolutionWrapper3.setSolution(solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int18 = equation17.c();
        int int19 = equation17.b();
        int int20 = equation17.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        gcdSolutionWrapper3.setSolution(solution21);
        int int23 = gcdSolutionWrapper3.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        java.lang.String str31 = solution30.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution30);
        boolean boolean33 = solution24.equals((java.lang.Object) solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(96, solution24);
        java.lang.Object obj35 = null;
        boolean boolean36 = gcdSolutionWrapper34.equals(obj35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=97, y=1]" + "'", str10, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=0, y=0]" + "'", str31, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), 32, (int) (short) 100);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        gcdSolutionWrapper3.setGcd((int) (short) 1);
        java.lang.String str8 = gcdSolutionWrapper3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int12 = solution11.getY();
        java.lang.String str13 = solution11.toString();
        solution11.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int20 = equation19.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = solution11.equals((java.lang.Object) solution21);
        boolean boolean24 = solution11.equals((java.lang.Object) false);
        gcdSolutionWrapper3.setSolution(solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        int int32 = solution31.getX();
        int int33 = solution31.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation39);
        solution40.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation47);
        solution48.setY((int) (byte) 10);
        boolean boolean51 = solution40.equals((java.lang.Object) (byte) 10);
        boolean boolean53 = solution40.equals((java.lang.Object) (-1));
        solution40.setY((int) (byte) 0);
        gcdSolutionWrapper34.setSolution(solution40);
        solution40.setY((int) ' ');
        gcdSolutionWrapper3.setSolution(solution40);
        solution40.setY((int) (byte) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution40);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str8, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=97, y=1]" + "'", str13, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (byte) 1, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.a();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        int int7 = equation3.a();
        int int8 = equation3.c();
        int int9 = equation3.b();
        int int10 = equation3.a();
        java.lang.String str11 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str13 = equation3.toString();
        int int14 = equation3.a();
        int int15 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str11, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str13, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str6 = equation3.toString();
        int int7 = equation3.b();
        int int8 = equation3.b();
        java.lang.String str9 = equation3.toString();
        int int10 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str6, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str9, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper4.getSolution();
        java.lang.String str8 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper4.getSolution();
        int int10 = gcdSolutionWrapper4.getGcd();
        gcdSolutionWrapper4.setGcd((int) (short) -1);
        gcdSolutionWrapper4.setGcd((int) (byte) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        java.lang.String str20 = equation4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        solution21.setY((int) (byte) 0);
        int int24 = solution21.getX();
        int int25 = solution21.getY();
        solution21.setX(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(100, solution21);
        int int29 = solution21.getX();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str20, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (int) (short) 100);
        solution2.setX(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        boolean boolean11 = solution2.equals((java.lang.Object) solution10);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int5 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution4);
        gcdSolutionWrapper7.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        java.lang.String str16 = solution14.toString();
        solution14.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution14);
        java.lang.String str21 = solution14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int26 = solution25.getY();
        java.lang.String str27 = solution25.toString();
        solution25.setX((int) (short) 1);
        boolean boolean31 = solution25.equals((java.lang.Object) true);
        solution25.setY(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution25);
        boolean boolean35 = solution14.equals((java.lang.Object) (byte) 10);
        boolean boolean36 = gcdSolutionWrapper7.equals((java.lang.Object) boolean35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper7.getSolution();
        int int38 = gcdSolutionWrapper7.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=1, y=1]" + "'", str21, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=97, y=1]" + "'", str27, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) (byte) 1);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        int int20 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution21);
        java.lang.String str23 = solution21.toString();
        solution21.setX((-35));
        int int26 = solution21.getX();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=97, y=1]" + "'", str23, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-35) + "'", int26 == (-35));
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int5 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper6.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-97), solution7);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(solution7);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        int int4 = equation3.b();
        java.lang.String str5 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        int int9 = solution8.getX();
        boolean boolean10 = equation3.equals((java.lang.Object) solution8);
        int int11 = equation3.c();
        int int12 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-35) + "'", int4 == (-35));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=32, b=-35, c=1]" + "'", str5, "Equation[a=32, b=-35, c=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-35) + "'", int12 == (-35));
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 1, 0);
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str5, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 32, 35);
        int int4 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        java.lang.String str5 = solution2.toString();
        java.lang.String str6 = solution2.toString();
        solution2.setY((int) (short) 0);
        solution2.setY((int) (short) 10);
        int int11 = solution2.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, 10);
        int int16 = equation15.a();
        int int17 = equation15.a();
        int int18 = equation15.c();
        boolean boolean19 = solution2.equals((java.lang.Object) equation15);
        int int20 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, 0);
        solution12.setX(1);
        gcdSolutionWrapper8.setSolution(solution12);
        solution12.setY((int) (byte) 10);
        solution12.setY(32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int5 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        java.lang.String str7 = gcdSolutionWrapper6.toString();
        java.lang.String str8 = gcdSolutionWrapper6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int13 = equation12.c();
        java.lang.String str14 = equation12.toString();
        int int15 = equation12.b();
        java.lang.Object obj16 = null;
        boolean boolean17 = equation12.equals(obj16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        solution18.setX(100);
        int int21 = solution18.getY();
        gcdSolutionWrapper6.setSolution(solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution18);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=32, y=10]]" + "'", str7, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=32, y=10]]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=32, y=10]]" + "'", str8, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=32, y=10]]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str14, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-35) + "'", int21 == (-35));
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        boolean boolean15 = gcdSolutionWrapper13.equals((java.lang.Object) 1);
        boolean boolean16 = equation8.equals((java.lang.Object) boolean15);
        int int17 = equation8.a();
        int int18 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 1);
        int int26 = gcdSolutionWrapper21.getGcd();
        int int27 = gcdSolutionWrapper21.getGcd();
        boolean boolean28 = equation8.equals((java.lang.Object) int27);
        boolean boolean29 = equation3.equals((java.lang.Object) equation8);
        int int30 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        solution10.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution10);
        gcdSolutionWrapper16.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution23);
        java.lang.String str25 = gcdSolutionWrapper24.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper24.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int31 = equation30.c();
        int int32 = equation30.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        boolean boolean41 = solution36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper42.getSolution();
        java.lang.String str44 = gcdSolutionWrapper42.toString();
        gcdSolutionWrapper42.setGcd((int) (byte) 1);
        boolean boolean47 = equation30.equals((java.lang.Object) gcdSolutionWrapper42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        boolean boolean49 = gcdSolutionWrapper24.equals((java.lang.Object) solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        solution53.setY((int) (byte) 1);
        boolean boolean58 = solution53.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution53);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int63 = solution62.getY();
        java.lang.String str64 = solution62.toString();
        boolean boolean66 = solution62.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper59.setSolution(solution62);
        int int68 = solution62.getX();
        boolean boolean69 = solution48.equals((java.lang.Object) solution62);
        gcdSolutionWrapper16.setSolution(solution48);
        boolean boolean71 = equation3.equals((java.lang.Object) solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution72.setX(100);
        java.lang.String str75 = solution72.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str25, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str44, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(solution72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Solution[x=100, y=-35]" + "'", str75, "Solution[x=100, y=-35]");
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (byte) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution4.setY((int) (short) 100);
        solution4.setY(0);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int31 = equation30.c();
        int int32 = equation30.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        boolean boolean41 = solution36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper42.getSolution();
        java.lang.String str44 = gcdSolutionWrapper42.toString();
        gcdSolutionWrapper42.setGcd((int) (byte) 1);
        boolean boolean47 = equation30.equals((java.lang.Object) gcdSolutionWrapper42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        int int49 = solution48.getY();
        boolean boolean50 = gcdSolutionWrapper13.equals((java.lang.Object) int49);
        java.lang.String str51 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = gcdSolutionWrapper13.getSolution();
        gcdSolutionWrapper13.setGcd((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = gcdSolutionWrapper13.getSolution();
        gcdSolutionWrapper13.setGcd((int) '4');
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str44, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-35) + "'", int49 == (-35));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str51, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution52);
        org.junit.Assert.assertNotNull(solution55);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper4.getSolution();
        java.lang.String str8 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper4.getSolution();
        int int11 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int15 = solution14.getX();
        solution14.setX(100);
        java.lang.String str18 = solution14.toString();
        gcdSolutionWrapper4.setSolution(solution14);
        int int20 = solution14.getY();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=100, y=0]" + "'", str18, "Solution[x=100, y=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(10, (int) (byte) 10, (int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 0, (int) ' ');
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int20 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = gcdSolutionWrapper9.equals((java.lang.Object) equation19);
        int int23 = equation19.c();
        boolean boolean25 = equation19.equals((java.lang.Object) false);
        boolean boolean27 = equation19.equals((java.lang.Object) "Solution[x=1, y=1]");
        int int28 = equation19.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        int int22 = solution21.getX();
        int int23 = solution21.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int25 = equation24.c();
        int int26 = equation24.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        solution30.setY((int) (byte) 1);
        boolean boolean35 = solution30.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper36.getSolution();
        java.lang.String str38 = gcdSolutionWrapper36.toString();
        gcdSolutionWrapper36.setGcd((int) (byte) 1);
        boolean boolean41 = equation24.equals((java.lang.Object) gcdSolutionWrapper36);
        boolean boolean42 = equation3.equals((java.lang.Object) equation24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int44 = equation3.c();
        java.lang.String str45 = equation3.toString();
        int int46 = equation3.c();
        int int47 = equation3.b();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str38, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str45, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        int int11 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        gcdSolutionWrapper2.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution18);
        gcdSolutionWrapper19.setGcd((int) ' ');
        gcdSolutionWrapper19.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        java.lang.String str28 = solution26.toString();
        solution26.setX((int) (short) 1);
        boolean boolean32 = solution26.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper19.setSolution(solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution35);
        boolean boolean38 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution40);
        gcdSolutionWrapper41.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int47 = solution46.getY();
        java.lang.String str48 = solution46.toString();
        gcdSolutionWrapper41.setSolution(solution46);
        gcdSolutionWrapper36.setSolution(solution46);
        int int51 = solution46.getY();
        java.lang.String str52 = solution46.toString();
        gcdSolutionWrapper19.setSolution(solution46);
        gcdSolutionWrapper2.setSolution(solution46);
        gcdSolutionWrapper2.setGcd(1);
        boolean boolean58 = gcdSolutionWrapper2.equals((java.lang.Object) false);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int62 = solution61.getY();
        java.lang.String str63 = solution61.toString();
        java.lang.String str64 = solution61.toString();
        gcdSolutionWrapper2.setSolution(solution61);
        int int66 = solution61.getX();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=97, y=1]" + "'", str28, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=97, y=1]" + "'", str48, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=97, y=1]" + "'", str52, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Solution[x=97, y=1]" + "'", str63, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        gcdSolutionWrapper4.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 100, (int) (byte) 100);
        int int11 = equation10.b();
        boolean boolean12 = gcdSolutionWrapper4.equals((java.lang.Object) equation10);
        gcdSolutionWrapper4.setGcd((int) '#');
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        int int16 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int21 = equation20.c();
        int int22 = equation20.b();
        int int23 = equation20.c();
        int int24 = equation20.c();
        boolean boolean25 = gcdSolutionWrapper9.equals((java.lang.Object) int24);
        gcdSolutionWrapper9.setGcd((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        boolean boolean31 = gcdSolutionWrapper9.equals((java.lang.Object) solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = gcdSolutionWrapper9.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = gcdSolutionWrapper9.getSolution();
        java.lang.String str34 = solution33.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=97, y=1]" + "'", str34, "Solution[x=97, y=1]");
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        boolean boolean17 = solution13.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper10.setSolution(solution13);
        int int19 = solution13.getX();
        int int20 = solution13.getY();
        solution13.setY((int) (short) 10);
        solution13.setY(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        solution28.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean35 = solution28.equals((java.lang.Object) solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution28);
        boolean boolean37 = solution13.equals((java.lang.Object) gcdSolutionWrapper36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution13);
        gcdSolutionWrapper38.setGcd(96);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = gcdSolutionWrapper38.getSolution();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(solution41);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        boolean boolean12 = gcdSolutionWrapper2.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper2.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int24 = solution23.getY();
        java.lang.String str25 = solution23.toString();
        int int26 = solution23.getX();
        int int27 = solution23.getY();
        gcdSolutionWrapper20.setSolution(solution23);
        int int29 = gcdSolutionWrapper20.getGcd();
        boolean boolean30 = solution15.equals((java.lang.Object) gcdSolutionWrapper20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = gcdSolutionWrapper20.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = gcdSolutionWrapper20.getSolution();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=97, y=1]" + "'", str25, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertNotNull(solution32);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        int int4 = equation3.b();
        java.lang.String str5 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, (int) '4', 0);
        boolean boolean10 = equation3.equals((java.lang.Object) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-35) + "'", int4 == (-35));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=32, b=-35, c=1]" + "'", str5, "Equation[a=32, b=-35, c=1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(solution11);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        java.lang.String str15 = equation12.toString();
        boolean boolean16 = gcdSolutionWrapper8.equals((java.lang.Object) equation12);
        int int17 = equation12.c();
        int int18 = equation12.a();
        int int19 = equation12.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str15, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        java.lang.String str9 = solution5.toString();
        java.lang.String str10 = solution5.toString();
        java.lang.Class<?> wildcardClass11 = solution5.getClass();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=0, y=0]" + "'", str9, "Solution[x=0, y=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=0, y=0]" + "'", str10, "Solution[x=0, y=0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution5.setY(10);
        int int8 = solution5.getY();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str4, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int23 = solution22.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper24.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper24.getSolution();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-35) + "'", int23 == (-35));
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertNotNull(solution26);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int12 = solution11.getY();
        java.lang.String str13 = solution11.toString();
        solution11.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int20 = equation19.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = solution11.equals((java.lang.Object) solution21);
        boolean boolean24 = solution21.equals((java.lang.Object) 0);
        boolean boolean25 = equation8.equals((java.lang.Object) solution21);
        boolean boolean27 = solution21.equals((java.lang.Object) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation32);
        solution33.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation40);
        solution41.setY((int) (byte) 10);
        boolean boolean44 = solution33.equals((java.lang.Object) (byte) 10);
        boolean boolean45 = solution21.equals((java.lang.Object) (byte) 10);
        int int46 = solution21.getX();
        solution21.setY((int) (byte) 1);
        boolean boolean49 = equation3.equals((java.lang.Object) (byte) 1);
        int int50 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int55 = equation54.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution58);
        boolean boolean61 = gcdSolutionWrapper59.equals((java.lang.Object) 1);
        boolean boolean62 = equation54.equals((java.lang.Object) boolean61);
        int int63 = equation54.a();
        int int64 = equation54.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution66 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution66);
        gcdSolutionWrapper67.setGcd((int) ' ');
        gcdSolutionWrapper67.setGcd((int) (short) 1);
        int int72 = gcdSolutionWrapper67.getGcd();
        int int73 = gcdSolutionWrapper67.getGcd();
        boolean boolean74 = equation54.equals((java.lang.Object) int73);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution76 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper77 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution76);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution80 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int81 = solution80.getY();
        solution80.setY((int) (byte) 1);
        gcdSolutionWrapper77.setSolution(solution80);
        boolean boolean85 = equation54.equals((java.lang.Object) gcdSolutionWrapper77);
        boolean boolean86 = equation3.equals((java.lang.Object) equation54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution87 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution88 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation54);
        int int89 = solution88.getY();
        solution88.setY((int) (short) 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str4, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=97, y=1]" + "'", str13, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(solution56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(solution87);
        org.junit.Assert.assertNotNull(solution88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-35) + "'", int89 == (-35));
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        gcdSolutionWrapper8.setGcd((int) (byte) 1);
        java.lang.String str11 = gcdSolutionWrapper8.toString();
        int int12 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (short) 10);
        gcdSolutionWrapper8.setGcd(10);
        java.lang.String str17 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation25);
        int int27 = solution26.getX();
        int int28 = solution26.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution26);
        boolean boolean30 = solution20.equals((java.lang.Object) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        solution36.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation44);
        int int46 = solution45.getX();
        int int47 = solution45.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution45);
        int int49 = solution45.getX();
        gcdSolutionWrapper39.setSolution(solution45);
        boolean boolean51 = solution20.equals((java.lang.Object) gcdSolutionWrapper39);
        gcdSolutionWrapper8.setSolution(solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int57 = equation56.a();
        int int58 = equation56.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int63 = solution62.getY();
        solution62.setY((int) (byte) 1);
        boolean boolean67 = solution62.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution62);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = gcdSolutionWrapper68.getSolution();
        java.lang.String str70 = gcdSolutionWrapper68.toString();
        gcdSolutionWrapper68.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper68.setSolution(solution75);
        boolean boolean77 = equation56.equals((java.lang.Object) gcdSolutionWrapper68);
        boolean boolean78 = gcdSolutionWrapper8.equals((java.lang.Object) equation56);
        boolean boolean80 = gcdSolutionWrapper8.equals((java.lang.Object) "Equation[a=97, b=0, c=-1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertNotNull(solution45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 32 + "'", int57 == 32);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(solution69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str70, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution4);
        gcdSolutionWrapper10.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution16);
        gcdSolutionWrapper10.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper10.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 100, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        boolean boolean27 = solution19.equals((java.lang.Object) solution25);
        java.lang.String str28 = solution19.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=100, y=32]" + "'", str28, "Solution[x=100, y=32]");
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        boolean boolean7 = gcdSolutionWrapper5.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        boolean boolean19 = solution13.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = solution13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str25 = equation24.toString();
        int int26 = equation24.c();
        boolean boolean27 = solution13.equals((java.lang.Object) equation24);
        int int28 = equation24.c();
        boolean boolean29 = solution10.equals((java.lang.Object) equation24);
        boolean boolean30 = gcdSolutionWrapper5.equals((java.lang.Object) equation24);
        boolean boolean31 = solution2.equals((java.lang.Object) gcdSolutionWrapper5);
        gcdSolutionWrapper5.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        java.lang.String str39 = solution37.toString();
        solution37.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution37);
        int int43 = gcdSolutionWrapper42.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper42.getSolution();
        java.lang.String str45 = gcdSolutionWrapper42.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        solution48.setX((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int59 = solution58.getY();
        solution58.setY((int) (byte) 1);
        boolean boolean63 = solution58.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution58);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = gcdSolutionWrapper64.getSolution();
        java.lang.String str66 = gcdSolutionWrapper64.toString();
        gcdSolutionWrapper64.setGcd((int) (byte) 1);
        boolean boolean69 = equation54.equals((java.lang.Object) gcdSolutionWrapper64);
        int int70 = gcdSolutionWrapper64.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = gcdSolutionWrapper64.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation75 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str76 = equation75.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution77 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation75);
        solution77.setY((int) (byte) 10);
        boolean boolean80 = solution71.equals((java.lang.Object) solution77);
        int int81 = solution77.getY();
        boolean boolean82 = solution48.equals((java.lang.Object) solution77);
        gcdSolutionWrapper42.setSolution(solution77);
        int int84 = solution77.getY();
        boolean boolean85 = gcdSolutionWrapper5.equals((java.lang.Object) solution77);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation89 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution90 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation89);
        solution90.setY((int) (byte) 10);
        boolean boolean93 = gcdSolutionWrapper5.equals((java.lang.Object) solution90);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution94 = gcdSolutionWrapper5.getSolution();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str25, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Solution[x=97, y=1]" + "'", str39, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-35) + "'", int43 == (-35));
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]" + "'", str45, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str66, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(solution71);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str76, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(solution90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(solution94);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        boolean boolean14 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int19 = equation18.c();
        int int20 = equation18.b();
        java.lang.Class<?> wildcardClass21 = equation18.getClass();
        boolean boolean22 = equation3.equals((java.lang.Object) wildcardClass21);
        java.lang.String str23 = equation3.toString();
        int int24 = equation3.b();
        int int25 = equation3.a();
        java.lang.String str26 = equation3.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: null");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str23, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str26, "Equation[a=0, b=0, c=-1]");
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper8.getSolution();
        java.lang.String str11 = gcdSolutionWrapper8.toString();
        int int12 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper8.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-35) + "'", int12 == (-35));
        org.junit.Assert.assertNotNull(solution13);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        boolean boolean12 = gcdSolutionWrapper2.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper2.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        solution22.setY((int) (byte) 1);
        boolean boolean27 = solution22.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = gcdSolutionWrapper28.getSolution();
        java.lang.String str30 = gcdSolutionWrapper28.toString();
        gcdSolutionWrapper28.setGcd((int) (byte) 1);
        boolean boolean33 = equation18.equals((java.lang.Object) gcdSolutionWrapper28);
        java.lang.String str34 = equation18.toString();
        int int35 = equation18.c();
        boolean boolean36 = gcdSolutionWrapper2.equals((java.lang.Object) equation18);
        gcdSolutionWrapper2.setGcd(100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper2.getSolution();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str30, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str34, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(solution39);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        boolean boolean39 = solution35.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper32.setSolution(solution35);
        int int41 = solution35.getX();
        java.lang.String str42 = solution35.toString();
        solution35.setX((int) (byte) 0);
        boolean boolean45 = gcdSolutionWrapper15.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int51 = solution50.getY();
        solution50.setY((int) (byte) 1);
        boolean boolean55 = solution50.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = gcdSolutionWrapper56.getSolution();
        java.lang.String str58 = gcdSolutionWrapper56.toString();
        gcdSolutionWrapper56.setGcd((int) (byte) 1);
        java.lang.String str61 = gcdSolutionWrapper56.toString();
        gcdSolutionWrapper56.setGcd(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = gcdSolutionWrapper56.getSolution();
        boolean boolean65 = gcdSolutionWrapper15.equals((java.lang.Object) gcdSolutionWrapper56);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int71 = equation70.c();
        int int72 = equation70.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int77 = solution76.getY();
        solution76.setY((int) (byte) 1);
        boolean boolean81 = solution76.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper82 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution76);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution83 = gcdSolutionWrapper82.getSolution();
        java.lang.String str84 = gcdSolutionWrapper82.toString();
        gcdSolutionWrapper82.setGcd((int) (byte) 1);
        boolean boolean87 = equation70.equals((java.lang.Object) gcdSolutionWrapper82);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution88 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation70);
        int int89 = solution88.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper90 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution88);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation94 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) '4', (int) (byte) 1);
        boolean boolean95 = solution88.equals((java.lang.Object) equation94);
        gcdSolutionWrapper15.setSolution(solution88);
        int int97 = solution88.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(solution57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str58, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str61, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(solution83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str84, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(solution88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-35) + "'", int89 == (-35));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        int int8 = gcdSolutionWrapper2.getGcd();
        gcdSolutionWrapper2.setGcd(0);
        java.lang.Class<?> wildcardClass11 = gcdSolutionWrapper2.getClass();
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        int int8 = solution4.getY();
        java.lang.String str9 = solution4.toString();
        solution4.setY(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper12.getSolution();
        int int14 = gcdSolutionWrapper12.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper12.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int20 = solution19.getX();
        boolean boolean21 = gcdSolutionWrapper16.equals((java.lang.Object) solution19);
        int int22 = gcdSolutionWrapper16.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        boolean boolean39 = solution35.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper32.setSolution(solution35);
        int int41 = solution35.getX();
        java.lang.String str42 = solution35.toString();
        solution35.setX((int) (byte) 0);
        boolean boolean45 = gcdSolutionWrapper15.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int53 = solution52.getY();
        java.lang.String str54 = solution52.toString();
        solution52.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution52);
        gcdSolutionWrapper58.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution64);
        gcdSolutionWrapper58.setSolution(solution64);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int70 = solution69.getY();
        java.lang.String str71 = solution69.toString();
        java.lang.String str72 = solution69.toString();
        java.lang.String str73 = solution69.toString();
        gcdSolutionWrapper58.setSolution(solution69);
        solution69.setY((int) '#');
        gcdSolutionWrapper15.setSolution(solution69);
        int int78 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution83 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper84 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution83);
        java.lang.String str85 = gcdSolutionWrapper84.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution86 = gcdSolutionWrapper84.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution87 = gcdSolutionWrapper84.getSolution();
        java.lang.String str88 = gcdSolutionWrapper84.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution89 = gcdSolutionWrapper84.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution90 = gcdSolutionWrapper84.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper91 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution90);
        boolean boolean92 = gcdSolutionWrapper15.equals((java.lang.Object) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution95 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(52, (int) (short) -1);
        java.lang.String str96 = solution95.toString();
        gcdSolutionWrapper15.setSolution(solution95);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Solution[x=97, y=1]" + "'", str54, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Solution[x=97, y=1]" + "'", str71, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Solution[x=97, y=1]" + "'", str72, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Solution[x=97, y=1]" + "'", str73, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str85, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution86);
        org.junit.Assert.assertNotNull(solution87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str88, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution89);
        org.junit.Assert.assertNotNull(solution90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Solution[x=52, y=-1]" + "'", str96, "Solution[x=52, y=-1]");
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        solution15.setY((int) (byte) 10);
        gcdSolutionWrapper8.setSolution(solution15);
        gcdSolutionWrapper8.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, 35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution24);
        gcdSolutionWrapper8.setSolution(solution24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        java.lang.String str33 = equation31.toString();
        boolean boolean34 = solution27.equals((java.lang.Object) str33);
        int int35 = solution27.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str33, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, 10, (int) (byte) 1);
        int int4 = equation3.a();
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int10 = equation9.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        boolean boolean16 = gcdSolutionWrapper14.equals((java.lang.Object) 1);
        boolean boolean17 = equation9.equals((java.lang.Object) boolean16);
        int int18 = equation9.a();
        int int19 = equation9.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution21);
        gcdSolutionWrapper22.setGcd((int) ' ');
        gcdSolutionWrapper22.setGcd((int) (short) 1);
        int int27 = gcdSolutionWrapper22.getGcd();
        int int28 = gcdSolutionWrapper22.getGcd();
        boolean boolean29 = equation9.equals((java.lang.Object) int28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        solution35.setY((int) (byte) 1);
        gcdSolutionWrapper32.setSolution(solution35);
        boolean boolean40 = equation9.equals((java.lang.Object) gcdSolutionWrapper32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        int int43 = equation9.a();
        int int44 = equation9.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) (byte) 100, 32);
        int int49 = equation48.b();
        int int50 = equation48.a();
        int int51 = equation48.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation48);
        solution52.setY((-35));
        boolean boolean55 = equation9.equals((java.lang.Object) (-35));
        boolean boolean56 = equation3.equals((java.lang.Object) boolean55);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertNotNull(solution52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution23);
        int int25 = gcdSolutionWrapper24.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        boolean boolean39 = solution35.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper32.setSolution(solution35);
        int int41 = solution35.getX();
        java.lang.String str42 = solution35.toString();
        solution35.setX((int) (byte) 0);
        boolean boolean45 = gcdSolutionWrapper15.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper15.getSolution();
        gcdSolutionWrapper15.setGcd((int) (byte) 100);
        java.lang.Class<?> wildcardClass49 = gcdSolutionWrapper15.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(97, (int) (short) -1);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str8 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str8, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        boolean boolean21 = solution17.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper14.setSolution(solution17);
        int int23 = solution17.getX();
        java.lang.String str24 = solution17.toString();
        solution17.setX((int) (byte) 0);
        gcdSolutionWrapper4.setSolution(solution17);
        solution17.setX(10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 35);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int37 = equation3.a();
        int int38 = equation3.b();
        int int39 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper4.getSolution();
        java.lang.String str6 = gcdSolutionWrapper4.toString();
        java.lang.String str7 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=-1, y=52]]" + "'", str6, "GcdSolutionWrapper[gcd=0, solution=Solution[x=-1, y=52]]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=-1, y=52]]" + "'", str7, "GcdSolutionWrapper[gcd=0, solution=Solution[x=-1, y=52]]");
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 1, 0);
        int int27 = equation26.c();
        java.lang.String str28 = equation26.toString();
        java.lang.String str29 = equation26.toString();
        int int30 = equation26.a();
        boolean boolean31 = equation3.equals((java.lang.Object) equation26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int33 = solution32.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str28, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str29, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-35) + "'", int33 == (-35));
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        boolean boolean12 = gcdSolutionWrapper2.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper2.setGcd(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        int int20 = solution17.getX();
        int int21 = solution17.getY();
        solution17.setY((int) (short) 100);
        int int24 = solution17.getX();
        solution17.setY(52);
        java.lang.String str27 = solution17.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        int int33 = equation31.a();
        int int34 = equation31.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        boolean boolean36 = solution17.equals((java.lang.Object) equation31);
        gcdSolutionWrapper2.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper2.getSolution();
        gcdSolutionWrapper2.setGcd((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=97, y=52]" + "'", str27, "Solution[x=97, y=52]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertNotNull(solution39);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        gcdSolutionWrapper8.setGcd((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        boolean boolean19 = solution14.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper20.getSolution();
        java.lang.String str22 = gcdSolutionWrapper20.toString();
        gcdSolutionWrapper20.setGcd((int) (byte) 1);
        java.lang.String str25 = gcdSolutionWrapper20.toString();
        java.lang.String str26 = gcdSolutionWrapper20.toString();
        int int27 = gcdSolutionWrapper20.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        int int33 = equation31.b();
        int int34 = equation31.c();
        int int35 = equation31.c();
        boolean boolean36 = gcdSolutionWrapper20.equals((java.lang.Object) int35);
        gcdSolutionWrapper20.setGcd((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        boolean boolean42 = gcdSolutionWrapper20.equals((java.lang.Object) solution41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper20.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper20.getSolution();
        java.lang.Class<?> wildcardClass45 = gcdSolutionWrapper20.getClass();
        boolean boolean46 = gcdSolutionWrapper8.equals((java.lang.Object) wildcardClass45);
        int int47 = gcdSolutionWrapper8.getGcd();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str22, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str25, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str26, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        java.lang.String str20 = solution18.toString();
        boolean boolean22 = solution18.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper15.setSolution(solution18);
        int int24 = solution18.getX();
        boolean boolean25 = equation3.equals((java.lang.Object) solution18);
        java.lang.String str26 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int34 = solution33.getY();
        java.lang.String str35 = solution33.toString();
        solution33.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int42 = equation41.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation41);
        boolean boolean44 = solution33.equals((java.lang.Object) solution43);
        boolean boolean46 = solution43.equals((java.lang.Object) 0);
        boolean boolean47 = equation30.equals((java.lang.Object) solution43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int52 = equation51.c();
        int int53 = equation51.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int58 = solution57.getY();
        solution57.setY((int) (byte) 1);
        boolean boolean62 = solution57.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = gcdSolutionWrapper63.getSolution();
        java.lang.String str65 = gcdSolutionWrapper63.toString();
        gcdSolutionWrapper63.setGcd((int) (byte) 1);
        boolean boolean68 = equation51.equals((java.lang.Object) gcdSolutionWrapper63);
        boolean boolean69 = equation30.equals((java.lang.Object) equation51);
        int int70 = equation51.a();
        int int71 = equation51.b();
        boolean boolean72 = equation3.equals((java.lang.Object) int71);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution73 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str74 = solution73.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=97, y=1]" + "'", str20, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str26, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Solution[x=97, y=1]" + "'", str35, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str65, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(solution73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Solution[x=-1, y=0]" + "'", str74, "Solution[x=-1, y=0]");
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        gcdSolutionWrapper8.setGcd((int) (byte) 10);
        gcdSolutionWrapper8.setGcd(0);
        gcdSolutionWrapper8.setGcd((int) (byte) -1);
        int int15 = gcdSolutionWrapper8.getGcd();
        int int16 = gcdSolutionWrapper8.getGcd();
        int int17 = gcdSolutionWrapper8.getGcd();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, (int) (byte) -1);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, (int) ' ');
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int25 = equation24.c();
        int int26 = equation24.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        solution30.setY((int) (byte) 1);
        boolean boolean35 = solution30.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper36.getSolution();
        java.lang.String str38 = gcdSolutionWrapper36.toString();
        gcdSolutionWrapper36.setGcd((int) (byte) 1);
        boolean boolean41 = equation24.equals((java.lang.Object) gcdSolutionWrapper36);
        boolean boolean42 = equation3.equals((java.lang.Object) equation24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int44 = equation3.c();
        java.lang.String str45 = equation3.toString();
        int int46 = equation3.b();
        int int47 = equation3.a();
        int int48 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int57 = solution56.getY();
        solution56.setY((int) (byte) 1);
        boolean boolean61 = solution56.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution56);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = gcdSolutionWrapper62.getSolution();
        java.lang.String str64 = gcdSolutionWrapper62.toString();
        gcdSolutionWrapper62.setGcd((int) (byte) 1);
        boolean boolean67 = equation52.equals((java.lang.Object) gcdSolutionWrapper62);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = gcdSolutionWrapper62.getSolution();
        gcdSolutionWrapper62.setGcd((int) (byte) 100);
        gcdSolutionWrapper62.setGcd((int) (short) -1);
        java.lang.Class<?> wildcardClass73 = gcdSolutionWrapper62.getClass();
        boolean boolean74 = equation3.equals((java.lang.Object) wildcardClass73);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str38, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str45, "Equation[a=35, b=52, c=32]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(solution63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str64, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(solution68);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        gcdSolutionWrapper3.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper3.getSolution();
        int int9 = gcdSolutionWrapper3.getGcd();
        gcdSolutionWrapper3.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        solution16.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean23 = solution16.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper3.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution28);
        java.lang.String str34 = solution28.toString();
        gcdSolutionWrapper3.setSolution(solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        solution40.setY((int) (byte) 1);
        boolean boolean45 = solution40.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int50 = solution49.getY();
        java.lang.String str51 = solution49.toString();
        boolean boolean53 = solution49.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper46.setSolution(solution49);
        solution49.setX(1);
        boolean boolean57 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        gcdSolutionWrapper36.setGcd((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution60 = gcdSolutionWrapper36.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution64);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation69);
        java.lang.String str71 = equation69.toString();
        int int72 = equation69.a();
        java.lang.Object obj73 = null;
        boolean boolean74 = equation69.equals(obj73);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation69);
        boolean boolean76 = gcdSolutionWrapper65.equals((java.lang.Object) solution75);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution79 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (short) 10);
        solution79.setY(35);
        solution79.setX((-75));
        gcdSolutionWrapper65.setSolution(solution79);
        boolean boolean85 = gcdSolutionWrapper36.equals((java.lang.Object) solution79);
        org.junit.Assert.assertNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=1, y=1]" + "'", str34, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Solution[x=97, y=1]" + "'", str51, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(solution60);
        org.junit.Assert.assertNotNull(solution70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str71, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(solution75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', (int) '#', (int) (byte) 1);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution14);
        gcdSolutionWrapper15.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        java.lang.String str23 = solution21.toString();
        solution21.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int30 = equation29.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        boolean boolean32 = solution21.equals((java.lang.Object) solution31);
        boolean boolean34 = solution21.equals((java.lang.Object) false);
        int int35 = solution21.getX();
        gcdSolutionWrapper15.setSolution(solution21);
        boolean boolean37 = gcdSolutionWrapper2.equals((java.lang.Object) gcdSolutionWrapper15);
        gcdSolutionWrapper15.setGcd((-1));
        gcdSolutionWrapper15.setGcd(125);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertNull(solution18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=97, y=1]" + "'", str23, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', 0, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        int int11 = solution10.getX();
        int int12 = solution10.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution10);
        gcdSolutionWrapper13.setGcd((int) (short) 0);
        gcdSolutionWrapper13.setGcd((int) '4');
        int int18 = gcdSolutionWrapper13.getGcd();
        java.lang.String str19 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int23 = solution22.getX();
        int int24 = solution22.getX();
        gcdSolutionWrapper13.setSolution(solution22);
        boolean boolean26 = solution4.equals((java.lang.Object) gcdSolutionWrapper13);
        int int27 = gcdSolutionWrapper13.getGcd();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]" + "'", str19, "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        java.lang.String str7 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int12 = equation11.a();
        int int13 = equation11.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        solution17.setY((int) (byte) 1);
        boolean boolean22 = solution17.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper23.getSolution();
        java.lang.String str25 = gcdSolutionWrapper23.toString();
        gcdSolutionWrapper23.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper23.setSolution(solution30);
        boolean boolean32 = equation11.equals((java.lang.Object) gcdSolutionWrapper23);
        boolean boolean33 = solution2.equals((java.lang.Object) equation11);
        java.lang.String str34 = equation11.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=1, y=1]" + "'", str7, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str25, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Equation[a=32, b=52, c=100]" + "'", str34, "Equation[a=32, b=52, c=100]");
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean10 = solution3.equals((java.lang.Object) solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper11.getSolution();
        int int13 = solution12.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) 10, (int) (byte) 0);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) '#', 97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int8 = equation7.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        boolean boolean14 = gcdSolutionWrapper12.equals((java.lang.Object) 1);
        boolean boolean15 = equation7.equals((java.lang.Object) boolean14);
        int int16 = equation7.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        boolean boolean19 = equation3.equals((java.lang.Object) solution18);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        java.lang.String str10 = solution8.toString();
        gcdSolutionWrapper3.setSolution(solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int18 = equation17.c();
        int int19 = equation17.b();
        int int20 = equation17.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        gcdSolutionWrapper3.setSolution(solution21);
        int int23 = gcdSolutionWrapper3.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        java.lang.String str31 = solution30.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution30);
        boolean boolean33 = solution24.equals((java.lang.Object) solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(96, solution24);
        int int35 = gcdSolutionWrapper34.getGcd();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=97, y=1]" + "'", str10, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=0, y=0]" + "'", str31, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 96 + "'", int35 == 96);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (byte) 10, (int) (short) -1);
        int int4 = equation3.b();
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=100, b=10, c=-1]" + "'", str5, "Equation[a=100, b=10, c=-1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        solution2.setY((int) (byte) 1);
        int int6 = solution2.getY();
        solution2.setX((int) '#');
        solution2.setY((int) (short) 100);
        solution2.setY((-97));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        int int5 = gcdSolutionWrapper2.getGcd();
        int int6 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution11);
        java.lang.String str13 = gcdSolutionWrapper12.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper12.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int19 = equation18.c();
        int int20 = equation18.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int25 = solution24.getY();
        solution24.setY((int) (byte) 1);
        boolean boolean29 = solution24.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = gcdSolutionWrapper30.getSolution();
        java.lang.String str32 = gcdSolutionWrapper30.toString();
        gcdSolutionWrapper30.setGcd((int) (byte) 1);
        boolean boolean35 = equation18.equals((java.lang.Object) gcdSolutionWrapper30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        boolean boolean37 = gcdSolutionWrapper12.equals((java.lang.Object) solution36);
        boolean boolean38 = gcdSolutionWrapper2.equals((java.lang.Object) boolean37);
        int int39 = gcdSolutionWrapper2.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str13, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str32, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 32 + "'", int39 == 32);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 100, (int) (short) 0);
        int int3 = solution2.getX();
        int int4 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        boolean boolean34 = solution28.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper21.setSolution(solution28);
        gcdSolutionWrapper13.setSolution(solution28);
        java.lang.String str37 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation42);
        solution43.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution43);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation51);
        int int53 = solution52.getX();
        int int54 = solution52.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution52);
        int int56 = solution52.getX();
        gcdSolutionWrapper46.setSolution(solution52);
        java.lang.String str58 = gcdSolutionWrapper46.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation62);
        int int64 = equation62.a();
        boolean boolean65 = gcdSolutionWrapper46.equals((java.lang.Object) equation62);
        int int66 = equation62.a();
        boolean boolean67 = gcdSolutionWrapper13.equals((java.lang.Object) int66);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = gcdSolutionWrapper13.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation72 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution73 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation72);
        int int74 = solution73.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation78 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int79 = equation78.c();
        int int80 = equation78.c();
        int int81 = equation78.a();
        boolean boolean82 = solution73.equals((java.lang.Object) equation78);
        int int83 = equation78.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution84 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation78);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution85 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation78);
        int int86 = solution85.getY();
        boolean boolean87 = solution68.equals((java.lang.Object) int86);
        int int88 = solution68.getY();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=1]]" + "'", str37, "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertNotNull(solution52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=0]]" + "'", str58, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertNotNull(solution63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(solution68);
        org.junit.Assert.assertNotNull(solution73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(solution84);
        org.junit.Assert.assertNotNull(solution85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(10, (int) (byte) 100, (int) ' ');
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        int int10 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        int int12 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        solution18.setY((int) (byte) 1);
        boolean boolean23 = solution18.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution18);
        gcdSolutionWrapper25.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        java.lang.String str32 = solution31.toString();
        int int33 = solution31.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        int int39 = solution38.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution38);
        gcdSolutionWrapper34.setSolution(solution38);
        gcdSolutionWrapper25.setSolution(solution38);
        boolean boolean43 = equation8.equals((java.lang.Object) gcdSolutionWrapper25);
        java.lang.String str44 = equation8.toString();
        java.lang.String str45 = equation8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        boolean boolean47 = equation3.equals((java.lang.Object) solution46);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Solution[x=100, y=32]" + "'", str32, "Solution[x=100, y=32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-35) + "'", int39 == (-35));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str44, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str45, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-75), (int) (short) 0, 52);
        int int4 = equation3.b();
        int int5 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int9 = equation8.c();
        int int10 = equation8.a();
        int int11 = equation8.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int17 = equation16.c();
        int int18 = equation16.b();
        int int19 = equation16.c();
        boolean boolean20 = solution12.equals((java.lang.Object) equation16);
        boolean boolean21 = solution2.equals((java.lang.Object) boolean20);
        java.lang.String str22 = solution2.toString();
        solution2.setY((int) (short) 100);
        java.lang.String str25 = solution2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=97, y=1]" + "'", str22, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=97, y=100]" + "'", str25, "Solution[x=97, y=100]");
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        int int12 = gcdSolutionWrapper9.getGcd();
        int int13 = gcdSolutionWrapper9.getGcd();
        int int14 = gcdSolutionWrapper9.getGcd();
        int int15 = gcdSolutionWrapper9.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int11 = equation10.c();
        int int12 = equation10.c();
        int int13 = equation10.a();
        boolean boolean14 = solution5.equals((java.lang.Object) equation10);
        int int15 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int20 = solution19.getX();
        solution19.setY(1);
        solution19.setX((int) (short) 0);
        int int25 = solution19.getY();
        boolean boolean26 = solution5.equals((java.lang.Object) solution19);
        int int27 = solution19.getY();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, 125, (int) (short) 0);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        int int7 = solution3.getY();
        java.lang.String str8 = solution3.toString();
        solution3.setY(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper11.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean22 = solution17.equals((java.lang.Object) (byte) 10);
        solution17.setX((-1));
        boolean boolean25 = gcdSolutionWrapper11.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        int int32 = equation29.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        boolean boolean34 = gcdSolutionWrapper11.equals((java.lang.Object) equation29);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        gcdSolutionWrapper4.setGcd(52);
        java.lang.String str9 = gcdSolutionWrapper4.toString();
        int int10 = gcdSolutionWrapper4.getGcd();
        int int11 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 35);
        gcdSolutionWrapper4.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int20 = equation19.c();
        int int21 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        gcdSolutionWrapper4.setSolution(solution22);
        java.lang.Class<?> wildcardClass24 = solution22.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]" + "'", str9, "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.a();
        java.lang.Object obj7 = null;
        boolean boolean8 = equation3.equals(obj7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        boolean boolean18 = solution13.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        gcdSolutionWrapper20.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int27 = equation26.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution30);
        boolean boolean33 = gcdSolutionWrapper31.equals((java.lang.Object) 1);
        boolean boolean34 = equation26.equals((java.lang.Object) boolean33);
        boolean boolean35 = gcdSolutionWrapper20.equals((java.lang.Object) boolean33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int39 = solution38.getY();
        java.lang.String str40 = solution38.toString();
        solution38.setX((int) (short) 1);
        solution38.setX((int) (byte) 10);
        gcdSolutionWrapper20.setSolution(solution38);
        boolean boolean46 = equation3.equals((java.lang.Object) gcdSolutionWrapper20);
        int int47 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str5, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=97, y=1]" + "'", str40, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(solution48);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution6.setX(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        int int16 = solution15.getX();
        int int17 = solution15.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution15);
        boolean boolean20 = solution15.equals((java.lang.Object) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution22);
        boolean boolean24 = solution15.equals((java.lang.Object) (byte) 1);
        solution15.setX(35);
        solution15.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution15);
        boolean boolean30 = solution6.equals((java.lang.Object) solution15);
        int int31 = solution6.getY();
        int int32 = solution6.getX();
        solution6.setX((int) (short) 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 52);
        solution2.setY((-75));
        java.lang.String str5 = solution2.toString();
        solution2.setY((int) (short) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=-1, y=-75]" + "'", str5, "Solution[x=-1, y=-75]");
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        java.lang.String str6 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution3);
        java.lang.String str8 = gcdSolutionWrapper7.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        int int12 = solution11.getX();
        gcdSolutionWrapper7.setSolution(solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper7.getSolution();
        gcdSolutionWrapper7.setGcd((-97));
        gcdSolutionWrapper7.setGcd((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=97, y=1]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(solution14);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution4.setY((int) (byte) 10);
        int int7 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) '#', (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        solution20.setY((int) (byte) 1);
        boolean boolean25 = solution20.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper26.getSolution();
        java.lang.String str28 = gcdSolutionWrapper26.toString();
        gcdSolutionWrapper26.setGcd((int) (byte) 1);
        boolean boolean31 = equation16.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int36 = equation35.c();
        int int37 = equation35.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        boolean boolean39 = gcdSolutionWrapper26.equals((java.lang.Object) solution38);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str44 = equation43.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation43);
        solution45.setY((int) (byte) 10);
        gcdSolutionWrapper26.setSolution(solution45);
        boolean boolean49 = equation11.equals((java.lang.Object) gcdSolutionWrapper26);
        java.lang.String str50 = gcdSolutionWrapper26.toString();
        boolean boolean51 = solution4.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int56 = equation55.b();
        boolean boolean58 = equation55.equals((java.lang.Object) "Equation[a=97, b=-1, c=32]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation55);
        boolean boolean60 = gcdSolutionWrapper26.equals((java.lang.Object) solution59);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str28, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str44, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=10]]" + "'", str50, "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=10]]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(solution59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        int int10 = solution9.getX();
        boolean boolean11 = equation3.equals((java.lang.Object) solution9);
        int int12 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation16);
        java.lang.String str18 = equation16.toString();
        int int19 = equation16.a();
        java.lang.Object obj20 = null;
        boolean boolean21 = equation16.equals(obj20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution26);
        gcdSolutionWrapper33.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int40 = equation39.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution43);
        boolean boolean46 = gcdSolutionWrapper44.equals((java.lang.Object) 1);
        boolean boolean47 = equation39.equals((java.lang.Object) boolean46);
        boolean boolean48 = gcdSolutionWrapper33.equals((java.lang.Object) boolean46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        java.lang.String str53 = solution51.toString();
        solution51.setX((int) (short) 1);
        solution51.setX((int) (byte) 10);
        gcdSolutionWrapper33.setSolution(solution51);
        boolean boolean59 = equation16.equals((java.lang.Object) gcdSolutionWrapper33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int64 = equation63.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int69 = equation68.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation68);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution72);
        boolean boolean75 = gcdSolutionWrapper73.equals((java.lang.Object) 1);
        boolean boolean76 = equation68.equals((java.lang.Object) boolean75);
        int int77 = equation68.a();
        int int78 = equation68.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution80 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper81 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution80);
        gcdSolutionWrapper81.setGcd((int) ' ');
        gcdSolutionWrapper81.setGcd((int) (short) 1);
        int int86 = gcdSolutionWrapper81.getGcd();
        int int87 = gcdSolutionWrapper81.getGcd();
        boolean boolean88 = equation68.equals((java.lang.Object) int87);
        boolean boolean89 = equation63.equals((java.lang.Object) equation68);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution90 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation68);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution91 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation68);
        boolean boolean92 = equation16.equals((java.lang.Object) equation68);
        int int93 = equation16.a();
        boolean boolean94 = equation3.equals((java.lang.Object) equation16);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str18, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Solution[x=97, y=1]" + "'", str53, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 32 + "'", int64 == 32);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(solution70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(solution90);
        org.junit.Assert.assertNotNull(solution91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution6.setY((-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution10);
        gcdSolutionWrapper11.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        java.lang.String str18 = solution16.toString();
        gcdSolutionWrapper11.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper11.getSolution();
        int int21 = gcdSolutionWrapper11.getGcd();
        gcdSolutionWrapper11.setGcd((int) (short) 0);
        boolean boolean24 = solution6.equals((java.lang.Object) gcdSolutionWrapper11);
        int int25 = solution6.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=97, y=1]" + "'", str18, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 100, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution5);
        int int7 = gcdSolutionWrapper6.getGcd();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        int int5 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        java.lang.String str7 = gcdSolutionWrapper6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution9);
        gcdSolutionWrapper10.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        java.lang.String str17 = solution15.toString();
        gcdSolutionWrapper10.setSolution(solution15);
        int int19 = gcdSolutionWrapper10.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        gcdSolutionWrapper10.setSolution(solution22);
        int int25 = solution22.getY();
        boolean boolean26 = gcdSolutionWrapper6.equals((java.lang.Object) solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(96, solution22);
        gcdSolutionWrapper27.setGcd((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=32, y=10]]" + "'", str7, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=32, y=10]]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=97, y=1]" + "'", str17, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(97, (int) (short) 0);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (short) 0, (-97));
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int3 = solution2.getY();
        solution2.setY((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.c();
        int int6 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution7.setX(97);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(solution7);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-97), (int) (short) 100, (int) (byte) 100);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean11 = solution2.equals((java.lang.Object) equation10);
        int int12 = equation10.a();
        java.lang.String str13 = equation10.toString();
        java.lang.String str14 = equation10.toString();
        int int15 = equation10.c();
        java.lang.String str16 = equation10.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str13, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str14, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str16, "Equation[a=0, b=0, c=-1]");
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-97), 0, (int) (byte) 10);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) 0, 1);
        int int4 = equation3.b();
        int int5 = equation3.b();
        java.lang.Object obj6 = null;
        boolean boolean7 = equation3.equals(obj6);
        int int8 = equation3.a();
        int int9 = equation3.a();
        java.lang.String str10 = equation3.toString();
        java.lang.String str11 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Equation[a=100, b=0, c=1]" + "'", str10, "Equation[a=100, b=0, c=1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=100, b=0, c=1]" + "'", str11, "Equation[a=100, b=0, c=1]");
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 100);
        int int3 = solution2.getX();
        java.lang.String str4 = solution2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=-1, y=100]" + "'", str4, "Solution[x=-1, y=100]");
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        solution29.setX((int) (short) 1);
        boolean boolean35 = solution29.equals((java.lang.Object) true);
        solution29.setY(32);
        gcdSolutionWrapper13.setSolution(solution29);
        java.lang.String str39 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = gcdSolutionWrapper13.getSolution();
        java.lang.String str41 = gcdSolutionWrapper13.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=32]]" + "'", str39, "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=32]]");
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=32]]" + "'", str41, "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=32]]");
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-75), (-35), (-35));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        java.lang.Object obj5 = null;
        boolean boolean6 = equation3.equals(obj5);
        int int7 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        int int12 = equation11.b();
        java.lang.String str13 = equation11.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        int int17 = solution16.getX();
        boolean boolean18 = equation11.equals((java.lang.Object) solution16);
        boolean boolean19 = equation3.equals((java.lang.Object) boolean18);
        int int20 = equation3.a();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-35) + "'", int12 == (-35));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Equation[a=32, b=-35, c=1]" + "'", str13, "Equation[a=32, b=-35, c=1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.a();
        int int6 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int8 = equation3.b();
        int int9 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        int int19 = solution18.getX();
        int int20 = solution18.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution18);
        boolean boolean22 = solution12.equals((java.lang.Object) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        solution28.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation36);
        int int38 = solution37.getX();
        int int39 = solution37.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution37);
        int int41 = solution37.getX();
        gcdSolutionWrapper31.setSolution(solution37);
        boolean boolean43 = solution12.equals((java.lang.Object) gcdSolutionWrapper31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution47);
        gcdSolutionWrapper48.setGcd(97);
        gcdSolutionWrapper48.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int60 = solution59.getY();
        solution59.setY((int) (byte) 1);
        boolean boolean64 = solution59.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution59);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int69 = solution68.getY();
        java.lang.String str70 = solution68.toString();
        boolean boolean72 = solution68.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper65.setSolution(solution68);
        int int74 = solution68.getX();
        int int75 = solution68.getY();
        solution68.setY((int) (short) 10);
        solution68.setY(35);
        solution68.setX(0);
        boolean boolean82 = solution55.equals((java.lang.Object) solution68);
        gcdSolutionWrapper48.setSolution(solution55);
        solution55.setY((int) '4');
        gcdSolutionWrapper31.setSolution(solution55);
        boolean boolean87 = equation3.equals((java.lang.Object) solution55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution88 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Solution[x=97, y=1]" + "'", str70, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(solution88);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) '#', 97);
        int int4 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str12 = equation11.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution13);
        java.lang.String str15 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper14.getSolution();
        boolean boolean17 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        int int25 = solution24.getX();
        int int26 = solution24.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution24);
        gcdSolutionWrapper27.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean39 = solution34.equals((java.lang.Object) (byte) 10);
        gcdSolutionWrapper27.setSolution(solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution34);
        boolean boolean42 = equation3.equals((java.lang.Object) 32);
        int int43 = equation3.c();
        int int44 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str12, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str15, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution4);
        gcdSolutionWrapper10.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution16);
        gcdSolutionWrapper10.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper10.getSolution();
        java.lang.String str20 = gcdSolutionWrapper10.toString();
        gcdSolutionWrapper10.setGcd(125);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=100, y=32]]" + "'", str20, "GcdSolutionWrapper[gcd=52, solution=Solution[x=100, y=32]]");
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.b();
        java.lang.String str7 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int9 = solution8.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str7, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(10, (int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        int int8 = equation7.a();
        boolean boolean9 = equation3.equals((java.lang.Object) equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        gcdSolutionWrapper12.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        gcdSolutionWrapper12.setSolution(solution17);
        int int21 = gcdSolutionWrapper12.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int25 = solution24.getY();
        gcdSolutionWrapper12.setSolution(solution24);
        boolean boolean27 = equation3.equals((java.lang.Object) gcdSolutionWrapper12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int33 = solution32.getY();
        solution32.setY((int) (byte) 1);
        boolean boolean37 = solution32.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int42 = solution41.getY();
        java.lang.String str43 = solution41.toString();
        boolean boolean45 = solution41.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper38.setSolution(solution41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution41);
        int int48 = solution41.getX();
        gcdSolutionWrapper12.setSolution(solution41);
        int int50 = gcdSolutionWrapper12.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 10, (int) (short) 0);
        int int54 = solution53.getY();
        boolean boolean55 = gcdSolutionWrapper12.equals((java.lang.Object) solution53);
        java.lang.Class<?> wildcardClass56 = gcdSolutionWrapper12.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=97, y=1]" + "'", str43, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        java.lang.String str5 = solution2.toString();
        java.lang.String str6 = solution2.toString();
        solution2.setY((int) (short) 0);
        solution2.setY((int) (short) 10);
        int int11 = solution2.getY();
        solution2.setX(100);
        java.lang.String str14 = solution2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=100, y=10]" + "'", str14, "Solution[x=100, y=10]");
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (int) (short) 1);
        int int9 = solution8.getY();
        java.lang.String str10 = solution8.toString();
        boolean boolean11 = equation3.equals((java.lang.Object) str10);
        int int12 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=1, y=1]" + "'", str10, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        int int7 = equation3.a();
        int int8 = equation3.c();
        int int9 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        solution20.setY((int) (byte) 1);
        boolean boolean25 = solution20.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper26.getSolution();
        java.lang.String str28 = gcdSolutionWrapper26.toString();
        gcdSolutionWrapper26.setGcd((int) (byte) 1);
        boolean boolean31 = equation16.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution33);
        gcdSolutionWrapper34.setGcd((int) ' ');
        gcdSolutionWrapper34.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int42 = solution41.getY();
        java.lang.String str43 = solution41.toString();
        solution41.setX((int) (short) 1);
        boolean boolean47 = solution41.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper34.setSolution(solution41);
        gcdSolutionWrapper26.setSolution(solution41);
        int int50 = gcdSolutionWrapper26.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int57 = solution56.getY();
        solution56.setY((int) (byte) 1);
        gcdSolutionWrapper53.setSolution(solution56);
        gcdSolutionWrapper53.setGcd((int) (byte) 0);
        boolean boolean63 = gcdSolutionWrapper26.equals((java.lang.Object) (byte) 0);
        boolean boolean64 = solution12.equals((java.lang.Object) gcdSolutionWrapper26);
        gcdSolutionWrapper26.setGcd((int) '#');
        boolean boolean67 = equation3.equals((java.lang.Object) gcdSolutionWrapper26);
        int int68 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str28, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=97, y=1]" + "'", str43, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(97, (-97));
        solution2.setY((int) (byte) 100);
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        gcdSolutionWrapper4.setGcd(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper4.getSolution();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertNotNull(solution9);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        int int16 = gcdSolutionWrapper9.getGcd();
        java.lang.String str17 = gcdSolutionWrapper9.toString();
        int int18 = gcdSolutionWrapper9.getGcd();
        int int19 = gcdSolutionWrapper9.getGcd();
        java.lang.String str20 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int24 = solution23.getY();
        java.lang.String str25 = solution23.toString();
        solution23.setX((int) (short) 1);
        java.lang.String str28 = solution23.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int33 = equation32.a();
        int int34 = equation32.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int39 = solution38.getY();
        solution38.setY((int) (byte) 1);
        boolean boolean43 = solution38.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution38);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = gcdSolutionWrapper44.getSolution();
        java.lang.String str46 = gcdSolutionWrapper44.toString();
        gcdSolutionWrapper44.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper44.setSolution(solution51);
        boolean boolean53 = equation32.equals((java.lang.Object) gcdSolutionWrapper44);
        boolean boolean54 = solution23.equals((java.lang.Object) equation32);
        gcdSolutionWrapper9.setSolution(solution23);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str20, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Solution[x=97, y=1]" + "'", str25, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=1, y=1]" + "'", str28, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 32 + "'", int33 == 32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(solution45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str46, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, (int) (byte) 10);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int4 = equation3.b();
        java.lang.String str5 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 97);
        boolean boolean9 = equation3.equals((java.lang.Object) (byte) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=-35, b=1, c=-1]" + "'", str5, "Equation[a=-35, b=1, c=-1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 32, 0);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int9 = equation8.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int14 = equation13.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution17);
        boolean boolean20 = gcdSolutionWrapper18.equals((java.lang.Object) 1);
        boolean boolean21 = equation13.equals((java.lang.Object) boolean20);
        int int22 = equation13.a();
        int int23 = equation13.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        gcdSolutionWrapper26.setGcd((int) ' ');
        gcdSolutionWrapper26.setGcd((int) (short) 1);
        int int31 = gcdSolutionWrapper26.getGcd();
        int int32 = gcdSolutionWrapper26.getGcd();
        boolean boolean33 = equation13.equals((java.lang.Object) int32);
        boolean boolean34 = equation8.equals((java.lang.Object) equation13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        boolean boolean37 = equation3.equals((java.lang.Object) equation13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-1, b=32, c=0]" + "'", str4, "Equation[a=-1, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(solution38);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) (byte) 0, 10);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        boolean boolean39 = solution35.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper32.setSolution(solution35);
        int int41 = solution35.getX();
        java.lang.String str42 = solution35.toString();
        solution35.setX((int) (byte) 0);
        boolean boolean45 = gcdSolutionWrapper15.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper15.getSolution();
        gcdSolutionWrapper15.setGcd((int) (byte) 100);
        java.lang.String str49 = gcdSolutionWrapper15.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GcdSolutionWrapper[gcd=100, solution=Solution[x=97, y=1]]" + "'", str49, "GcdSolutionWrapper[gcd=100, solution=Solution[x=97, y=1]]");
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.a();
        java.lang.Object obj7 = null;
        boolean boolean8 = equation3.equals(obj7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        boolean boolean18 = solution13.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        gcdSolutionWrapper20.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int27 = equation26.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution30);
        boolean boolean33 = gcdSolutionWrapper31.equals((java.lang.Object) 1);
        boolean boolean34 = equation26.equals((java.lang.Object) boolean33);
        boolean boolean35 = gcdSolutionWrapper20.equals((java.lang.Object) boolean33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int39 = solution38.getY();
        java.lang.String str40 = solution38.toString();
        solution38.setX((int) (short) 1);
        solution38.setX((int) (byte) 10);
        gcdSolutionWrapper20.setSolution(solution38);
        boolean boolean46 = equation3.equals((java.lang.Object) gcdSolutionWrapper20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int51 = equation50.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int56 = equation55.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper60 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution59);
        boolean boolean62 = gcdSolutionWrapper60.equals((java.lang.Object) 1);
        boolean boolean63 = equation55.equals((java.lang.Object) boolean62);
        int int64 = equation55.a();
        int int65 = equation55.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution67 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution67);
        gcdSolutionWrapper68.setGcd((int) ' ');
        gcdSolutionWrapper68.setGcd((int) (short) 1);
        int int73 = gcdSolutionWrapper68.getGcd();
        int int74 = gcdSolutionWrapper68.getGcd();
        boolean boolean75 = equation55.equals((java.lang.Object) int74);
        boolean boolean76 = equation50.equals((java.lang.Object) equation55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution77 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution78 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation55);
        boolean boolean79 = equation3.equals((java.lang.Object) equation55);
        int int80 = equation55.a();
        java.lang.String str81 = equation55.toString();
        java.lang.String str82 = equation55.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str5, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=97, y=1]" + "'", str40, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(solution57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(solution77);
        org.junit.Assert.assertNotNull(solution78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str81, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str82, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) 'a', (int) (byte) 0);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int22 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int24 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int26 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (short) 100);
        int int3 = solution2.getX();
        int int4 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        gcdSolutionWrapper8.setGcd((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 100);
        gcdSolutionWrapper8.setSolution(solution15);
        java.lang.Class<?> wildcardClass17 = gcdSolutionWrapper8.getClass();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper4.getSolution();
        java.lang.String str8 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper4.getSolution();
        java.lang.String str12 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str12, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) 1, 52);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        boolean boolean14 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int19 = equation18.c();
        int int20 = equation18.b();
        java.lang.Class<?> wildcardClass21 = equation18.getClass();
        boolean boolean22 = equation3.equals((java.lang.Object) wildcardClass21);
        java.lang.String str23 = equation3.toString();
        int int24 = equation3.b();
        int int25 = equation3.a();
        int int26 = equation3.c();
        int int27 = equation3.a();
        int int28 = equation3.c();
        int int29 = equation3.c();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str23, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (byte) 1);
        solution2.setY((int) (byte) 100);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        int int7 = solution6.getX();
        int int8 = solution6.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution6);
        java.lang.String str10 = solution6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(52, solution6);
        java.lang.String str12 = gcdSolutionWrapper11.toString();
        boolean boolean14 = gcdSolutionWrapper11.equals((java.lang.Object) "Solution[x=10, y=97]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=0, y=0]" + "'", str10, "Solution[x=0, y=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]" + "'", str12, "GcdSolutionWrapper[gcd=52, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) '4', 52);
        java.lang.Object obj7 = null;
        boolean boolean8 = equation6.equals(obj7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation6);
        boolean boolean10 = solution2.equals((java.lang.Object) solution9);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 10, (int) (byte) -1, (int) (byte) 10);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 35);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-35), (int) '4');
        java.lang.String str4 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=-35, y=52]" + "'", str4, "Solution[x=-35, y=52]");
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 1, (int) (byte) 100);
        solution2.setX((int) 'a');
        int int5 = solution2.getY();
        java.lang.String str6 = solution2.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=100]" + "'", str6, "Solution[x=97, y=100]");
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        int int5 = equation3.a();
        int int6 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int12 = equation11.c();
        int int13 = equation11.b();
        int int14 = equation11.c();
        boolean boolean15 = solution7.equals((java.lang.Object) equation11);
        java.lang.String str16 = equation11.toString();
        int int17 = equation11.b();
        java.lang.String str18 = equation11.toString();
        int int19 = equation11.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str16, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str18, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-75), (int) (short) 10, (-35));
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, 96);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int8 = solution7.getY();
        int int9 = solution7.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        java.lang.String str18 = solution16.toString();
        solution16.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int25 = equation24.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        boolean boolean27 = solution16.equals((java.lang.Object) solution26);
        boolean boolean29 = solution26.equals((java.lang.Object) 0);
        boolean boolean30 = equation13.equals((java.lang.Object) solution26);
        boolean boolean32 = solution26.equals((java.lang.Object) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation37);
        solution38.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution38);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation45);
        solution46.setY((int) (byte) 10);
        boolean boolean49 = solution38.equals((java.lang.Object) (byte) 10);
        boolean boolean50 = solution26.equals((java.lang.Object) (byte) 10);
        int int51 = solution26.getX();
        solution26.setY((int) (byte) 1);
        solution26.setY((-1));
        java.lang.String str56 = solution26.toString();
        boolean boolean57 = solution7.equals((java.lang.Object) solution26);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-35) + "'", int8 == (-35));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=97, y=1]" + "'", str18, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Solution[x=0, y=-1]" + "'", str56, "Solution[x=0, y=-1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 1, (int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        java.lang.String str6 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=100]]" + "'", str6, "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=100]]");
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        gcdSolutionWrapper3.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper3.getSolution();
        int int9 = gcdSolutionWrapper3.getGcd();
        gcdSolutionWrapper3.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation15);
        solution16.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean23 = solution16.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper3.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution28);
        java.lang.String str34 = solution28.toString();
        gcdSolutionWrapper3.setSolution(solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution28);
        java.lang.Class<?> wildcardClass37 = gcdSolutionWrapper36.getClass();
        org.junit.Assert.assertNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=1, y=1]" + "'", str34, "Solution[x=1, y=1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution21);
        gcdSolutionWrapper22.setGcd((int) ' ');
        gcdSolutionWrapper22.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        solution29.setX((int) (short) 1);
        boolean boolean35 = solution29.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper22.setSolution(solution29);
        gcdSolutionWrapper14.setSolution(solution29);
        int int38 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution40);
        boolean boolean43 = gcdSolutionWrapper41.equals((java.lang.Object) 1);
        java.lang.String str44 = gcdSolutionWrapper41.toString();
        gcdSolutionWrapper41.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper41.setSolution(solution49);
        int int51 = solution49.getX();
        gcdSolutionWrapper14.setSolution(solution49);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution49);
        solution49.setX((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str44, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        java.lang.String str10 = solution8.toString();
        gcdSolutionWrapper3.setSolution(solution8);
        int int12 = gcdSolutionWrapper3.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        gcdSolutionWrapper3.setSolution(solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution19);
        gcdSolutionWrapper20.setGcd((int) ' ');
        gcdSolutionWrapper20.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        java.lang.String str29 = solution27.toString();
        solution27.setX((int) (short) 1);
        boolean boolean33 = solution27.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper20.setSolution(solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution36);
        boolean boolean39 = gcdSolutionWrapper37.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution41);
        gcdSolutionWrapper42.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int48 = solution47.getY();
        java.lang.String str49 = solution47.toString();
        gcdSolutionWrapper42.setSolution(solution47);
        gcdSolutionWrapper37.setSolution(solution47);
        int int52 = solution47.getY();
        java.lang.String str53 = solution47.toString();
        gcdSolutionWrapper20.setSolution(solution47);
        gcdSolutionWrapper3.setSolution(solution47);
        gcdSolutionWrapper3.setGcd(1);
        int int58 = gcdSolutionWrapper3.getGcd();
        java.lang.String str59 = gcdSolutionWrapper3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution63);
        java.lang.String str65 = gcdSolutionWrapper64.toString();
        gcdSolutionWrapper64.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation71);
        solution72.setY((int) (byte) 10);
        int int75 = solution72.getY();
        gcdSolutionWrapper64.setSolution(solution72);
        gcdSolutionWrapper3.setSolution(solution72);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution78 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper79 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution78);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=97, y=1]" + "'", str10, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=97, y=1]" + "'", str29, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Solution[x=97, y=1]" + "'", str49, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Solution[x=97, y=1]" + "'", str53, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str59, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str65, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(solution78);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, 97, 32);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        int int7 = equation3.a();
        int int8 = equation3.c();
        int int9 = equation3.b();
        int int10 = equation3.b();
        java.lang.String str11 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str11, "Equation[a=97, b=0, c=52]");
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        gcdSolutionWrapper10.setGcd((-35));
        gcdSolutionWrapper10.setGcd((int) (byte) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        solution22.setY((int) (byte) 1);
        boolean boolean27 = solution22.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = gcdSolutionWrapper28.getSolution();
        java.lang.String str30 = gcdSolutionWrapper28.toString();
        gcdSolutionWrapper28.setGcd((int) (byte) 1);
        boolean boolean33 = equation18.equals((java.lang.Object) gcdSolutionWrapper28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int38 = equation37.c();
        int int39 = equation37.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation37);
        boolean boolean41 = gcdSolutionWrapper28.equals((java.lang.Object) solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int46 = equation45.c();
        int int47 = equation45.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        solution51.setY((int) (byte) 1);
        boolean boolean56 = solution51.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper57.getSolution();
        java.lang.String str59 = gcdSolutionWrapper57.toString();
        gcdSolutionWrapper57.setGcd((int) (byte) 1);
        boolean boolean62 = equation45.equals((java.lang.Object) gcdSolutionWrapper57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation45);
        int int64 = solution63.getY();
        boolean boolean65 = gcdSolutionWrapper28.equals((java.lang.Object) int64);
        java.lang.String str66 = gcdSolutionWrapper28.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution67 = gcdSolutionWrapper28.getSolution();
        gcdSolutionWrapper28.setGcd((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int74 = solution73.getY();
        java.lang.String str75 = solution73.toString();
        solution73.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper78 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution73);
        int int79 = gcdSolutionWrapper78.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution80 = gcdSolutionWrapper78.getSolution();
        java.lang.String str81 = solution80.toString();
        gcdSolutionWrapper28.setSolution(solution80);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation86 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 0, 97);
        boolean boolean87 = solution80.equals((java.lang.Object) 0);
        gcdSolutionWrapper10.setSolution(solution80);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper89 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-97), solution80);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str30, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str59, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(solution63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-35) + "'", int64 == (-35));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str66, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution67);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Solution[x=97, y=1]" + "'", str75, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-35) + "'", int79 == (-35));
        org.junit.Assert.assertNotNull(solution80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Solution[x=1, y=1]" + "'", str81, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int4 = equation3.b();
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.a();
        int int7 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=-35, b=1, c=-1]" + "'", str5, "Equation[a=-35, b=1, c=-1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-35) + "'", int6 == (-35));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        java.lang.String str10 = equation8.toString();
        int int11 = equation8.a();
        java.lang.Object obj12 = null;
        boolean boolean13 = equation8.equals(obj12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        boolean boolean15 = gcdSolutionWrapper4.equals((java.lang.Object) solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution17);
        boolean boolean20 = gcdSolutionWrapper18.equals((java.lang.Object) 1);
        java.lang.String str21 = gcdSolutionWrapper18.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper18.getSolution();
        gcdSolutionWrapper18.setGcd((int) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution27);
        boolean boolean30 = gcdSolutionWrapper28.equals((java.lang.Object) 1);
        java.lang.String str31 = gcdSolutionWrapper28.toString();
        gcdSolutionWrapper28.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper28.setSolution(solution36);
        int int38 = solution36.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution36);
        java.lang.String str40 = solution36.toString();
        boolean boolean41 = gcdSolutionWrapper18.equals((java.lang.Object) solution36);
        solution36.setY((int) (byte) 10);
        int int44 = solution36.getX();
        int int45 = solution36.getY();
        gcdSolutionWrapper4.setSolution(solution36);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str10, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str21, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertNull(solution22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str31, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=100, y=-1]" + "'", str40, "Solution[x=100, y=-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 32, 0);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        int int12 = solution11.getX();
        int int13 = solution11.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution11);
        gcdSolutionWrapper14.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int21 = solution20.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution20);
        boolean boolean23 = gcdSolutionWrapper14.equals((java.lang.Object) solution20);
        java.lang.String str24 = solution20.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution20);
        boolean boolean26 = equation3.equals((java.lang.Object) gcdSolutionWrapper25);
        int int27 = equation3.a();
        int int28 = equation3.c();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-1, b=32, c=0]" + "'", str4, "Equation[a=-1, b=32, c=0]");
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=1, y=52]" + "'", str24, "Solution[x=1, y=52]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int5 = equation4.c();
        int int6 = equation4.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation4.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper24.getSolution();
        int int26 = solution25.getX();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        gcdSolutionWrapper11.setGcd(32);
        gcdSolutionWrapper11.setGcd(96);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        int int24 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int29 = equation28.c();
        int int30 = equation28.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int35 = solution34.getY();
        solution34.setY((int) (byte) 1);
        boolean boolean39 = solution34.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = gcdSolutionWrapper40.getSolution();
        java.lang.String str42 = gcdSolutionWrapper40.toString();
        gcdSolutionWrapper40.setGcd((int) (byte) 1);
        boolean boolean45 = equation28.equals((java.lang.Object) gcdSolutionWrapper40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper40.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper40.getSolution();
        boolean boolean48 = equation3.equals((java.lang.Object) solution47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int53 = equation52.c();
        boolean boolean55 = equation52.equals((java.lang.Object) false);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation60 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int65 = solution64.getY();
        solution64.setY((int) (byte) 1);
        boolean boolean69 = solution64.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution64);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = gcdSolutionWrapper70.getSolution();
        java.lang.String str72 = gcdSolutionWrapper70.toString();
        gcdSolutionWrapper70.setGcd((int) (byte) 1);
        boolean boolean75 = equation60.equals((java.lang.Object) gcdSolutionWrapper70);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution76 = gcdSolutionWrapper70.getSolution();
        gcdSolutionWrapper70.setGcd((int) (byte) 100);
        gcdSolutionWrapper70.setGcd((int) (short) 10);
        boolean boolean81 = solution56.equals((java.lang.Object) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution85 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper86 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution85);
        gcdSolutionWrapper86.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution89 = gcdSolutionWrapper86.getSolution();
        boolean boolean90 = solution56.equals((java.lang.Object) solution89);
        boolean boolean91 = solution47.equals((java.lang.Object) solution89);
        solution47.setY(0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str42, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(solution56);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(solution71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str72, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(solution76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(solution89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        int int12 = gcdSolutionWrapper11.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper11.getSolution();
        gcdSolutionWrapper11.setGcd(97);
        int int16 = gcdSolutionWrapper11.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 10, 0, (int) (short) 10);
        int int4 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, 0, (-75));
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=0, c=-75]" + "'", str4, "Equation[a=0, b=0, c=-75]");
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) (byte) 100, 32);
        int int4 = equation3.b();
        int int5 = equation3.a();
        int int6 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        solution12.setY((int) (byte) 1);
        gcdSolutionWrapper9.setSolution(solution12);
        int int17 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        java.lang.String str22 = solution20.toString();
        solution20.setX((int) (short) 1);
        boolean boolean26 = solution20.equals((java.lang.Object) (-1.0f));
        java.lang.String str27 = solution20.toString();
        java.lang.String str28 = solution20.toString();
        gcdSolutionWrapper9.setSolution(solution20);
        int int30 = gcdSolutionWrapper9.getGcd();
        gcdSolutionWrapper9.setGcd((int) 'a');
        gcdSolutionWrapper9.setGcd((int) ' ');
        boolean boolean35 = equation3.equals((java.lang.Object) gcdSolutionWrapper9);
        int int36 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution37.setY((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=97, y=1]" + "'", str22, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=1, y=1]" + "'", str27, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=1, y=1]" + "'", str28, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(solution37);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) 'a');
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        solution6.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        solution14.setY((int) (byte) 10);
        boolean boolean17 = solution6.equals((java.lang.Object) (byte) 10);
        solution6.setY((int) ' ');
        int int20 = solution6.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution6);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str12 = equation11.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution13);
        java.lang.String str15 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper14.getSolution();
        boolean boolean17 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        int int25 = solution24.getX();
        int int26 = solution24.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution24);
        gcdSolutionWrapper27.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean39 = solution34.equals((java.lang.Object) (byte) 10);
        gcdSolutionWrapper27.setSolution(solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution34);
        boolean boolean42 = equation3.equals((java.lang.Object) 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution46);
        gcdSolutionWrapper47.setGcd(97);
        gcdSolutionWrapper47.setGcd(0);
        boolean boolean52 = equation3.equals((java.lang.Object) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution54);
        gcdSolutionWrapper55.setGcd((int) ' ');
        gcdSolutionWrapper55.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution60 = gcdSolutionWrapper55.getSolution();
        int int61 = gcdSolutionWrapper55.getGcd();
        gcdSolutionWrapper55.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str68 = equation67.toString();
        boolean boolean69 = gcdSolutionWrapper55.equals((java.lang.Object) equation67);
        java.lang.String str70 = gcdSolutionWrapper55.toString();
        gcdSolutionWrapper55.setGcd(97);
        boolean boolean73 = equation3.equals((java.lang.Object) gcdSolutionWrapper55);
        java.lang.String str74 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str12, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str15, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(solution60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str68, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=null]" + "'", str70, "GcdSolutionWrapper[gcd=0, solution=null]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str74, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution75);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int6 = equation5.c();
        int int7 = equation5.b();
        int int8 = equation5.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        java.lang.String str10 = solution9.toString();
        int int11 = solution9.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=0, y=-35]" + "'", str10, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-35) + "'", int11 == (-35));
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        java.lang.String str11 = solution9.toString();
        solution9.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution9);
        int int15 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation20);
        solution21.setY((int) (byte) 10);
        gcdSolutionWrapper14.setSolution(solution21);
        boolean boolean25 = equation3.equals((java.lang.Object) solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int29 = solution28.getY();
        java.lang.String str30 = solution28.toString();
        solution28.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean37 = solution28.equals((java.lang.Object) equation36);
        int int38 = equation36.c();
        int int39 = equation36.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int43 = solution42.getY();
        java.lang.String str44 = solution42.toString();
        solution42.setX((int) (short) 1);
        solution42.setX((int) (byte) 1);
        boolean boolean49 = equation36.equals((java.lang.Object) (byte) 1);
        java.lang.String str50 = equation36.toString();
        boolean boolean51 = equation3.equals((java.lang.Object) equation36);
        int int52 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-35) + "'", int15 == (-35));
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Solution[x=97, y=1]" + "'", str30, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Solution[x=97, y=1]" + "'", str44, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str50, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        int int11 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        gcdSolutionWrapper2.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution18);
        gcdSolutionWrapper19.setGcd((int) ' ');
        gcdSolutionWrapper19.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        java.lang.String str28 = solution26.toString();
        solution26.setX((int) (short) 1);
        boolean boolean32 = solution26.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper19.setSolution(solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution35);
        boolean boolean38 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution40);
        gcdSolutionWrapper41.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int47 = solution46.getY();
        java.lang.String str48 = solution46.toString();
        gcdSolutionWrapper41.setSolution(solution46);
        gcdSolutionWrapper36.setSolution(solution46);
        int int51 = solution46.getY();
        java.lang.String str52 = solution46.toString();
        gcdSolutionWrapper19.setSolution(solution46);
        gcdSolutionWrapper2.setSolution(solution46);
        gcdSolutionWrapper2.setGcd(1);
        boolean boolean58 = gcdSolutionWrapper2.equals((java.lang.Object) false);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int62 = solution61.getY();
        java.lang.String str63 = solution61.toString();
        java.lang.String str64 = solution61.toString();
        gcdSolutionWrapper2.setSolution(solution61);
        java.lang.String str66 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(52, (-1));
        java.lang.String str70 = solution69.toString();
        gcdSolutionWrapper2.setSolution(solution69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=97, y=1]" + "'", str28, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=97, y=1]" + "'", str48, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=97, y=1]" + "'", str52, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Solution[x=97, y=1]" + "'", str63, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str66, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Solution[x=52, y=-1]" + "'", str70, "Solution[x=52, y=-1]");
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) '#');
        gcdSolutionWrapper8.setGcd(96);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', 0, (-1));
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=97, b=0, c=-1]" + "'", str4, "Equation[a=97, b=0, c=-1]");
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, (int) (short) 10);
        java.lang.String str3 = solution2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=10, y=10]" + "'", str3, "Solution[x=10, y=10]");
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        int int21 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        int int29 = solution28.getX();
        int int30 = solution28.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution28);
        solution28.setY((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '#', solution28);
        int int35 = solution28.getX();
        boolean boolean36 = gcdSolutionWrapper15.equals((java.lang.Object) int35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper15.getSolution();
        java.lang.String str38 = gcdSolutionWrapper15.toString();
        int int39 = gcdSolutionWrapper15.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str38, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(96, 35);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        int int11 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        gcdSolutionWrapper2.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution18);
        gcdSolutionWrapper19.setGcd((int) ' ');
        gcdSolutionWrapper19.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        java.lang.String str28 = solution26.toString();
        solution26.setX((int) (short) 1);
        boolean boolean32 = solution26.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper19.setSolution(solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution35);
        boolean boolean38 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution40);
        gcdSolutionWrapper41.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int47 = solution46.getY();
        java.lang.String str48 = solution46.toString();
        gcdSolutionWrapper41.setSolution(solution46);
        gcdSolutionWrapper36.setSolution(solution46);
        int int51 = solution46.getY();
        java.lang.String str52 = solution46.toString();
        gcdSolutionWrapper19.setSolution(solution46);
        gcdSolutionWrapper2.setSolution(solution46);
        gcdSolutionWrapper2.setGcd(1);
        gcdSolutionWrapper2.setGcd((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=97, y=1]" + "'", str28, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=97, y=1]" + "'", str48, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=97, y=1]" + "'", str52, "Solution[x=97, y=1]");
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.c();
        int int6 = equation3.b();
        int int7 = equation3.c();
        int int8 = equation3.a();
        int int9 = equation3.c();
        java.lang.String str10 = equation3.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Equation[a=52, b=52, c=0]" + "'", str10, "Equation[a=52, b=52, c=0]");
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int11 = equation10.c();
        int int12 = equation10.c();
        int int13 = equation10.a();
        boolean boolean14 = solution5.equals((java.lang.Object) equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution15);
        int int17 = gcdSolutionWrapper16.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper16.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        java.lang.String str23 = solution21.toString();
        solution21.setX((int) (short) 1);
        solution21.setX((int) (byte) 10);
        java.lang.String str28 = solution21.toString();
        gcdSolutionWrapper16.setSolution(solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution31);
        gcdSolutionWrapper32.setGcd((int) ' ');
        gcdSolutionWrapper32.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper32.getSolution();
        int int38 = gcdSolutionWrapper32.getGcd();
        gcdSolutionWrapper32.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str45 = equation44.toString();
        boolean boolean46 = gcdSolutionWrapper32.equals((java.lang.Object) equation44);
        java.lang.String str47 = gcdSolutionWrapper32.toString();
        boolean boolean48 = gcdSolutionWrapper16.equals((java.lang.Object) gcdSolutionWrapper32);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=97, y=1]" + "'", str23, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=10, y=1]" + "'", str28, "Solution[x=10, y=1]");
        org.junit.Assert.assertNull(solution37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str45, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=null]" + "'", str47, "GcdSolutionWrapper[gcd=0, solution=null]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        gcdSolutionWrapper3.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        solution10.setX((int) (short) 1);
        boolean boolean16 = solution10.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper3.setSolution(solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution19);
        boolean boolean22 = gcdSolutionWrapper20.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution24);
        gcdSolutionWrapper25.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        java.lang.String str32 = solution30.toString();
        gcdSolutionWrapper25.setSolution(solution30);
        gcdSolutionWrapper20.setSolution(solution30);
        int int35 = solution30.getY();
        java.lang.String str36 = solution30.toString();
        gcdSolutionWrapper3.setSolution(solution30);
        int int38 = solution30.getX();
        int int39 = solution30.getX();
        int int40 = solution30.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '#', solution30);
        int int42 = gcdSolutionWrapper41.getGcd();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Solution[x=97, y=1]" + "'", str32, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Solution[x=97, y=1]" + "'", str36, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) '#', (int) (short) -1);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(35, 97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution11);
        boolean boolean13 = equation3.equals((java.lang.Object) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', 52, 100);
        int int4 = equation3.b();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        boolean boolean18 = solution13.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper19.getSolution();
        java.lang.String str21 = gcdSolutionWrapper19.toString();
        gcdSolutionWrapper19.setGcd((int) (byte) 1);
        boolean boolean24 = equation9.equals((java.lang.Object) gcdSolutionWrapper19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int29 = equation28.c();
        int int30 = equation28.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation28);
        boolean boolean32 = gcdSolutionWrapper19.equals((java.lang.Object) solution31);
        boolean boolean34 = gcdSolutionWrapper19.equals((java.lang.Object) (short) 0);
        int int35 = gcdSolutionWrapper19.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution37);
        gcdSolutionWrapper38.setGcd((int) ' ');
        gcdSolutionWrapper38.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int46 = solution45.getY();
        java.lang.String str47 = solution45.toString();
        solution45.setX((int) (short) 1);
        boolean boolean51 = solution45.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper38.setSolution(solution45);
        boolean boolean53 = gcdSolutionWrapper19.equals((java.lang.Object) gcdSolutionWrapper38);
        int int54 = gcdSolutionWrapper38.getGcd();
        gcdSolutionWrapper38.setGcd((int) (short) 0);
        boolean boolean57 = equation3.equals((java.lang.Object) (short) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str21, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Solution[x=97, y=1]" + "'", str47, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) (short) 10, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 35);
        int int7 = solution6.getY();
        boolean boolean8 = equation3.equals((java.lang.Object) int7);
        int int9 = equation3.a();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int6 = solution5.getY();
        java.lang.String str7 = solution5.toString();
        solution5.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        int int12 = solution5.getY();
        java.lang.String str13 = solution5.toString();
        int int14 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=97, y=1]" + "'", str7, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=1, y=1]" + "'", str13, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', 52);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, (int) ' ', (int) 'a');
        int int4 = equation3.c();
        int int5 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, 1, 32);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        int int11 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        gcdSolutionWrapper2.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution18);
        gcdSolutionWrapper19.setGcd((int) ' ');
        gcdSolutionWrapper19.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        java.lang.String str28 = solution26.toString();
        solution26.setX((int) (short) 1);
        boolean boolean32 = solution26.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper19.setSolution(solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution35);
        boolean boolean38 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution40);
        gcdSolutionWrapper41.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int47 = solution46.getY();
        java.lang.String str48 = solution46.toString();
        gcdSolutionWrapper41.setSolution(solution46);
        gcdSolutionWrapper36.setSolution(solution46);
        int int51 = solution46.getY();
        java.lang.String str52 = solution46.toString();
        gcdSolutionWrapper19.setSolution(solution46);
        gcdSolutionWrapper2.setSolution(solution46);
        gcdSolutionWrapper2.setGcd(1);
        boolean boolean58 = gcdSolutionWrapper2.equals((java.lang.Object) false);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = gcdSolutionWrapper2.getSolution();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Solution[x=97, y=1]" + "'", str28, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=97, y=1]" + "'", str48, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=97, y=1]" + "'", str52, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(solution59);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) '4');
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, 96, (int) (byte) 1);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        int int8 = gcdSolutionWrapper2.getGcd();
        gcdSolutionWrapper2.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str15 = equation14.toString();
        boolean boolean16 = gcdSolutionWrapper2.equals((java.lang.Object) equation14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        int int19 = equation14.c();
        java.lang.String str20 = equation14.toString();
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str15, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str20, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, (int) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution5);
        gcdSolutionWrapper6.setGcd((int) ' ');
        gcdSolutionWrapper6.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper6.getSolution();
        int int12 = gcdSolutionWrapper6.getGcd();
        java.lang.Class<?> wildcardClass13 = gcdSolutionWrapper6.getClass();
        boolean boolean14 = solution3.equals((java.lang.Object) gcdSolutionWrapper6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution3);
        org.junit.Assert.assertNull(solution11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 1, 0);
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        java.lang.String str6 = equation3.toString();
        int int7 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str5, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=52, b=1, c=0]" + "'", str6, "Equation[a=52, b=1, c=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, (int) (byte) -1, (-35));
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, 10, (int) (byte) 1);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        int int10 = equation8.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        solution11.setY(0);
        java.lang.String str14 = solution11.toString();
        boolean boolean15 = equation3.equals((java.lang.Object) solution11);
        int int16 = solution11.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=0, y=0]" + "'", str14, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.c();
        int int7 = equation3.c();
        int int8 = equation3.a();
        int int9 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        solution17.setY((int) (byte) 1);
        boolean boolean22 = solution17.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper23.getSolution();
        java.lang.String str25 = gcdSolutionWrapper23.toString();
        gcdSolutionWrapper23.setGcd((int) (byte) 1);
        boolean boolean28 = equation13.equals((java.lang.Object) gcdSolutionWrapper23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution30);
        gcdSolutionWrapper31.setGcd((int) ' ');
        gcdSolutionWrapper31.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int39 = solution38.getY();
        java.lang.String str40 = solution38.toString();
        solution38.setX((int) (short) 1);
        boolean boolean44 = solution38.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper31.setSolution(solution38);
        gcdSolutionWrapper23.setSolution(solution38);
        boolean boolean47 = equation3.equals((java.lang.Object) solution38);
        java.lang.String str48 = solution38.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str25, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=97, y=1]" + "'", str40, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=1, y=1]" + "'", str48, "Solution[x=1, y=1]");
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) (short) 0, 97);
        java.lang.String str5 = equation4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution6);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=35, b=0, c=97]" + "'", str5, "Equation[a=35, b=0, c=97]");
        org.junit.Assert.assertNotNull(solution6);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean20 = solution15.equals((java.lang.Object) (byte) 10);
        gcdSolutionWrapper8.setSolution(solution15);
        int int22 = solution15.getX();
        solution15.setY((int) '4');
        solution15.setY(35);
        java.lang.String str27 = solution15.toString();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=-1, y=35]" + "'", str27, "Solution[x=-1, y=35]");
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        java.lang.String str5 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (short) 100, 1);
        boolean boolean10 = solution2.equals((java.lang.Object) equation9);
        int int11 = equation9.c();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int22 = equation3.a();
        java.lang.String str23 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str25 = equation3.toString();
        java.lang.String str26 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        solution29.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean38 = solution29.equals((java.lang.Object) equation37);
        int int39 = equation37.a();
        java.lang.String str40 = equation37.toString();
        boolean boolean41 = equation3.equals((java.lang.Object) equation37);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str23, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str25, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str26, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str40, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', (int) '4', 125);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) -1, (-35));
        java.lang.String str8 = equation7.toString();
        boolean boolean9 = equation3.equals((java.lang.Object) equation7);
        int int10 = equation7.a();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=100, b=-1, c=-35]" + "'", str8, "Equation[a=100, b=-1, c=-35]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (-35));
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(1, (int) (short) -1, 96);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        java.lang.String str5 = solution2.toString();
        java.lang.String str6 = solution2.toString();
        solution2.setY((int) (short) 0);
        solution2.setY((int) (short) 10);
        int int11 = solution2.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, 10);
        int int16 = equation15.a();
        int int17 = equation15.a();
        int int18 = equation15.c();
        boolean boolean19 = solution2.equals((java.lang.Object) equation15);
        solution2.setY((-75));
        int int22 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-75) + "'", int22 == (-75));
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int3 = solution2.getX();
        solution2.setX(100);
        solution2.setY((int) '#');
        solution2.setX((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) ' ', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution5);
        gcdSolutionWrapper6.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int12 = solution11.getY();
        java.lang.String str13 = solution11.toString();
        gcdSolutionWrapper6.setSolution(solution11);
        int int15 = gcdSolutionWrapper6.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        gcdSolutionWrapper6.setSolution(solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution22);
        gcdSolutionWrapper23.setGcd((int) ' ');
        gcdSolutionWrapper23.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        java.lang.String str32 = solution30.toString();
        solution30.setX((int) (short) 1);
        boolean boolean36 = solution30.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper23.setSolution(solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution39);
        boolean boolean42 = gcdSolutionWrapper40.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution44);
        gcdSolutionWrapper45.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int51 = solution50.getY();
        java.lang.String str52 = solution50.toString();
        gcdSolutionWrapper45.setSolution(solution50);
        gcdSolutionWrapper40.setSolution(solution50);
        int int55 = solution50.getY();
        java.lang.String str56 = solution50.toString();
        gcdSolutionWrapper23.setSolution(solution50);
        gcdSolutionWrapper6.setSolution(solution50);
        gcdSolutionWrapper6.setGcd(1);
        java.lang.Class<?> wildcardClass61 = gcdSolutionWrapper6.getClass();
        boolean boolean62 = equation3.equals((java.lang.Object) gcdSolutionWrapper6);
        java.lang.String str63 = equation3.toString();
        int int64 = equation3.b();
        int int65 = equation3.b();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=97, y=1]" + "'", str13, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Solution[x=97, y=1]" + "'", str32, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=97, y=1]" + "'", str52, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Solution[x=97, y=1]" + "'", str56, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Equation[a=0, b=32, c=0]" + "'", str63, "Equation[a=0, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 32 + "'", int64 == 32);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 32 + "'", int65 == 32);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, 32, 0);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        int int12 = solution11.getX();
        int int13 = solution11.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution11);
        gcdSolutionWrapper14.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int21 = solution20.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution20);
        boolean boolean23 = gcdSolutionWrapper14.equals((java.lang.Object) solution20);
        java.lang.String str24 = solution20.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(97, solution20);
        boolean boolean26 = equation3.equals((java.lang.Object) gcdSolutionWrapper25);
        java.lang.String str27 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution35);
        boolean boolean38 = gcdSolutionWrapper36.equals((java.lang.Object) 1);
        boolean boolean39 = equation31.equals((java.lang.Object) boolean38);
        int int40 = equation31.a();
        int int41 = equation31.b();
        int int42 = equation31.c();
        boolean boolean43 = equation3.equals((java.lang.Object) int42);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-1, b=32, c=0]" + "'", str4, "Equation[a=-1, b=32, c=0]");
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=1, y=52]" + "'", str24, "Solution[x=1, y=52]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Equation[a=-1, b=32, c=0]" + "'", str27, "Equation[a=-1, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        java.lang.String str16 = solution14.toString();
        solution14.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean23 = solution14.equals((java.lang.Object) equation22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        boolean boolean28 = solution14.equals((java.lang.Object) (byte) 1);
        int int29 = solution14.getY();
        solution14.setX((int) (short) -1);
        boolean boolean32 = gcdSolutionWrapper8.equals((java.lang.Object) solution14);
        java.lang.String str33 = gcdSolutionWrapper8.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]" + "'", str33, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]");
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int12 = solution11.getY();
        java.lang.String str13 = solution11.toString();
        solution11.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int20 = equation19.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = solution11.equals((java.lang.Object) solution21);
        boolean boolean24 = solution21.equals((java.lang.Object) 0);
        boolean boolean25 = equation8.equals((java.lang.Object) solution21);
        boolean boolean27 = solution21.equals((java.lang.Object) (byte) -1);
        int int28 = solution21.getY();
        int int29 = solution21.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution21);
        boolean boolean31 = equation3.equals((java.lang.Object) solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Solution[x=97, y=1]" + "'", str13, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-35) + "'", int28 == (-35));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(solution32);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) -1, (-35));
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution6);
        gcdSolutionWrapper7.setGcd((int) ' ');
        gcdSolutionWrapper7.setGcd((int) (short) 1);
        boolean boolean12 = equation3.equals((java.lang.Object) gcdSolutionWrapper7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, 0);
        boolean boolean16 = gcdSolutionWrapper7.equals((java.lang.Object) solution15);
        int int17 = solution15.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 1, (int) (byte) 10);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, 100);
        java.lang.String str3 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        java.lang.String str18 = gcdSolutionWrapper13.toString();
        java.lang.String str19 = gcdSolutionWrapper13.toString();
        int int20 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int25 = equation24.c();
        int int26 = equation24.b();
        int int27 = equation24.c();
        int int28 = equation24.c();
        boolean boolean29 = gcdSolutionWrapper13.equals((java.lang.Object) int28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution33);
        int int35 = gcdSolutionWrapper34.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution37);
        gcdSolutionWrapper38.setGcd((int) ' ');
        gcdSolutionWrapper38.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper38.getSolution();
        int int44 = gcdSolutionWrapper38.getGcd();
        gcdSolutionWrapper38.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation50);
        solution51.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean58 = solution51.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper38.setSolution(solution51);
        gcdSolutionWrapper34.setSolution(solution51);
        solution51.setY((int) '4');
        int int63 = solution51.getY();
        gcdSolutionWrapper13.setSolution(solution51);
        boolean boolean65 = solution2.equals((java.lang.Object) gcdSolutionWrapper13);
        gcdSolutionWrapper13.setGcd((int) (byte) 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=32, y=100]" + "'", str3, "Solution[x=32, y=100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str19, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(solution43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(solution51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (short) 10, 97);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        gcdSolutionWrapper8.setGcd((int) (byte) 1);
        java.lang.String str11 = gcdSolutionWrapper8.toString();
        int int12 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (short) 10);
        java.lang.String str15 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation20);
        int int22 = solution21.getX();
        int int23 = solution21.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        solution30.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation37);
        solution38.setY((int) (byte) 10);
        boolean boolean41 = solution30.equals((java.lang.Object) (byte) 10);
        boolean boolean43 = solution30.equals((java.lang.Object) (-1));
        solution30.setY((int) (byte) 0);
        gcdSolutionWrapper24.setSolution(solution30);
        solution30.setY((int) ' ');
        java.lang.String str49 = solution30.toString();
        int int50 = solution30.getY();
        gcdSolutionWrapper8.setSolution(solution30);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Solution[x=-1, y=32]" + "'", str49, "Solution[x=-1, y=32]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, (int) (byte) -1, (int) (byte) 1);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, 35);
        java.lang.Class<?> wildcardClass3 = solution2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) solution25);
        boolean boolean28 = gcdSolutionWrapper13.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        int int35 = solution34.getX();
        int int36 = solution34.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        java.lang.String str42 = solution40.toString();
        solution40.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int49 = equation48.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation48);
        boolean boolean51 = solution40.equals((java.lang.Object) solution50);
        boolean boolean52 = solution34.equals((java.lang.Object) boolean51);
        gcdSolutionWrapper13.setSolution(solution34);
        int int54 = solution34.getX();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(solution50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', 52, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean8 = equation3.equals((java.lang.Object) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str10 = equation3.toString();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Equation[a=52, b=52, c=100]" + "'", str10, "Equation[a=52, b=52, c=100]");
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int6 = solution5.getY();
        java.lang.String str7 = solution5.toString();
        solution5.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        java.lang.String str12 = solution5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution5);
        int int14 = gcdSolutionWrapper13.getGcd();
        java.lang.Class<?> wildcardClass15 = gcdSolutionWrapper13.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=97, y=1]" + "'", str7, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=1, y=1]" + "'", str12, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        java.lang.String str20 = equation4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        solution21.setY((int) (byte) 0);
        int int24 = solution21.getX();
        int int25 = solution21.getY();
        solution21.setX(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(100, solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = gcdSolutionWrapper28.getSolution();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str20, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(solution29);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, (int) (byte) 100);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        gcdSolutionWrapper4.setGcd(52);
        java.lang.String str9 = gcdSolutionWrapper4.toString();
        int int10 = gcdSolutionWrapper4.getGcd();
        int int11 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 35);
        gcdSolutionWrapper4.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper4.getSolution();
        java.lang.String str17 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]" + "'", str9, "GcdSolutionWrapper[gcd=52, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=10, y=35]]" + "'", str17, "GcdSolutionWrapper[gcd=52, solution=Solution[x=10, y=35]]");
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        int int5 = solution2.getX();
        int int6 = solution2.getY();
        solution2.setY((int) (short) 100);
        int int9 = solution2.getX();
        solution2.setY(52);
        solution2.setX((int) 'a');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper9.setSolution(solution16);
        java.lang.String str18 = solution16.toString();
        int int19 = solution16.getX();
        int int20 = solution16.getX();
        java.lang.String str21 = solution16.toString();
        solution16.setX((int) '4');
        int int24 = solution16.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=-1, y=52]" + "'", str18, "Solution[x=-1, y=52]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=-1, y=52]" + "'", str21, "Solution[x=-1, y=52]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) '4', 52);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        int int10 = equation8.a();
        int int11 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        int int13 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        boolean boolean15 = equation3.equals((java.lang.Object) equation8);
        int int16 = equation3.b();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=52, c=52]" + "'", str4, "Equation[a=0, b=52, c=52]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        boolean boolean16 = solution12.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper9.setSolution(solution12);
        solution12.setX(1);
        java.lang.String str20 = solution12.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        java.lang.String str29 = solution27.toString();
        solution27.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int36 = equation35.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        boolean boolean38 = solution27.equals((java.lang.Object) solution37);
        boolean boolean40 = solution37.equals((java.lang.Object) 0);
        boolean boolean41 = equation24.equals((java.lang.Object) solution37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int46 = equation45.c();
        int int47 = equation45.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        solution51.setY((int) (byte) 1);
        boolean boolean56 = solution51.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper57.getSolution();
        java.lang.String str59 = gcdSolutionWrapper57.toString();
        gcdSolutionWrapper57.setGcd((int) (byte) 1);
        boolean boolean62 = equation45.equals((java.lang.Object) gcdSolutionWrapper57);
        boolean boolean63 = equation24.equals((java.lang.Object) equation45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        boolean boolean65 = solution12.equals((java.lang.Object) equation24);
        int int66 = solution12.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation70 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (short) 100, (int) (byte) 100);
        boolean boolean71 = solution12.equals((java.lang.Object) (byte) 100);
        java.lang.Class<?> wildcardClass72 = solution12.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=97, y=1]" + "'", str29, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str59, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) -1, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) '4');
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (int) (short) 1, (int) (short) 100);
        int int7 = equation6.c();
        int int8 = equation6.b();
        boolean boolean9 = solution2.equals((java.lang.Object) equation6);
        java.lang.String str10 = solution2.toString();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=100, y=35]" + "'", str10, "Solution[x=100, y=35]");
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution23);
        gcdSolutionWrapper24.setGcd((int) ' ');
        gcdSolutionWrapper24.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = gcdSolutionWrapper24.getSolution();
        int int30 = gcdSolutionWrapper24.getGcd();
        gcdSolutionWrapper24.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation36);
        solution37.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean44 = solution37.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper24.setSolution(solution37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int50 = solution49.getY();
        java.lang.String str51 = solution49.toString();
        solution49.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution49);
        java.lang.String str55 = solution49.toString();
        gcdSolutionWrapper24.setSolution(solution49);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation60 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (int) (byte) 100, 1);
        int int61 = equation60.b();
        boolean boolean62 = gcdSolutionWrapper24.equals((java.lang.Object) int61);
        boolean boolean63 = equation3.equals((java.lang.Object) gcdSolutionWrapper24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation68);
        int int70 = solution69.getX();
        int int71 = solution69.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper72 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution69);
        boolean boolean74 = solution69.equals((java.lang.Object) '#');
        int int75 = solution69.getY();
        int int76 = solution69.getX();
        solution69.setY((int) (byte) 10);
        gcdSolutionWrapper24.setSolution(solution69);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution83 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int84 = solution83.getX();
        solution83.setY(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper87 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '#', solution83);
        java.lang.String str88 = solution83.toString();
        solution83.setY((int) (short) 10);
        boolean boolean91 = solution69.equals((java.lang.Object) (short) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNull(solution29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Solution[x=97, y=1]" + "'", str51, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Solution[x=1, y=1]" + "'", str55, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(solution69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Solution[x=97, y=52]" + "'", str88, "Solution[x=97, y=52]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) (byte) 10, (int) (short) 100);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) -1, (-35));
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        java.lang.String str10 = solution8.toString();
        java.lang.String str11 = solution8.toString();
        java.lang.String str12 = solution8.toString();
        solution8.setY((int) (short) 0);
        solution8.setY((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution8);
        boolean boolean18 = equation3.equals((java.lang.Object) (short) 100);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=100, b=-1, c=-35]" + "'", str4, "Equation[a=100, b=-1, c=-35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=97, y=1]" + "'", str10, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean11 = solution2.equals((java.lang.Object) equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        boolean boolean16 = solution2.equals((java.lang.Object) (byte) 1);
        int int17 = solution2.getY();
        solution2.setX((int) (short) -1);
        int int20 = solution2.getY();
        int int21 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        boolean boolean5 = gcdSolutionWrapper3.equals((java.lang.Object) 1);
        java.lang.String str6 = gcdSolutionWrapper3.toString();
        gcdSolutionWrapper3.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper3.setSolution(solution11);
        int int13 = solution11.getX();
        int int14 = solution11.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution11);
        int int16 = solution11.getX();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str6, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) -1, (int) (byte) 100, (int) (byte) 10);
        int int4 = equation3.b();
        java.lang.Object obj5 = null;
        boolean boolean6 = equation3.equals(obj5);
        int int7 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper2.getSolution();
        java.lang.String str12 = gcdSolutionWrapper2.toString();
        java.lang.String str13 = gcdSolutionWrapper2.toString();
        gcdSolutionWrapper2.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        java.lang.String str21 = equation19.toString();
        boolean boolean22 = gcdSolutionWrapper2.equals((java.lang.Object) str21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]" + "'", str12, "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]" + "'", str13, "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str21, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 97);
        int int3 = solution2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 1, (int) (short) -1);
        solution2.setY((-75));
        int int5 = solution2.getY();
        java.lang.String str6 = solution2.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-75) + "'", int5 == (-75));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=1, y=-75]" + "'", str6, "Solution[x=1, y=-75]");
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        int int21 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) 10, (int) (short) 0);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int9 = equation8.b();
        boolean boolean10 = equation3.equals((java.lang.Object) int9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        java.lang.String str16 = equation14.toString();
        int int17 = equation14.a();
        java.lang.Object obj18 = null;
        boolean boolean19 = equation14.equals(obj18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        solution20.setX((int) (byte) 100);
        boolean boolean23 = equation3.equals((java.lang.Object) solution20);
        int int24 = equation3.a();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=100, b=10, c=0]" + "'", str4, "Equation[a=100, b=10, c=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str16, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution4);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (byte) 10, 35);
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-35, b=10, c=35]" + "'", str4, "Equation[a=-35, b=10, c=35]");
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        solution6.setY((int) (byte) 1);
        gcdSolutionWrapper3.setSolution(solution6);
        int int11 = gcdSolutionWrapper3.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        java.lang.String str16 = solution14.toString();
        solution14.setX((int) (short) 1);
        boolean boolean20 = solution14.equals((java.lang.Object) (-1.0f));
        java.lang.String str21 = solution14.toString();
        java.lang.String str22 = solution14.toString();
        gcdSolutionWrapper3.setSolution(solution14);
        solution14.setY((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution14);
        java.lang.String str27 = gcdSolutionWrapper26.toString();
        java.lang.Class<?> wildcardClass28 = gcdSolutionWrapper26.getClass();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=97, y=1]" + "'", str16, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=1, y=1]" + "'", str21, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=1, y=1]" + "'", str22, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=-1]]" + "'", str27, "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=-1]]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution6);
        gcdSolutionWrapper7.setGcd((int) ' ');
        gcdSolutionWrapper7.setGcd((int) (short) 1);
        int int12 = gcdSolutionWrapper7.getGcd();
        gcdSolutionWrapper7.setGcd((int) (byte) -1);
        int int15 = gcdSolutionWrapper7.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        java.lang.String str21 = solution19.toString();
        solution19.setX((int) (short) 1);
        java.lang.String str24 = solution19.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution19);
        boolean boolean26 = gcdSolutionWrapper7.equals((java.lang.Object) solution19);
        boolean boolean27 = solution2.equals((java.lang.Object) gcdSolutionWrapper7);
        int int28 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=97, y=1]" + "'", str21, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=1, y=1]" + "'", str24, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int4 = equation3.c();
        int int5 = equation3.c();
        int int6 = equation3.a();
        int int7 = equation3.b();
        int int8 = equation3.a();
        java.lang.String str9 = equation3.toString();
        java.lang.Class<?> wildcardClass10 = equation3.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=52, b=52, c=0]" + "'", str9, "Equation[a=52, b=52, c=0]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        int int5 = solution2.getX();
        int int6 = solution2.getY();
        solution2.setY((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        int int15 = solution14.getX();
        int int16 = solution14.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper17.getSolution();
        boolean boolean19 = solution2.equals((java.lang.Object) gcdSolutionWrapper17);
        solution2.setX(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int26 = equation25.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution29);
        boolean boolean32 = gcdSolutionWrapper30.equals((java.lang.Object) 1);
        boolean boolean33 = equation25.equals((java.lang.Object) boolean32);
        int int34 = equation25.a();
        int int35 = equation25.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution37);
        gcdSolutionWrapper38.setGcd((int) ' ');
        gcdSolutionWrapper38.setGcd((int) (short) 1);
        int int43 = gcdSolutionWrapper38.getGcd();
        int int44 = gcdSolutionWrapper38.getGcd();
        boolean boolean45 = equation25.equals((java.lang.Object) int44);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        solution51.setY((int) (byte) 1);
        gcdSolutionWrapper48.setSolution(solution51);
        boolean boolean56 = equation25.equals((java.lang.Object) gcdSolutionWrapper48);
        java.lang.String str57 = gcdSolutionWrapper48.toString();
        boolean boolean58 = solution2.equals((java.lang.Object) gcdSolutionWrapper48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int63 = solution62.getY();
        java.lang.String str64 = solution62.toString();
        solution62.setX((int) (short) 1);
        boolean boolean68 = solution62.equals((java.lang.Object) true);
        solution62.setY(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution62);
        solution62.setY((int) '#');
        gcdSolutionWrapper48.setSolution(solution62);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution77 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        gcdSolutionWrapper48.setSolution(solution77);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str57, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Solution[x=97, y=1]" + "'", str64, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper2.getSolution();
        gcdSolutionWrapper2.setGcd((int) (short) -1);
        gcdSolutionWrapper2.setGcd((int) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        int int16 = solution15.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int21 = equation20.c();
        int int22 = equation20.c();
        int int23 = equation20.a();
        boolean boolean24 = solution15.equals((java.lang.Object) equation20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution25);
        gcdSolutionWrapper2.setSolution(solution25);
        org.junit.Assert.assertNull(solution5);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(solution25);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.b();
        java.lang.Class<?> wildcardClass6 = equation3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=10, b=10, c=52]" + "'", str4, "Equation[a=10, b=10, c=52]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(solution7);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str22 = equation3.toString();
        int int23 = equation3.b();
        int int24 = equation3.b();
        java.lang.Class<?> wildcardClass25 = equation3.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str22, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(125, (int) (short) 100);
        int int3 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int20 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = gcdSolutionWrapper9.equals((java.lang.Object) equation19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        int int24 = equation19.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int29 = equation28.c();
        int int30 = equation28.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int35 = solution34.getY();
        solution34.setY((int) (byte) 1);
        boolean boolean39 = solution34.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = gcdSolutionWrapper40.getSolution();
        java.lang.String str42 = gcdSolutionWrapper40.toString();
        gcdSolutionWrapper40.setGcd((int) (byte) 1);
        boolean boolean45 = equation28.equals((java.lang.Object) gcdSolutionWrapper40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper40.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution50);
        gcdSolutionWrapper51.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution57);
        gcdSolutionWrapper58.setGcd(97);
        boolean boolean61 = gcdSolutionWrapper51.equals((java.lang.Object) gcdSolutionWrapper58);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution66 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation65);
        solution66.setY((int) (byte) 10);
        int int69 = solution66.getY();
        boolean boolean70 = gcdSolutionWrapper51.equals((java.lang.Object) solution66);
        boolean boolean71 = gcdSolutionWrapper40.equals((java.lang.Object) gcdSolutionWrapper51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution74 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 10, 0);
        gcdSolutionWrapper51.setSolution(solution74);
        solution74.setY(1);
        solution74.setY((int) (short) 10);
        boolean boolean80 = equation19.equals((java.lang.Object) (short) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str42, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(solution66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        int int14 = solution13.getX();
        int int15 = solution13.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution13);
        java.lang.String str17 = solution13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(52, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 1);
        java.lang.String str26 = gcdSolutionWrapper21.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        solution29.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int38 = equation37.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation37);
        boolean boolean40 = solution29.equals((java.lang.Object) solution39);
        boolean boolean42 = solution29.equals((java.lang.Object) false);
        gcdSolutionWrapper21.setSolution(solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int47 = solution46.getY();
        java.lang.String str48 = solution46.toString();
        solution46.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean55 = solution46.equals((java.lang.Object) equation54);
        int int56 = equation54.c();
        int int57 = equation54.a();
        boolean boolean58 = gcdSolutionWrapper21.equals((java.lang.Object) equation54);
        boolean boolean59 = gcdSolutionWrapper18.equals((java.lang.Object) gcdSolutionWrapper21);
        boolean boolean60 = solution6.equals((java.lang.Object) boolean59);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=0, y=0]" + "'", str17, "Solution[x=0, y=0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str26, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=97, y=1]" + "'", str48, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) '4', solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=52, solution=Solution[x=32, y=1]]" + "'", str5, "GcdSolutionWrapper[gcd=52, solution=Solution[x=32, y=1]]");
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        boolean boolean10 = solution5.equals((java.lang.Object) '#');
        int int11 = solution5.getY();
        int int12 = solution5.getX();
        solution5.setX((int) '#');
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution3);
        java.lang.String str8 = gcdSolutionWrapper7.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str13 = equation12.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        solution14.setY((int) (byte) 10);
        solution14.setY((int) (byte) 10);
        int int19 = solution14.getX();
        int int20 = solution14.getX();
        gcdSolutionWrapper7.setSolution(solution14);
        solution14.setY((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=97, y=1]]" + "'", str8, "GcdSolutionWrapper[gcd=10, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str13, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        int int7 = gcdSolutionWrapper2.getGcd();
        int int8 = gcdSolutionWrapper2.getGcd();
        int int9 = gcdSolutionWrapper2.getGcd();
        java.lang.String str10 = gcdSolutionWrapper2.toString();
        int int11 = gcdSolutionWrapper2.getGcd();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str10, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        gcdSolutionWrapper9.setGcd((-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        java.lang.String str17 = solution15.toString();
        solution15.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution15);
        int int21 = gcdSolutionWrapper20.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper20.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        solution27.setY((int) (byte) 10);
        gcdSolutionWrapper20.setSolution(solution27);
        gcdSolutionWrapper9.setSolution(solution27);
        int int32 = solution27.getY();
        int int33 = solution27.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=97, y=1]" + "'", str17, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-35) + "'", int21 == (-35));
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) (short) 10, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (short) 10);
        boolean boolean7 = equation3.equals((java.lang.Object) (short) 10);
        int int8 = equation3.a();
        int int9 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertNotNull(solution10);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        gcdSolutionWrapper4.setSolution(solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        boolean boolean15 = gcdSolutionWrapper4.equals((java.lang.Object) solution12);
        java.lang.Class<?> wildcardClass16 = solution12.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 1);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, 52, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        java.lang.String str19 = solution17.toString();
        boolean boolean21 = solution17.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper14.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int28 = equation27.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        java.lang.String str30 = equation27.toString();
        int int31 = equation27.b();
        int int32 = equation27.b();
        boolean boolean33 = gcdSolutionWrapper23.equals((java.lang.Object) equation27);
        java.lang.String str34 = equation27.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        boolean boolean36 = equation3.equals((java.lang.Object) solution35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str30, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str34, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (short) 1);
        int int4 = equation3.b();
        int int5 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-35) + "'", int4 == (-35));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        solution4.setX((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        boolean boolean19 = solution14.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper20.getSolution();
        java.lang.String str22 = gcdSolutionWrapper20.toString();
        gcdSolutionWrapper20.setGcd((int) (byte) 1);
        boolean boolean25 = equation10.equals((java.lang.Object) gcdSolutionWrapper20);
        int int26 = gcdSolutionWrapper20.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper20.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str32 = equation31.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        solution33.setY((int) (byte) 10);
        boolean boolean36 = solution27.equals((java.lang.Object) solution33);
        int int37 = solution33.getY();
        boolean boolean38 = solution4.equals((java.lang.Object) solution33);
        solution4.setX((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-75), solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str22, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str32, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int8 = equation3.a();
        int int9 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        solution18.setY((int) (byte) 1);
        boolean boolean23 = solution18.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper24.getSolution();
        java.lang.String str26 = gcdSolutionWrapper24.toString();
        gcdSolutionWrapper24.setGcd((int) (byte) 1);
        boolean boolean29 = equation14.equals((java.lang.Object) gcdSolutionWrapper24);
        int int30 = gcdSolutionWrapper24.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = gcdSolutionWrapper24.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution31);
        int int33 = gcdSolutionWrapper32.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', (int) (byte) 10);
        solution36.setX((int) (byte) 1);
        gcdSolutionWrapper32.setSolution(solution36);
        gcdSolutionWrapper32.setGcd(100);
        boolean boolean42 = equation3.equals((java.lang.Object) 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str26, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 32 + "'", int33 == 32);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, 52, 0);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int3 = solution2.getX();
        solution2.setY(1);
        solution2.setX((int) (short) 0);
        java.lang.String str8 = solution2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        int int15 = solution14.getX();
        int int16 = solution14.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution14);
        int int18 = solution14.getX();
        boolean boolean19 = solution2.equals((java.lang.Object) int18);
        int int20 = solution2.getX();
        int int21 = solution2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=0, y=1]" + "'", str8, "Solution[x=0, y=1]");
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int22 = equation3.a();
        java.lang.String str23 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int25 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (short) 1, (-1));
        int int30 = equation29.b();
        int int31 = equation29.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int40 = solution39.getY();
        solution39.setY((int) (byte) 1);
        boolean boolean44 = solution39.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper45.getSolution();
        java.lang.String str47 = gcdSolutionWrapper45.toString();
        gcdSolutionWrapper45.setGcd((int) (byte) 1);
        boolean boolean50 = equation35.equals((java.lang.Object) gcdSolutionWrapper45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int55 = equation54.c();
        int int56 = equation54.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation54);
        boolean boolean58 = gcdSolutionWrapper45.equals((java.lang.Object) solution57);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int63 = equation62.c();
        int int64 = equation62.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int69 = solution68.getY();
        solution68.setY((int) (byte) 1);
        boolean boolean73 = solution68.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper74 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution68);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = gcdSolutionWrapper74.getSolution();
        java.lang.String str76 = gcdSolutionWrapper74.toString();
        gcdSolutionWrapper74.setGcd((int) (byte) 1);
        boolean boolean79 = equation62.equals((java.lang.Object) gcdSolutionWrapper74);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution80 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation62);
        int int81 = solution80.getY();
        boolean boolean82 = gcdSolutionWrapper45.equals((java.lang.Object) int81);
        java.lang.String str83 = gcdSolutionWrapper45.toString();
        int int84 = gcdSolutionWrapper45.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution85 = gcdSolutionWrapper45.getSolution();
        boolean boolean86 = equation29.equals((java.lang.Object) gcdSolutionWrapper45);
        boolean boolean87 = equation3.equals((java.lang.Object) gcdSolutionWrapper45);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str23, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str47, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(solution57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(solution75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str76, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(solution80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-35) + "'", int81 == (-35));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str83, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(solution85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 1, 52);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        int int7 = gcdSolutionWrapper2.getGcd();
        int int8 = gcdSolutionWrapper2.getGcd();
        java.lang.String str9 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean21 = solution14.equals((java.lang.Object) solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution14);
        int int23 = solution14.getY();
        java.lang.String str24 = solution14.toString();
        gcdSolutionWrapper2.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper2.getSolution();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str9, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertNull(solution10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution26);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution4);
        int int10 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper9.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper9.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        java.lang.String str17 = solution15.toString();
        solution15.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean24 = solution15.equals((java.lang.Object) equation23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        boolean boolean29 = solution15.equals((java.lang.Object) (byte) 1);
        int int30 = solution15.getY();
        solution15.setX((int) (short) -1);
        boolean boolean33 = gcdSolutionWrapper9.equals((java.lang.Object) solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution.INFINITE_SOLUTIONS;
        solution34.setY((int) (short) 100);
        boolean boolean37 = gcdSolutionWrapper9.equals((java.lang.Object) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        boolean boolean41 = gcdSolutionWrapper9.equals((java.lang.Object) solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution40);
        gcdSolutionWrapper42.setGcd(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = gcdSolutionWrapper42.getSolution();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-35) + "'", int10 == (-35));
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=97, y=1]" + "'", str17, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(solution45);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        boolean boolean22 = solution16.equals((java.lang.Object) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int26 = solution25.getY();
        java.lang.String str27 = solution25.toString();
        solution25.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int34 = equation33.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        boolean boolean36 = solution25.equals((java.lang.Object) solution35);
        boolean boolean38 = solution25.equals((java.lang.Object) false);
        int int39 = solution25.getX();
        java.lang.String str40 = solution25.toString();
        boolean boolean41 = solution16.equals((java.lang.Object) solution25);
        int int42 = solution16.getY();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Solution[x=97, y=1]" + "'", str27, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=1, y=1]" + "'", str40, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-35) + "'", int42 == (-35));
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int12 = equation11.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        boolean boolean14 = solution3.equals((java.lang.Object) solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        int int17 = gcdSolutionWrapper15.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        java.lang.Class<?> wildcardClass22 = solution21.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str6 = equation3.toString();
        int int7 = equation3.c();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str6, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        boolean boolean21 = equation6.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution23);
        gcdSolutionWrapper24.setGcd((int) ' ');
        gcdSolutionWrapper24.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int32 = solution31.getY();
        java.lang.String str33 = solution31.toString();
        solution31.setX((int) (short) 1);
        boolean boolean37 = solution31.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper24.setSolution(solution31);
        gcdSolutionWrapper16.setSolution(solution31);
        int int40 = gcdSolutionWrapper16.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int47 = solution46.getY();
        solution46.setY((int) (byte) 1);
        gcdSolutionWrapper43.setSolution(solution46);
        gcdSolutionWrapper43.setGcd((int) (byte) 0);
        boolean boolean53 = gcdSolutionWrapper16.equals((java.lang.Object) (byte) 0);
        boolean boolean54 = solution2.equals((java.lang.Object) gcdSolutionWrapper16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int58 = solution57.getY();
        java.lang.String str59 = solution57.toString();
        solution57.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int66 = equation65.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution67 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation65);
        boolean boolean68 = solution57.equals((java.lang.Object) solution67);
        boolean boolean70 = solution57.equals((java.lang.Object) false);
        java.lang.Class<?> wildcardClass71 = solution57.getClass();
        boolean boolean72 = gcdSolutionWrapper16.equals((java.lang.Object) wildcardClass71);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int77 = solution76.getY();
        solution76.setY((int) (byte) 1);
        boolean boolean81 = solution76.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper82 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution76);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution83 = gcdSolutionWrapper82.getSolution();
        java.lang.String str84 = gcdSolutionWrapper82.toString();
        gcdSolutionWrapper82.setGcd((int) (byte) 1);
        java.lang.String str87 = gcdSolutionWrapper82.toString();
        java.lang.String str88 = gcdSolutionWrapper82.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation92 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int93 = equation92.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution94 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation92);
        boolean boolean95 = gcdSolutionWrapper82.equals((java.lang.Object) equation92);
        int int96 = equation92.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution97 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation92);
        int int98 = equation92.b();
        boolean boolean99 = gcdSolutionWrapper16.equals((java.lang.Object) equation92);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Solution[x=97, y=1]" + "'", str33, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Solution[x=97, y=1]" + "'", str59, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNotNull(solution67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(solution83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str84, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str87, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str88, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 97 + "'", int93 == 97);
        org.junit.Assert.assertNotNull(solution94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 97 + "'", int96 == 97);
        org.junit.Assert.assertNotNull(solution97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        int int9 = gcdSolutionWrapper8.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        solution15.setY((int) (byte) 10);
        gcdSolutionWrapper8.setSolution(solution15);
        gcdSolutionWrapper8.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, 35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution24);
        gcdSolutionWrapper8.setSolution(solution24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(97, (int) (short) 1);
        java.lang.String str31 = solution30.toString();
        solution30.setX((int) 'a');
        java.lang.String str34 = solution30.toString();
        solution30.setX((int) '4');
        gcdSolutionWrapper8.setSolution(solution30);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-35) + "'", int9 == (-35));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=97, y=1]" + "'", str34, "Solution[x=97, y=1]");
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        int int22 = gcdSolutionWrapper15.getGcd();
        java.lang.String str23 = gcdSolutionWrapper15.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution27);
        java.lang.String str29 = gcdSolutionWrapper28.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str34 = equation33.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        boolean boolean36 = gcdSolutionWrapper28.equals((java.lang.Object) solution35);
        boolean boolean37 = gcdSolutionWrapper15.equals((java.lang.Object) gcdSolutionWrapper28);
        int int38 = gcdSolutionWrapper28.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str23, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str29, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str34, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        solution3.setX((int) (byte) 10);
        java.lang.String str10 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution3);
        int int12 = solution3.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=10, y=1]" + "'", str10, "Solution[x=10, y=1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, (int) ' ', 0);
        boolean boolean5 = equation3.equals((java.lang.Object) "GcdSolutionWrapper[gcd=0, solution=Solution[x=-1, y=52]]");
        int int6 = equation3.c();
        java.lang.String str7 = equation3.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Equation[a=1, b=32, c=0]" + "'", str7, "Equation[a=1, b=32, c=0]");
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (-97));
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), (int) (short) 0, (-75));
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper4.getSolution();
        java.lang.String str6 = gcdSolutionWrapper4.toString();
        java.lang.String str7 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str13 = equation12.toString();
        int int14 = equation12.c();
        int int15 = equation12.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-75), solution16);
        boolean boolean18 = gcdSolutionWrapper4.equals((java.lang.Object) gcdSolutionWrapper17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper17.getSolution();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str6, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str7, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str13, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution19);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, 52, (int) (byte) 0);
        int int4 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 10, 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        int int9 = solution6.getX();
        int int10 = solution6.getY();
        solution6.setY((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        int int19 = solution18.getX();
        int int20 = solution18.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper21.getSolution();
        boolean boolean23 = solution6.equals((java.lang.Object) gcdSolutionWrapper21);
        solution6.setX(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int30 = equation29.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution33);
        boolean boolean36 = gcdSolutionWrapper34.equals((java.lang.Object) 1);
        boolean boolean37 = equation29.equals((java.lang.Object) boolean36);
        int int38 = equation29.a();
        int int39 = equation29.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution41);
        gcdSolutionWrapper42.setGcd((int) ' ');
        gcdSolutionWrapper42.setGcd((int) (short) 1);
        int int47 = gcdSolutionWrapper42.getGcd();
        int int48 = gcdSolutionWrapper42.getGcd();
        boolean boolean49 = equation29.equals((java.lang.Object) int48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int56 = solution55.getY();
        solution55.setY((int) (byte) 1);
        gcdSolutionWrapper52.setSolution(solution55);
        boolean boolean60 = equation29.equals((java.lang.Object) gcdSolutionWrapper52);
        java.lang.String str61 = gcdSolutionWrapper52.toString();
        boolean boolean62 = solution6.equals((java.lang.Object) gcdSolutionWrapper52);
        boolean boolean63 = equation3.equals((java.lang.Object) boolean62);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int65 = equation3.a();
        int int66 = equation3.b();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str61, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution3);
        boolean boolean6 = gcdSolutionWrapper4.equals((java.lang.Object) 1);
        java.lang.String str7 = gcdSolutionWrapper4.toString();
        gcdSolutionWrapper4.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper4.setSolution(solution12);
        int int14 = solution12.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution12);
        gcdSolutionWrapper16.setGcd(0);
        int int19 = gcdSolutionWrapper16.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper16.getSolution();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str7, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(solution20);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        java.lang.String str8 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int18 = solution17.getY();
        solution17.setY((int) (byte) 1);
        boolean boolean22 = solution17.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper23.getSolution();
        java.lang.String str25 = gcdSolutionWrapper23.toString();
        gcdSolutionWrapper23.setGcd((int) (byte) 1);
        boolean boolean28 = equation13.equals((java.lang.Object) gcdSolutionWrapper23);
        java.lang.String str29 = equation13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        solution30.setY((int) (byte) 0);
        int int33 = solution30.getX();
        solution30.setY(97);
        boolean boolean36 = gcdSolutionWrapper9.equals((java.lang.Object) 97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = gcdSolutionWrapper41.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution46);
        java.lang.String str48 = gcdSolutionWrapper47.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = gcdSolutionWrapper47.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = gcdSolutionWrapper47.getSolution();
        java.lang.String str51 = gcdSolutionWrapper47.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = gcdSolutionWrapper47.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = gcdSolutionWrapper47.getSolution();
        gcdSolutionWrapper41.setSolution(solution53);
        boolean boolean55 = gcdSolutionWrapper9.equals((java.lang.Object) solution53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=1, y=1]" + "'", str8, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str25, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str29, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str48, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertNotNull(solution50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str51, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution52);
        org.junit.Assert.assertNotNull(solution53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution4);
        java.lang.String str6 = gcdSolutionWrapper5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper5.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper5.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', (int) ' ', 35);
        boolean boolean13 = gcdSolutionWrapper5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper5.getSolution();
        solution14.setX((-35));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution14);
        java.lang.String str18 = gcdSolutionWrapper17.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str6, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=-35, y=52]]" + "'", str18, "GcdSolutionWrapper[gcd=32, solution=Solution[x=-35, y=52]]");
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(10, (int) (byte) 100, (int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', 32);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-75), (int) ' ', (int) (byte) -1);
        java.lang.Class<?> wildcardClass4 = equation3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        gcdSolutionWrapper15.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int27 = equation26.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution30);
        boolean boolean33 = gcdSolutionWrapper31.equals((java.lang.Object) 1);
        boolean boolean34 = equation26.equals((java.lang.Object) boolean33);
        int int35 = equation26.a();
        int int36 = equation26.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution38);
        gcdSolutionWrapper39.setGcd((int) ' ');
        gcdSolutionWrapper39.setGcd((int) (short) 1);
        int int44 = gcdSolutionWrapper39.getGcd();
        int int45 = gcdSolutionWrapper39.getGcd();
        boolean boolean46 = equation26.equals((java.lang.Object) int45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int53 = solution52.getY();
        solution52.setY((int) (byte) 1);
        gcdSolutionWrapper49.setSolution(solution52);
        boolean boolean57 = equation26.equals((java.lang.Object) gcdSolutionWrapper49);
        boolean boolean58 = gcdSolutionWrapper15.equals((java.lang.Object) gcdSolutionWrapper49);
        int int59 = gcdSolutionWrapper49.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        solution3.setX((int) (byte) 10);
        java.lang.String str10 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution3);
        gcdSolutionWrapper11.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution16);
        gcdSolutionWrapper17.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        java.lang.String str24 = solution22.toString();
        gcdSolutionWrapper17.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        boolean boolean34 = solution29.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper35.getSolution();
        java.lang.String str37 = gcdSolutionWrapper35.toString();
        gcdSolutionWrapper35.setGcd((int) (byte) 1);
        int int40 = gcdSolutionWrapper35.getGcd();
        boolean boolean41 = solution22.equals((java.lang.Object) gcdSolutionWrapper35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution22);
        boolean boolean43 = gcdSolutionWrapper11.equals((java.lang.Object) gcdSolutionWrapper42);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=10, y=1]" + "'", str10, "Solution[x=10, y=1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str37, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        java.lang.String str7 = solution4.toString();
        java.lang.String str8 = solution4.toString();
        solution4.setY((int) (short) 0);
        solution4.setY((int) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution4);
        solution4.setX((int) '#');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=97, y=1]" + "'", str7, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 10, 97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean13 = solution8.equals((java.lang.Object) (byte) 10);
        solution8.setX((-1));
        java.lang.String str16 = solution8.toString();
        solution8.setY(0);
        boolean boolean19 = equation3.equals((java.lang.Object) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int26 = solution25.getY();
        solution25.setY((int) (byte) 1);
        boolean boolean30 = solution25.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        gcdSolutionWrapper32.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int39 = equation38.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation38);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution42);
        boolean boolean45 = gcdSolutionWrapper43.equals((java.lang.Object) 1);
        boolean boolean46 = equation38.equals((java.lang.Object) boolean45);
        boolean boolean47 = gcdSolutionWrapper32.equals((java.lang.Object) boolean45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int51 = solution50.getY();
        java.lang.String str52 = solution50.toString();
        solution50.setX((int) (short) 1);
        solution50.setX((int) (byte) 10);
        gcdSolutionWrapper32.setSolution(solution50);
        boolean boolean58 = solution20.equals((java.lang.Object) solution50);
        java.lang.String str59 = solution20.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int64 = equation63.c();
        int int65 = equation63.a();
        int int66 = equation63.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution67 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation63);
        solution67.setX((int) '#');
        boolean boolean70 = solution20.equals((java.lang.Object) '#');
        int int71 = solution20.getX();
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=-1, y=0]" + "'", str16, "Solution[x=-1, y=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=97, y=1]" + "'", str52, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Solution[x=-1, y=0]" + "'", str59, "Solution[x=-1, y=0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 97 + "'", int65 == 97);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
        org.junit.Assert.assertNotNull(solution67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) '#');
        java.lang.String str11 = gcdSolutionWrapper8.toString();
        java.lang.Class<?> wildcardClass12 = gcdSolutionWrapper8.getClass();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=35, solution=Solution[x=0, y=0]]" + "'", str11, "GcdSolutionWrapper[gcd=35, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 1, 0);
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        solution12.setY((int) (byte) 1);
        boolean boolean17 = solution12.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper18.getSolution();
        java.lang.String str20 = gcdSolutionWrapper18.toString();
        gcdSolutionWrapper18.setGcd((int) (byte) 1);
        boolean boolean23 = equation8.equals((java.lang.Object) gcdSolutionWrapper18);
        java.lang.Class<?> wildcardClass24 = gcdSolutionWrapper18.getClass();
        boolean boolean25 = equation3.equals((java.lang.Object) wildcardClass24);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str20, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        boolean boolean15 = gcdSolutionWrapper13.equals((java.lang.Object) 1);
        boolean boolean16 = equation8.equals((java.lang.Object) boolean15);
        int int17 = equation8.a();
        int int18 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 1);
        int int26 = gcdSolutionWrapper21.getGcd();
        int int27 = gcdSolutionWrapper21.getGcd();
        boolean boolean28 = equation8.equals((java.lang.Object) int27);
        boolean boolean29 = equation3.equals((java.lang.Object) equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        int int33 = solution32.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 35, (int) (byte) -1);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        solution15.setY((int) (byte) 1);
        boolean boolean20 = solution15.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper21.getSolution();
        java.lang.String str23 = gcdSolutionWrapper21.toString();
        gcdSolutionWrapper21.setGcd((int) (byte) 1);
        boolean boolean26 = equation11.equals((java.lang.Object) gcdSolutionWrapper21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper21.getSolution();
        gcdSolutionWrapper21.setGcd((int) (byte) 100);
        gcdSolutionWrapper21.setGcd((int) (short) 10);
        boolean boolean32 = solution7.equals((java.lang.Object) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution36);
        gcdSolutionWrapper37.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = gcdSolutionWrapper37.getSolution();
        boolean boolean41 = solution7.equals((java.lang.Object) solution40);
        int int42 = solution7.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str23, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        boolean boolean4 = gcdSolutionWrapper2.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution6);
        gcdSolutionWrapper7.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        gcdSolutionWrapper7.setSolution(solution12);
        gcdSolutionWrapper2.setSolution(solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        java.lang.String str21 = solution19.toString();
        solution19.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean28 = solution19.equals((java.lang.Object) equation27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        boolean boolean33 = solution19.equals((java.lang.Object) (byte) 1);
        int int34 = solution19.getY();
        solution19.setX((int) (short) -1);
        int int37 = solution19.getY();
        int int38 = solution19.getX();
        gcdSolutionWrapper2.setSolution(solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', (int) ' ', (int) (byte) 0);
        boolean boolean44 = gcdSolutionWrapper2.equals((java.lang.Object) '#');
        int int45 = gcdSolutionWrapper2.getGcd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=97, y=1]" + "'", str21, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        int int8 = equation3.c();
        java.lang.String str9 = equation3.toString();
        java.lang.Class<?> wildcardClass10 = equation3.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str9, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution3);
        boolean boolean6 = gcdSolutionWrapper4.equals((java.lang.Object) 1);
        java.lang.String str7 = gcdSolutionWrapper4.toString();
        gcdSolutionWrapper4.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper4.setSolution(solution12);
        int int14 = solution12.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        java.lang.String str16 = solution12.toString();
        solution12.setX((int) (byte) 10);
        solution12.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution12);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str7, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Solution[x=100, y=-1]" + "'", str16, "Solution[x=100, y=-1]");
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.a();
        java.lang.String str7 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int9 = solution8.getY();
        solution8.setX((int) (byte) 1);
        int int12 = solution8.getY();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str5, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str7, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 100, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution6);
        org.junit.Assert.assertNotNull(solution6);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean11 = solution2.equals((java.lang.Object) equation10);
        java.lang.String str12 = equation10.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution14);
        gcdSolutionWrapper15.setGcd((int) ' ');
        gcdSolutionWrapper15.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper15.getSolution();
        int int21 = gcdSolutionWrapper15.getGcd();
        gcdSolutionWrapper15.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        solution28.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        boolean boolean35 = solution28.equals((java.lang.Object) (short) 10);
        gcdSolutionWrapper15.setSolution(solution28);
        java.lang.String str37 = solution28.toString();
        java.lang.String str38 = solution28.toString();
        boolean boolean39 = equation10.equals((java.lang.Object) solution28);
        java.lang.String str40 = solution28.toString();
        solution28.setY((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str12, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertNull(solution20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=35, y=0]" + "'", str37, "Solution[x=35, y=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Solution[x=35, y=0]" + "'", str38, "Solution[x=35, y=0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=35, y=0]" + "'", str40, "Solution[x=35, y=0]");
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        gcdSolutionWrapper8.setGcd((int) (byte) 1);
        java.lang.String str11 = gcdSolutionWrapper8.toString();
        int int12 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (short) 10);
        gcdSolutionWrapper8.setGcd(10);
        java.lang.String str17 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation25);
        int int27 = solution26.getX();
        int int28 = solution26.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution26);
        boolean boolean30 = solution20.equals((java.lang.Object) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        solution36.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation44);
        int int46 = solution45.getX();
        int int47 = solution45.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution45);
        int int49 = solution45.getX();
        gcdSolutionWrapper39.setSolution(solution45);
        boolean boolean51 = solution20.equals((java.lang.Object) gcdSolutionWrapper39);
        gcdSolutionWrapper8.setSolution(solution20);
        int int53 = solution20.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=10, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertNotNull(solution45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        gcdSolutionWrapper2.setGcd((int) (byte) 10);
        gcdSolutionWrapper2.setGcd(100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int17 = equation16.c();
        int int18 = equation16.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation16);
        int int20 = equation16.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution26);
        gcdSolutionWrapper33.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        java.lang.String str40 = solution39.toString();
        int int41 = solution39.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        int int47 = solution46.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(10, solution46);
        gcdSolutionWrapper42.setSolution(solution46);
        gcdSolutionWrapper33.setSolution(solution46);
        boolean boolean51 = equation16.equals((java.lang.Object) gcdSolutionWrapper33);
        java.lang.String str52 = equation16.toString();
        java.lang.String str53 = equation16.toString();
        int int54 = equation16.b();
        boolean boolean55 = gcdSolutionWrapper2.equals((java.lang.Object) equation16);
        java.lang.String str56 = gcdSolutionWrapper2.toString();
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertNull(solution12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=100, y=32]" + "'", str40, "Solution[x=100, y=32]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-35) + "'", int47 == (-35));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str52, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str53, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GcdSolutionWrapper[gcd=100, solution=null]" + "'", str56, "GcdSolutionWrapper[gcd=100, solution=null]");
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) -1, (int) (short) 10, (int) (short) 1);
        java.lang.String str4 = equation3.toString();
        int int5 = equation3.a();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-1, b=10, c=1]" + "'", str4, "Equation[a=-1, b=10, c=1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        java.lang.String str10 = equation8.toString();
        int int11 = equation8.a();
        java.lang.Object obj12 = null;
        boolean boolean13 = equation8.equals(obj12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        boolean boolean15 = gcdSolutionWrapper4.equals((java.lang.Object) solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (short) 10);
        solution18.setY(35);
        solution18.setX((-75));
        gcdSolutionWrapper4.setSolution(solution18);
        java.lang.String str24 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str10, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=-75, y=35]]" + "'", str24, "GcdSolutionWrapper[gcd=0, solution=Solution[x=-75, y=35]]");
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        gcdSolutionWrapper8.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        gcdSolutionWrapper8.setSolution(solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper8.getSolution();
        java.lang.String str18 = gcdSolutionWrapper8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper8.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        int int26 = solution25.getX();
        int int27 = solution25.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution25);
        gcdSolutionWrapper28.setGcd((int) (short) 0);
        gcdSolutionWrapper28.setGcd((int) '4');
        int int33 = gcdSolutionWrapper28.getGcd();
        gcdSolutionWrapper28.setGcd((int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper28.getSolution();
        boolean boolean37 = solution19.equals((java.lang.Object) gcdSolutionWrapper28);
        boolean boolean38 = gcdSolutionWrapper4.equals((java.lang.Object) boolean37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution41);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int46 = solution45.getY();
        solution45.setY((int) (byte) 1);
        gcdSolutionWrapper42.setSolution(solution45);
        int int50 = gcdSolutionWrapper42.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        java.lang.String str55 = solution53.toString();
        solution53.setX((int) (short) 1);
        boolean boolean59 = solution53.equals((java.lang.Object) (-1.0f));
        java.lang.String str60 = solution53.toString();
        java.lang.String str61 = solution53.toString();
        gcdSolutionWrapper42.setSolution(solution53);
        java.lang.String str63 = solution53.toString();
        solution53.setY(52);
        int int66 = solution53.getY();
        solution53.setY((int) (short) 100);
        solution53.setX((-35));
        gcdSolutionWrapper4.setSolution(solution53);
        solution53.setY((int) (short) 100);
        java.lang.String str74 = solution53.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Solution[x=97, y=1]" + "'", str55, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Solution[x=1, y=1]" + "'", str60, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Solution[x=1, y=1]" + "'", str61, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Solution[x=1, y=1]" + "'", str63, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Solution[x=-35, y=100]" + "'", str74, "Solution[x=-35, y=100]");
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        java.lang.String str6 = solution4.toString();
        solution4.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution4);
        gcdSolutionWrapper10.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution16);
        gcdSolutionWrapper10.setSolution(solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper10.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getX();
        java.lang.String str24 = solution22.toString();
        boolean boolean25 = solution19.equals((java.lang.Object) solution22);
        java.lang.Class<?> wildcardClass26 = solution19.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (-97));
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        java.lang.String str11 = solution9.toString();
        solution9.setX((int) (short) 1);
        boolean boolean15 = solution9.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper2.setSolution(solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution18);
        boolean boolean21 = gcdSolutionWrapper19.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution23);
        gcdSolutionWrapper24.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        gcdSolutionWrapper24.setSolution(solution29);
        gcdSolutionWrapper19.setSolution(solution29);
        int int34 = solution29.getY();
        java.lang.String str35 = solution29.toString();
        gcdSolutionWrapper2.setSolution(solution29);
        int int37 = solution29.getX();
        solution29.setY(52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Solution[x=97, y=1]" + "'", str35, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', (int) ' ', 35);
        boolean boolean12 = gcdSolutionWrapper4.equals((java.lang.Object) ' ');
        java.lang.String str13 = gcdSolutionWrapper4.toString();
        gcdSolutionWrapper4.setGcd(96);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str13, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str4 = equation3.toString();
        java.lang.Object obj5 = null;
        boolean boolean6 = equation3.equals(obj5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        solution10.setY((int) (byte) 1);
        boolean boolean15 = solution10.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper16.getSolution();
        java.lang.String str18 = gcdSolutionWrapper16.toString();
        gcdSolutionWrapper16.setGcd((int) (byte) 1);
        java.lang.String str21 = gcdSolutionWrapper16.toString();
        java.lang.String str22 = gcdSolutionWrapper16.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int27 = equation26.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        boolean boolean29 = gcdSolutionWrapper16.equals((java.lang.Object) equation26);
        int int30 = equation26.c();
        boolean boolean32 = equation26.equals((java.lang.Object) false);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        boolean boolean34 = equation3.equals((java.lang.Object) equation26);
        java.lang.String str35 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str4, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str18, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str21, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str22, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str35, "Equation[a=0, b=-1, c=35]");
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper8.getSolution();
        java.lang.String str10 = gcdSolutionWrapper8.toString();
        gcdSolutionWrapper8.setGcd((int) ' ');
        gcdSolutionWrapper8.setGcd((int) 'a');
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]" + "'", str10, "GcdSolutionWrapper[gcd=32, solution=Solution[x=0, y=0]]");
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution6.setX(35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        int int16 = solution15.getX();
        int int17 = solution15.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution15);
        boolean boolean20 = solution15.equals((java.lang.Object) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution22);
        boolean boolean24 = solution15.equals((java.lang.Object) (byte) 1);
        solution15.setX(35);
        solution15.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(1, solution15);
        boolean boolean30 = solution6.equals((java.lang.Object) solution15);
        int int31 = solution6.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int40 = solution39.getY();
        solution39.setY((int) (byte) 1);
        boolean boolean44 = solution39.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = gcdSolutionWrapper45.getSolution();
        java.lang.String str47 = gcdSolutionWrapper45.toString();
        gcdSolutionWrapper45.setGcd((int) (byte) 1);
        boolean boolean50 = equation35.equals((java.lang.Object) gcdSolutionWrapper45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int55 = equation54.c();
        int int56 = equation54.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation54);
        boolean boolean58 = gcdSolutionWrapper45.equals((java.lang.Object) solution57);
        boolean boolean60 = gcdSolutionWrapper45.equals((java.lang.Object) (short) 0);
        int int61 = gcdSolutionWrapper45.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution63);
        gcdSolutionWrapper64.setGcd((int) ' ');
        gcdSolutionWrapper64.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int72 = solution71.getY();
        java.lang.String str73 = solution71.toString();
        solution71.setX((int) (short) 1);
        boolean boolean77 = solution71.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper64.setSolution(solution71);
        boolean boolean79 = gcdSolutionWrapper45.equals((java.lang.Object) gcdSolutionWrapper64);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation83 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int84 = equation83.c();
        int int85 = equation83.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution86 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation83);
        gcdSolutionWrapper64.setSolution(solution86);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution90 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        java.lang.String str91 = solution90.toString();
        solution90.setX((int) '#');
        gcdSolutionWrapper64.setSolution(solution90);
        boolean boolean95 = solution6.equals((java.lang.Object) solution90);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str47, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(solution57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Solution[x=97, y=1]" + "'", str73, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(solution86);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Solution[x=32, y=10]" + "'", str91, "Solution[x=32, y=10]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.a();
        int int6 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 10, 0);
        boolean boolean10 = equation3.equals((java.lang.Object) (byte) 10);
        int int11 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(97, (int) (short) 1);
        java.lang.String str4 = solution3.toString();
        solution3.setX((int) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper7.getSolution();
        java.lang.String str9 = solution8.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        int int9 = solution8.getX();
        int int10 = solution8.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution8);
        boolean boolean12 = solution2.equals((java.lang.Object) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        solution18.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        int int28 = solution27.getX();
        int int29 = solution27.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution27);
        int int31 = solution27.getX();
        gcdSolutionWrapper21.setSolution(solution27);
        boolean boolean33 = solution2.equals((java.lang.Object) gcdSolutionWrapper21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution37);
        gcdSolutionWrapper38.setGcd(97);
        gcdSolutionWrapper38.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int50 = solution49.getY();
        solution49.setY((int) (byte) 1);
        boolean boolean54 = solution49.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution49);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int59 = solution58.getY();
        java.lang.String str60 = solution58.toString();
        boolean boolean62 = solution58.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper55.setSolution(solution58);
        int int64 = solution58.getX();
        int int65 = solution58.getY();
        solution58.setY((int) (short) 10);
        solution58.setY(35);
        solution58.setX(0);
        boolean boolean72 = solution45.equals((java.lang.Object) solution58);
        gcdSolutionWrapper38.setSolution(solution45);
        solution45.setY((int) '4');
        gcdSolutionWrapper21.setSolution(solution45);
        java.lang.String str77 = solution45.toString();
        solution45.setX((int) (byte) 0);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Solution[x=97, y=1]" + "'", str60, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Solution[x=32, y=52]" + "'", str77, "Solution[x=32, y=52]");
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, (-1), 32);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        solution2.setY((int) (byte) 1);
        int int6 = solution2.getY();
        java.lang.String str7 = solution2.toString();
        solution2.setY(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        java.lang.String str25 = equation22.toString();
        boolean boolean26 = gcdSolutionWrapper18.equals((java.lang.Object) equation22);
        boolean boolean27 = solution2.equals((java.lang.Object) gcdSolutionWrapper18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int32 = equation31.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        java.lang.String str38 = solution36.toString();
        boolean boolean40 = solution36.equals((java.lang.Object) (-1L));
        boolean boolean41 = equation31.equals((java.lang.Object) (-1L));
        int int42 = equation31.a();
        boolean boolean43 = gcdSolutionWrapper18.equals((java.lang.Object) equation31);
        int int44 = equation31.b();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=97, y=1]" + "'", str7, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str25, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Solution[x=97, y=1]" + "'", str38, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = solution4.toString();
        int int6 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        boolean boolean19 = solution14.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper20.getSolution();
        java.lang.String str22 = gcdSolutionWrapper20.toString();
        gcdSolutionWrapper20.setGcd((int) (byte) 1);
        boolean boolean25 = equation10.equals((java.lang.Object) gcdSolutionWrapper20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int30 = equation29.c();
        int int31 = equation29.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        boolean boolean33 = gcdSolutionWrapper20.equals((java.lang.Object) solution32);
        boolean boolean35 = gcdSolutionWrapper20.equals((java.lang.Object) (short) 0);
        int int36 = gcdSolutionWrapper20.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution38);
        gcdSolutionWrapper39.setGcd((int) ' ');
        gcdSolutionWrapper39.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int47 = solution46.getY();
        java.lang.String str48 = solution46.toString();
        solution46.setX((int) (short) 1);
        boolean boolean52 = solution46.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper39.setSolution(solution46);
        boolean boolean54 = gcdSolutionWrapper20.equals((java.lang.Object) gcdSolutionWrapper39);
        boolean boolean55 = solution4.equals((java.lang.Object) boolean54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, 32, (int) '#');
        int int60 = equation59.c();
        boolean boolean61 = solution4.equals((java.lang.Object) int60);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=0, y=0]" + "'", str5, "Solution[x=0, y=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str22, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=97, y=1]" + "'", str48, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        java.lang.String str11 = solution9.toString();
        solution9.setX((int) (short) 1);
        boolean boolean15 = solution9.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper2.setSolution(solution9);
        java.lang.String str17 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation21);
        int int23 = solution22.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        int int28 = equation27.c();
        int int29 = equation27.c();
        int int30 = equation27.a();
        boolean boolean31 = solution22.equals((java.lang.Object) equation27);
        int int32 = equation27.c();
        boolean boolean33 = gcdSolutionWrapper2.equals((java.lang.Object) equation27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = null;
        gcdSolutionWrapper2.setSolution(solution34);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=100, solution=Solution[x=1, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=100, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        boolean boolean16 = solution12.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper9.setSolution(solution12);
        int int18 = solution12.getX();
        java.lang.String str19 = solution12.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution21);
        gcdSolutionWrapper22.setGcd((int) ' ');
        gcdSolutionWrapper22.setGcd((int) (short) 1);
        boolean boolean27 = solution12.equals((java.lang.Object) gcdSolutionWrapper22);
        int int28 = gcdSolutionWrapper22.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        boolean boolean41 = solution36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution36);
        boolean boolean43 = equation32.equals((java.lang.Object) gcdSolutionWrapper42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation47);
        solution48.setY(0);
        gcdSolutionWrapper42.setSolution(solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution53);
        gcdSolutionWrapper54.setGcd((int) ' ');
        gcdSolutionWrapper54.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int62 = solution61.getY();
        java.lang.String str63 = solution61.toString();
        solution61.setX((int) (short) 1);
        boolean boolean67 = solution61.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper54.setSolution(solution61);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper71 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution70);
        boolean boolean73 = gcdSolutionWrapper71.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution75 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution75);
        gcdSolutionWrapper76.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution81 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int82 = solution81.getY();
        java.lang.String str83 = solution81.toString();
        gcdSolutionWrapper76.setSolution(solution81);
        gcdSolutionWrapper71.setSolution(solution81);
        int int86 = solution81.getY();
        java.lang.String str87 = solution81.toString();
        gcdSolutionWrapper54.setSolution(solution81);
        boolean boolean89 = gcdSolutionWrapper42.equals((java.lang.Object) gcdSolutionWrapper54);
        int int90 = gcdSolutionWrapper42.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution91 = gcdSolutionWrapper42.getSolution();
        gcdSolutionWrapper22.setSolution(solution91);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Solution[x=97, y=1]" + "'", str19, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Solution[x=97, y=1]" + "'", str63, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Solution[x=97, y=1]" + "'", str83, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Solution[x=97, y=1]" + "'", str87, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(solution91);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution4.setY((int) (short) -1);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 100, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        solution12.setY((int) (byte) 1);
        boolean boolean17 = solution12.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper18.getSolution();
        java.lang.String str20 = gcdSolutionWrapper18.toString();
        gcdSolutionWrapper18.setGcd((int) (byte) 1);
        boolean boolean23 = equation8.equals((java.lang.Object) gcdSolutionWrapper18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int28 = equation27.c();
        int int29 = equation27.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        boolean boolean31 = gcdSolutionWrapper18.equals((java.lang.Object) solution30);
        boolean boolean33 = gcdSolutionWrapper18.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation38);
        int int40 = solution39.getX();
        int int41 = solution39.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution39);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int46 = solution45.getY();
        java.lang.String str47 = solution45.toString();
        solution45.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int54 = equation53.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation53);
        boolean boolean56 = solution45.equals((java.lang.Object) solution55);
        boolean boolean57 = solution39.equals((java.lang.Object) boolean56);
        gcdSolutionWrapper18.setSolution(solution39);
        boolean boolean59 = solution4.equals((java.lang.Object) gcdSolutionWrapper18);
        solution4.setY(35);
        int int62 = solution4.getX();
        solution4.setX((int) '#');
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str20, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Solution[x=97, y=1]" + "'", str47, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(solution55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, 35, (int) (byte) 100);
        int int4 = equation3.a();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution9);
        gcdSolutionWrapper10.setGcd(97);
        gcdSolutionWrapper10.setGcd(0);
        java.lang.String str15 = gcdSolutionWrapper10.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, 125);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int24 = solution23.getY();
        solution23.setY((int) (byte) 1);
        boolean boolean28 = solution23.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution23);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int33 = solution32.getY();
        java.lang.String str34 = solution32.toString();
        boolean boolean36 = solution32.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper29.setSolution(solution32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int43 = equation42.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation42);
        java.lang.String str45 = equation42.toString();
        int int46 = equation42.b();
        int int47 = equation42.b();
        boolean boolean48 = gcdSolutionWrapper38.equals((java.lang.Object) equation42);
        int int49 = equation42.a();
        int int50 = equation42.c();
        boolean boolean51 = solution18.equals((java.lang.Object) int50);
        gcdSolutionWrapper10.setSolution(solution18);
        boolean boolean53 = equation3.equals((java.lang.Object) solution18);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=100, y=32]]" + "'", str15, "GcdSolutionWrapper[gcd=0, solution=Solution[x=100, y=32]]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Solution[x=97, y=1]" + "'", str34, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str45, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        solution29.setX((int) (short) 1);
        boolean boolean35 = solution29.equals((java.lang.Object) true);
        solution29.setY(32);
        gcdSolutionWrapper13.setSolution(solution29);
        java.lang.String str39 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = gcdSolutionWrapper13.getSolution();
        solution40.setY((-35));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=32]]" + "'", str39, "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=32]]");
        org.junit.Assert.assertNotNull(solution40);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int9 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str11 = equation3.toString();
        int int12 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str11, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        java.lang.String str10 = equation8.toString();
        int int11 = equation8.a();
        java.lang.Object obj12 = null;
        boolean boolean13 = equation8.equals(obj12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        boolean boolean15 = gcdSolutionWrapper4.equals((java.lang.Object) solution14);
        gcdSolutionWrapper4.setGcd((int) '#');
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str10, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        gcdSolutionWrapper4.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution10);
        gcdSolutionWrapper11.setGcd(97);
        boolean boolean14 = gcdSolutionWrapper4.equals((java.lang.Object) gcdSolutionWrapper11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        solution19.setY((int) (byte) 10);
        int int22 = solution19.getY();
        boolean boolean23 = gcdSolutionWrapper4.equals((java.lang.Object) solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        int int27 = solution26.getY();
        boolean boolean28 = solution19.equals((java.lang.Object) solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        int int35 = solution34.getX();
        int int36 = solution34.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution34);
        boolean boolean39 = solution34.equals((java.lang.Object) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution41);
        boolean boolean44 = gcdSolutionWrapper42.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution49 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation48);
        solution49.setY((int) (byte) 10);
        int int52 = solution49.getY();
        gcdSolutionWrapper42.setSolution(solution49);
        boolean boolean54 = solution34.equals((java.lang.Object) solution49);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 100, (int) (short) 0, 1);
        int int59 = equation58.b();
        java.lang.Class<?> wildcardClass60 = equation58.getClass();
        boolean boolean61 = solution34.equals((java.lang.Object) wildcardClass60);
        boolean boolean62 = solution26.equals((java.lang.Object) boolean61);
        solution26.setY((-75));
        java.lang.String str65 = solution26.toString();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(solution49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Solution[x=100, y=-75]" + "'", str65, "Solution[x=100, y=-75]");
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        gcdSolutionWrapper3.setGcd((int) (short) 1);
        int int8 = gcdSolutionWrapper3.getGcd();
        int int9 = gcdSolutionWrapper3.getGcd();
        gcdSolutionWrapper3.setGcd((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        solution16.setY((int) (byte) 1);
        boolean boolean21 = solution16.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution16);
        int int24 = gcdSolutionWrapper23.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper23.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 100);
        gcdSolutionWrapper23.setSolution(solution28);
        gcdSolutionWrapper3.setSolution(solution28);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution28);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(solution25);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        solution6.setY((int) (byte) 1);
        boolean boolean11 = solution6.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        java.lang.String str17 = solution15.toString();
        boolean boolean19 = solution15.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper12.setSolution(solution15);
        int int21 = solution15.getX();
        int int22 = solution15.getY();
        solution15.setY((int) (short) 10);
        solution15.setY(35);
        solution15.setX(0);
        boolean boolean29 = solution2.equals((java.lang.Object) solution15);
        solution15.setY((-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int41 = solution40.getY();
        solution40.setY((int) (byte) 1);
        boolean boolean45 = solution40.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = gcdSolutionWrapper46.getSolution();
        java.lang.String str48 = gcdSolutionWrapper46.toString();
        gcdSolutionWrapper46.setGcd((int) (byte) 1);
        boolean boolean51 = equation36.equals((java.lang.Object) gcdSolutionWrapper46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int56 = equation55.c();
        int int57 = equation55.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation55);
        boolean boolean59 = gcdSolutionWrapper46.equals((java.lang.Object) solution58);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str64 = equation63.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation63);
        solution65.setY((int) (byte) 10);
        gcdSolutionWrapper46.setSolution(solution65);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution65);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution72);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int77 = solution76.getY();
        solution76.setY((int) (byte) 1);
        gcdSolutionWrapper73.setSolution(solution76);
        int int81 = gcdSolutionWrapper73.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution84 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int85 = solution84.getY();
        java.lang.String str86 = solution84.toString();
        solution84.setX((int) (short) 1);
        boolean boolean90 = solution84.equals((java.lang.Object) (-1.0f));
        java.lang.String str91 = solution84.toString();
        java.lang.String str92 = solution84.toString();
        gcdSolutionWrapper73.setSolution(solution84);
        java.lang.String str94 = solution84.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper95 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution84);
        boolean boolean96 = solution65.equals((java.lang.Object) gcdSolutionWrapper95);
        boolean boolean97 = solution15.equals((java.lang.Object) solution65);
        int int98 = solution15.getX();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=97, y=1]" + "'", str17, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str48, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str64, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Solution[x=97, y=1]" + "'", str86, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Solution[x=1, y=1]" + "'", str91, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Solution[x=1, y=1]" + "'", str92, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Solution[x=1, y=1]" + "'", str94, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str12 = equation11.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution13);
        java.lang.String str15 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper14.getSolution();
        boolean boolean17 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        int int25 = solution24.getX();
        int int26 = solution24.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution24);
        gcdSolutionWrapper27.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 0, (int) (byte) 10);
        boolean boolean39 = solution34.equals((java.lang.Object) (byte) 10);
        gcdSolutionWrapper27.setSolution(solution34);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution34);
        boolean boolean42 = equation3.equals((java.lang.Object) 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int47 = solution46.getX();
        java.lang.String str48 = solution46.toString();
        solution46.setX((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution53);
        boolean boolean56 = gcdSolutionWrapper54.equals((java.lang.Object) 1);
        gcdSolutionWrapper54.setGcd(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '#', 0);
        gcdSolutionWrapper54.setSolution(solution61);
        gcdSolutionWrapper51.setSolution(solution61);
        boolean boolean64 = equation3.equals((java.lang.Object) solution61);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 10, (int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper69 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution68);
        boolean boolean70 = equation3.equals((java.lang.Object) gcdSolutionWrapper69);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str12, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str15, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Solution[x=97, y=1]" + "'", str48, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (int) (short) 100, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = equation3.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=32, b=100, c=52]" + "'", str5, "Equation[a=32, b=100, c=52]");
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, (int) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution5);
        solution5.setY((-35));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        int int10 = solution5.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution5);
        java.lang.String str12 = solution5.toString();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=-1, y=-35]" + "'", str12, "Solution[x=-1, y=-35]");
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        int int13 = solution9.getY();
        java.lang.String str14 = solution9.toString();
        solution9.setY(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = gcdSolutionWrapper17.getSolution();
        int int19 = gcdSolutionWrapper17.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = gcdSolutionWrapper17.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 0);
        int int25 = solution24.getX();
        boolean boolean26 = gcdSolutionWrapper21.equals((java.lang.Object) solution24);
        boolean boolean27 = gcdSolutionWrapper4.equals((java.lang.Object) boolean26);
        gcdSolutionWrapper4.setGcd(1);
        java.lang.String str30 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=52, y=52]]" + "'", str30, "GcdSolutionWrapper[gcd=1, solution=Solution[x=52, y=52]]");
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 100, (int) (short) 1);
        int int4 = equation3.c();
        int int5 = equation3.c();
        int int6 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int7 = solution6.getY();
        java.lang.String str8 = solution6.toString();
        solution6.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int15 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean17 = solution6.equals((java.lang.Object) solution16);
        boolean boolean19 = solution16.equals((java.lang.Object) 0);
        boolean boolean20 = equation3.equals((java.lang.Object) solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int25 = equation24.c();
        int int26 = equation24.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int31 = solution30.getY();
        solution30.setY((int) (byte) 1);
        boolean boolean35 = solution30.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper36.getSolution();
        java.lang.String str38 = gcdSolutionWrapper36.toString();
        gcdSolutionWrapper36.setGcd((int) (byte) 1);
        boolean boolean41 = equation24.equals((java.lang.Object) gcdSolutionWrapper36);
        boolean boolean42 = equation3.equals((java.lang.Object) equation24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int44 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution45.setX((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=97, y=1]" + "'", str8, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str38, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertNotNull(solution45);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        int int20 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution21);
        int int23 = gcdSolutionWrapper22.getGcd();
        gcdSolutionWrapper22.setGcd((int) (short) 100);
        java.lang.String str26 = gcdSolutionWrapper22.toString();
        gcdSolutionWrapper22.setGcd((-1));
        java.lang.String str29 = gcdSolutionWrapper22.toString();
        int int30 = gcdSolutionWrapper22.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int35 = equation34.c();
        boolean boolean37 = equation34.equals((java.lang.Object) false);
        int int38 = equation34.a();
        int int39 = equation34.c();
        int int40 = equation34.b();
        int int41 = equation34.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation34);
        boolean boolean43 = gcdSolutionWrapper22.equals((java.lang.Object) equation34);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GcdSolutionWrapper[gcd=100, solution=Solution[x=97, y=1]]" + "'", str26, "GcdSolutionWrapper[gcd=100, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str29, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(solution42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        int int14 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        java.lang.String str20 = solution18.toString();
        solution18.setX((int) (short) 1);
        boolean boolean24 = solution18.equals((java.lang.Object) (-1.0f));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution18);
        boolean boolean26 = equation3.equals((java.lang.Object) gcdSolutionWrapper25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution30);
        java.lang.String str32 = gcdSolutionWrapper31.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = gcdSolutionWrapper31.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution34 = gcdSolutionWrapper31.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = gcdSolutionWrapper31.getSolution();
        java.lang.String str36 = gcdSolutionWrapper31.toString();
        boolean boolean37 = gcdSolutionWrapper25.equals((java.lang.Object) str36);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=97, y=1]" + "'", str20, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str32, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertNotNull(solution34);
        org.junit.Assert.assertNotNull(solution35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str36, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), 1, (int) (short) 100);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) 'a');
        java.lang.String str3 = solution2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=100, y=97]" + "'", str3, "Solution[x=100, y=97]");
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        int int7 = gcdSolutionWrapper2.getGcd();
        int int8 = gcdSolutionWrapper2.getGcd();
        int int9 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (short) 100, 32);
        boolean boolean14 = gcdSolutionWrapper2.equals((java.lang.Object) (byte) 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        boolean boolean10 = solution5.equals((java.lang.Object) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        boolean boolean14 = solution5.equals((java.lang.Object) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int19 = solution18.getY();
        solution18.setY((int) (byte) 1);
        boolean boolean23 = solution18.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper24.getSolution();
        solution25.setX((int) 'a');
        boolean boolean28 = solution5.equals((java.lang.Object) 'a');
        solution5.setY((int) (short) 0);
        boolean boolean32 = solution5.equals((java.lang.Object) "GcdSolutionWrapper[gcd=0, solution=null]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 100, (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(35, 35);
        gcdSolutionWrapper6.setSolution(solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(125, (int) (byte) 100, (int) (short) 100);
        boolean boolean15 = gcdSolutionWrapper6.equals((java.lang.Object) (short) 100);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        int int5 = gcdSolutionWrapper4.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        gcdSolutionWrapper4.setSolution(solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        boolean boolean19 = solution14.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution14);
        gcdSolutionWrapper4.setSolution(solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 0, (-35));
        solution25.setX((int) (byte) 10);
        solution25.setX((int) '#');
        int int30 = solution25.getY();
        int int31 = solution25.getY();
        gcdSolutionWrapper4.setSolution(solution25);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-35) + "'", int30 == (-35));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-35) + "'", int31 == (-35));
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        int int4 = equation3.c();
        int int5 = equation3.b();
        java.lang.String str6 = equation3.toString();
        int int7 = equation3.a();
        java.lang.String str8 = equation3.toString();
        int int9 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str6, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=0, b=0, c=-1]" + "'", str8, "Equation[a=0, b=0, c=-1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        java.lang.String str11 = equation9.toString();
        int int12 = equation9.a();
        java.lang.Object obj13 = null;
        boolean boolean14 = equation9.equals(obj13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation9);
        boolean boolean16 = gcdSolutionWrapper5.equals((java.lang.Object) solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (short) 10);
        solution19.setY(35);
        solution19.setX((-75));
        gcdSolutionWrapper5.setSolution(solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution19);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str11, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        int int19 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper13.setSolution(solution22);
        gcdSolutionWrapper13.setGcd((-35));
        int int26 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper13.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution29);
        boolean boolean32 = gcdSolutionWrapper30.equals((java.lang.Object) 1);
        java.lang.String str33 = gcdSolutionWrapper30.toString();
        gcdSolutionWrapper30.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper30.setSolution(solution38);
        int int40 = solution38.getX();
        int int41 = solution38.getX();
        gcdSolutionWrapper13.setSolution(solution38);
        java.lang.String str43 = solution38.toString();
        java.lang.String str44 = solution38.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-35) + "'", int26 == (-35));
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str33, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=100, y=-1]" + "'", str43, "Solution[x=100, y=-1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Solution[x=100, y=-1]" + "'", str44, "Solution[x=100, y=-1]");
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        int int14 = gcdSolutionWrapper9.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper9.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        java.lang.String str21 = solution19.toString();
        java.lang.String str22 = solution19.toString();
        int int23 = solution19.getY();
        solution19.setX((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution19);
        gcdSolutionWrapper9.setSolution(solution19);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=97, y=1]" + "'", str21, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Solution[x=97, y=1]" + "'", str22, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution3);
        gcdSolutionWrapper8.setGcd((int) (byte) 1);
        java.lang.String str11 = gcdSolutionWrapper8.toString();
        int int12 = gcdSolutionWrapper8.getGcd();
        gcdSolutionWrapper8.setGcd((int) (short) 10);
        gcdSolutionWrapper8.setGcd(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = gcdSolutionWrapper8.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=1, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(solution17);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        java.lang.String str6 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int11 = solution10.getY();
        java.lang.String str12 = solution10.toString();
        solution10.setX((int) (short) 1);
        solution10.setX((int) (byte) 1);
        java.lang.String str17 = solution10.toString();
        int int18 = solution10.getX();
        boolean boolean19 = gcdSolutionWrapper7.equals((java.lang.Object) solution10);
        int int20 = solution10.getY();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=97, y=1]" + "'", str12, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=1, y=1]" + "'", str17, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        int int7 = solution6.getX();
        int int8 = solution6.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution6);
        java.lang.String str10 = solution6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(52, solution6);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        gcdSolutionWrapper14.setGcd((int) ' ');
        gcdSolutionWrapper14.setGcd((int) (short) 1);
        java.lang.String str19 = gcdSolutionWrapper14.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        java.lang.String str24 = solution22.toString();
        solution22.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int31 = equation30.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        boolean boolean33 = solution22.equals((java.lang.Object) solution32);
        boolean boolean35 = solution22.equals((java.lang.Object) false);
        gcdSolutionWrapper14.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int40 = solution39.getY();
        java.lang.String str41 = solution39.toString();
        solution39.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean48 = solution39.equals((java.lang.Object) equation47);
        int int49 = equation47.c();
        int int50 = equation47.a();
        boolean boolean51 = gcdSolutionWrapper14.equals((java.lang.Object) equation47);
        boolean boolean52 = gcdSolutionWrapper11.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = gcdSolutionWrapper11.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = gcdSolutionWrapper11.getSolution();
        int int55 = solution54.getX();
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Solution[x=0, y=0]" + "'", str10, "Solution[x=0, y=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str19, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(solution32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Solution[x=97, y=1]" + "'", str41, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(solution53);
        org.junit.Assert.assertNotNull(solution54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        gcdSolutionWrapper4.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution10);
        gcdSolutionWrapper11.setGcd(97);
        boolean boolean14 = gcdSolutionWrapper4.equals((java.lang.Object) gcdSolutionWrapper11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 52);
        solution17.setY((-75));
        gcdSolutionWrapper11.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        boolean boolean34 = solution29.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = gcdSolutionWrapper35.getSolution();
        java.lang.String str37 = gcdSolutionWrapper35.toString();
        gcdSolutionWrapper35.setGcd((int) (byte) 1);
        boolean boolean40 = equation25.equals((java.lang.Object) gcdSolutionWrapper35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int45 = equation44.c();
        int int46 = equation44.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation44);
        boolean boolean48 = gcdSolutionWrapper35.equals((java.lang.Object) solution47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str53 = equation52.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution54 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation52);
        solution54.setY((int) (byte) 10);
        gcdSolutionWrapper35.setSolution(solution54);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution54);
        int int59 = gcdSolutionWrapper58.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation63);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution69 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation68);
        int int70 = solution69.getX();
        boolean boolean71 = equation63.equals((java.lang.Object) solution69);
        gcdSolutionWrapper58.setSolution(solution69);
        gcdSolutionWrapper11.setSolution(solution69);
        solution69.setY((int) ' ');
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str37, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str53, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertNotNull(solution69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        gcdSolutionWrapper4.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution10);
        gcdSolutionWrapper11.setGcd(97);
        boolean boolean14 = gcdSolutionWrapper4.equals((java.lang.Object) gcdSolutionWrapper11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) -1, 52);
        solution17.setY((-75));
        gcdSolutionWrapper11.setSolution(solution17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper25 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution24);
        gcdSolutionWrapper25.setGcd(97);
        gcdSolutionWrapper25.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        boolean boolean41 = solution36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int46 = solution45.getY();
        java.lang.String str47 = solution45.toString();
        boolean boolean49 = solution45.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper42.setSolution(solution45);
        int int51 = solution45.getX();
        int int52 = solution45.getY();
        solution45.setY((int) (short) 10);
        solution45.setY(35);
        solution45.setX(0);
        boolean boolean59 = solution32.equals((java.lang.Object) solution45);
        gcdSolutionWrapper25.setSolution(solution32);
        boolean boolean61 = solution17.equals((java.lang.Object) solution32);
        int int62 = solution32.getX();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Solution[x=97, y=1]" + "'", str47, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 32 + "'", int62 == 32);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        boolean boolean7 = gcdSolutionWrapper5.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        solution13.setX((int) (short) 1);
        boolean boolean19 = solution13.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = solution13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str25 = equation24.toString();
        int int26 = equation24.c();
        boolean boolean27 = solution13.equals((java.lang.Object) equation24);
        int int28 = equation24.c();
        boolean boolean29 = solution10.equals((java.lang.Object) equation24);
        boolean boolean30 = gcdSolutionWrapper5.equals((java.lang.Object) equation24);
        boolean boolean31 = solution2.equals((java.lang.Object) gcdSolutionWrapper5);
        gcdSolutionWrapper5.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        java.lang.String str39 = solution37.toString();
        solution37.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution37);
        int int43 = gcdSolutionWrapper42.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper42.getSolution();
        java.lang.String str45 = gcdSolutionWrapper42.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        solution48.setX((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int59 = solution58.getY();
        solution58.setY((int) (byte) 1);
        boolean boolean63 = solution58.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution58);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = gcdSolutionWrapper64.getSolution();
        java.lang.String str66 = gcdSolutionWrapper64.toString();
        gcdSolutionWrapper64.setGcd((int) (byte) 1);
        boolean boolean69 = equation54.equals((java.lang.Object) gcdSolutionWrapper64);
        int int70 = gcdSolutionWrapper64.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution71 = gcdSolutionWrapper64.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation75 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str76 = equation75.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution77 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation75);
        solution77.setY((int) (byte) 10);
        boolean boolean80 = solution71.equals((java.lang.Object) solution77);
        int int81 = solution77.getY();
        boolean boolean82 = solution48.equals((java.lang.Object) solution77);
        gcdSolutionWrapper42.setSolution(solution77);
        int int84 = solution77.getY();
        boolean boolean85 = gcdSolutionWrapper5.equals((java.lang.Object) solution77);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution88 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (short) 0);
        gcdSolutionWrapper5.setSolution(solution88);
        int int90 = gcdSolutionWrapper5.getGcd();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str25, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Solution[x=97, y=1]" + "'", str39, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-35) + "'", int43 == (-35));
        org.junit.Assert.assertNotNull(solution44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]" + "'", str45, "GcdSolutionWrapper[gcd=-35, solution=Solution[x=1, y=1]]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(solution65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str66, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(solution71);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str76, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        solution15.setY((int) (byte) 1);
        boolean boolean20 = solution15.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper21.getSolution();
        java.lang.String str23 = gcdSolutionWrapper21.toString();
        gcdSolutionWrapper21.setGcd((int) (byte) 1);
        boolean boolean26 = equation11.equals((java.lang.Object) gcdSolutionWrapper21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper21.getSolution();
        gcdSolutionWrapper21.setGcd((int) (byte) 100);
        gcdSolutionWrapper21.setGcd((int) (short) 10);
        boolean boolean32 = solution7.equals((java.lang.Object) (short) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution36);
        gcdSolutionWrapper37.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = gcdSolutionWrapper37.getSolution();
        boolean boolean41 = solution7.equals((java.lang.Object) solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int46 = solution45.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = gcdSolutionWrapper47.getSolution();
        int int49 = solution48.getX();
        boolean boolean50 = solution7.equals((java.lang.Object) int49);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str23, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(solution40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        int int22 = gcdSolutionWrapper15.getGcd();
        java.lang.String str23 = gcdSolutionWrapper15.toString();
        int int24 = gcdSolutionWrapper15.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str23, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution4.setY((int) (short) 0);
        java.lang.String str7 = solution4.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=35, y=0]" + "'", str7, "Solution[x=35, y=0]");
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 0, (int) (byte) 100, (int) '#');
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        gcdSolutionWrapper8.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution12);
        gcdSolutionWrapper13.setGcd((int) ' ');
        gcdSolutionWrapper13.setGcd((int) (short) 1);
        java.lang.String str18 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int22 = solution21.getY();
        java.lang.String str23 = solution21.toString();
        solution21.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int30 = equation29.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        boolean boolean32 = solution21.equals((java.lang.Object) solution31);
        boolean boolean34 = solution21.equals((java.lang.Object) false);
        gcdSolutionWrapper13.setSolution(solution21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int39 = solution38.getY();
        java.lang.String str40 = solution38.toString();
        solution38.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean47 = solution38.equals((java.lang.Object) equation46);
        int int48 = equation46.c();
        int int49 = equation46.a();
        boolean boolean50 = gcdSolutionWrapper13.equals((java.lang.Object) equation46);
        boolean boolean51 = gcdSolutionWrapper8.equals((java.lang.Object) equation46);
        java.lang.String str52 = gcdSolutionWrapper8.toString();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str18, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Solution[x=97, y=1]" + "'", str23, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(solution31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=97, y=1]" + "'", str40, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=0]]" + "'", str52, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=0]]");
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        gcdSolutionWrapper9.setGcd((-1));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        java.lang.String str18 = solution16.toString();
        solution16.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution16);
        gcdSolutionWrapper9.setSolution(solution16);
        java.lang.Class<?> wildcardClass24 = gcdSolutionWrapper9.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=97, y=1]" + "'", str18, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 10, (int) '4');
        int int4 = equation3.c();
        int int5 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str8 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-35), (int) '4');
        java.lang.String str12 = solution11.toString();
        boolean boolean13 = equation3.equals((java.lang.Object) solution11);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str8, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Solution[x=-35, y=52]" + "'", str12, "Solution[x=-35, y=52]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) -1, 32);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper13.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        java.lang.String str24 = solution22.toString();
        solution22.setX((int) (short) 1);
        boolean boolean28 = solution22.equals((java.lang.Object) (-1.0f));
        java.lang.String str29 = solution22.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str34 = equation33.toString();
        int int35 = equation33.c();
        boolean boolean36 = solution22.equals((java.lang.Object) equation33);
        int int37 = equation33.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        boolean boolean39 = gcdSolutionWrapper13.equals((java.lang.Object) equation33);
        int int40 = equation33.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        java.lang.String str42 = solution41.toString();
        int int43 = solution41.getX();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=1, y=1]" + "'", str29, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str34, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(solution41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=0, y=-35]" + "'", str42, "Solution[x=0, y=-35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 1, (int) ' ', 0);
        boolean boolean5 = equation3.equals((java.lang.Object) "GcdSolutionWrapper[gcd=0, solution=Solution[x=-1, y=52]]");
        java.lang.String str6 = equation3.toString();
        java.lang.Class<?> wildcardClass7 = equation3.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=1, b=32, c=0]" + "'", str6, "Equation[a=1, b=32, c=0]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        int int15 = solution14.getX();
        int int16 = solution14.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution14);
        boolean boolean18 = solution8.equals((java.lang.Object) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        solution24.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation32);
        int int34 = solution33.getX();
        int int35 = solution33.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution33);
        int int37 = solution33.getX();
        gcdSolutionWrapper27.setSolution(solution33);
        boolean boolean39 = solution8.equals((java.lang.Object) gcdSolutionWrapper27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution43);
        gcdSolutionWrapper44.setGcd(97);
        gcdSolutionWrapper44.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int56 = solution55.getY();
        solution55.setY((int) (byte) 1);
        boolean boolean60 = solution55.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int65 = solution64.getY();
        java.lang.String str66 = solution64.toString();
        boolean boolean68 = solution64.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper61.setSolution(solution64);
        int int70 = solution64.getX();
        int int71 = solution64.getY();
        solution64.setY((int) (short) 10);
        solution64.setY(35);
        solution64.setX(0);
        boolean boolean78 = solution51.equals((java.lang.Object) solution64);
        gcdSolutionWrapper44.setSolution(solution51);
        solution51.setY((int) '4');
        gcdSolutionWrapper27.setSolution(solution51);
        boolean boolean83 = equation3.equals((java.lang.Object) solution51);
        int int84 = solution51.getX();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str5, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Solution[x=97, y=1]" + "'", str66, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 32 + "'", int84 == 32);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        boolean boolean15 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        solution20.setY(0);
        gcdSolutionWrapper14.setSolution(solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        gcdSolutionWrapper26.setGcd((int) ' ');
        gcdSolutionWrapper26.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int34 = solution33.getY();
        java.lang.String str35 = solution33.toString();
        solution33.setX((int) (short) 1);
        boolean boolean39 = solution33.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper26.setSolution(solution33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution42 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution42);
        boolean boolean45 = gcdSolutionWrapper43.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution47);
        gcdSolutionWrapper48.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        java.lang.String str55 = solution53.toString();
        gcdSolutionWrapper48.setSolution(solution53);
        gcdSolutionWrapper43.setSolution(solution53);
        int int58 = solution53.getY();
        java.lang.String str59 = solution53.toString();
        gcdSolutionWrapper26.setSolution(solution53);
        boolean boolean61 = gcdSolutionWrapper14.equals((java.lang.Object) gcdSolutionWrapper26);
        int int62 = gcdSolutionWrapper14.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution63 = gcdSolutionWrapper14.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution63);
        int int65 = solution63.getY();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(solution20);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Solution[x=97, y=1]" + "'", str35, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Solution[x=97, y=1]" + "'", str55, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Solution[x=97, y=1]" + "'", str59, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(solution63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        int int21 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        java.lang.Class<?> wildcardClass23 = gcdSolutionWrapper15.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper15.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int27 = solution26.getY();
        solution26.setY((int) (byte) 1);
        boolean boolean31 = solution26.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        java.lang.String str37 = solution35.toString();
        boolean boolean39 = solution35.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper32.setSolution(solution35);
        int int41 = solution35.getX();
        java.lang.String str42 = solution35.toString();
        solution35.setX((int) (byte) 0);
        boolean boolean45 = gcdSolutionWrapper15.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation49 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, (int) (byte) 1, (int) (byte) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation49);
        boolean boolean51 = gcdSolutionWrapper15.equals((java.lang.Object) solution50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper54 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution53);
        boolean boolean56 = gcdSolutionWrapper54.equals((java.lang.Object) 1);
        java.lang.String str57 = gcdSolutionWrapper54.toString();
        gcdSolutionWrapper54.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper62 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution61);
        gcdSolutionWrapper62.setGcd((int) ' ');
        gcdSolutionWrapper62.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution67 = gcdSolutionWrapper62.getSolution();
        gcdSolutionWrapper62.setGcd((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution70 = gcdSolutionWrapper62.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution72 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution72);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution76 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int77 = solution76.getY();
        solution76.setY((int) (byte) 1);
        gcdSolutionWrapper73.setSolution(solution76);
        int int81 = gcdSolutionWrapper73.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution84 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int85 = solution84.getY();
        java.lang.String str86 = solution84.toString();
        solution84.setX((int) (short) 1);
        boolean boolean90 = solution84.equals((java.lang.Object) (-1.0f));
        java.lang.String str91 = solution84.toString();
        java.lang.String str92 = solution84.toString();
        gcdSolutionWrapper73.setSolution(solution84);
        java.lang.String str94 = solution84.toString();
        solution84.setY(52);
        gcdSolutionWrapper62.setSolution(solution84);
        gcdSolutionWrapper54.setSolution(solution84);
        gcdSolutionWrapper15.setSolution(solution84);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str57, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertNull(solution67);
        org.junit.Assert.assertNull(solution70);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Solution[x=97, y=1]" + "'", str86, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Solution[x=1, y=1]" + "'", str91, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Solution[x=1, y=1]" + "'", str92, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Solution[x=1, y=1]" + "'", str94, "Solution[x=1, y=1]");
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        java.lang.String str11 = solution9.toString();
        solution9.setX((int) (short) 1);
        boolean boolean15 = solution9.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper2.setSolution(solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution18 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution18);
        boolean boolean21 = gcdSolutionWrapper19.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution23);
        gcdSolutionWrapper24.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        gcdSolutionWrapper24.setSolution(solution29);
        gcdSolutionWrapper19.setSolution(solution29);
        int int34 = solution29.getY();
        java.lang.String str35 = solution29.toString();
        gcdSolutionWrapper2.setSolution(solution29);
        int int37 = solution29.getX();
        int int38 = solution29.getX();
        int int39 = solution29.getY();
        int int40 = solution29.getX();
        java.lang.String str41 = solution29.toString();
        java.lang.String str42 = solution29.toString();
        java.lang.Object obj43 = null;
        boolean boolean44 = solution29.equals(obj43);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Solution[x=97, y=1]" + "'", str35, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Solution[x=97, y=1]" + "'", str41, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Solution[x=97, y=1]" + "'", str42, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(100, (-75), (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        solution4.setX(35);
        java.lang.String str7 = solution4.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Solution[x=35, y=0]" + "'", str7, "Solution[x=35, y=0]");
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) (short) 10, 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        java.lang.String str6 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution3);
        int int8 = gcdSolutionWrapper7.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper7.getSolution();
        int int10 = solution9.getX();
        java.lang.String str11 = solution9.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Solution[x=97, y=1]" + "'", str6, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 100, (int) (short) 1);
        int int4 = equation3.c();
        int int5 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(solution6);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        gcdSolutionWrapper11.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int18 = equation17.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution21);
        boolean boolean24 = gcdSolutionWrapper22.equals((java.lang.Object) 1);
        boolean boolean25 = equation17.equals((java.lang.Object) boolean24);
        boolean boolean26 = gcdSolutionWrapper11.equals((java.lang.Object) boolean24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, 52);
        gcdSolutionWrapper11.setSolution(solution29);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        int int7 = equation3.a();
        int int8 = equation3.c();
        int int9 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int21 = solution20.getY();
        solution20.setY((int) (byte) 1);
        boolean boolean25 = solution20.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = gcdSolutionWrapper26.getSolution();
        java.lang.String str28 = gcdSolutionWrapper26.toString();
        gcdSolutionWrapper26.setGcd((int) (byte) 1);
        boolean boolean31 = equation16.equals((java.lang.Object) gcdSolutionWrapper26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution33);
        gcdSolutionWrapper34.setGcd((int) ' ');
        gcdSolutionWrapper34.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int42 = solution41.getY();
        java.lang.String str43 = solution41.toString();
        solution41.setX((int) (short) 1);
        boolean boolean47 = solution41.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper34.setSolution(solution41);
        gcdSolutionWrapper26.setSolution(solution41);
        int int50 = gcdSolutionWrapper26.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int57 = solution56.getY();
        solution56.setY((int) (byte) 1);
        gcdSolutionWrapper53.setSolution(solution56);
        gcdSolutionWrapper53.setGcd((int) (byte) 0);
        boolean boolean63 = gcdSolutionWrapper26.equals((java.lang.Object) (byte) 0);
        boolean boolean64 = solution12.equals((java.lang.Object) gcdSolutionWrapper26);
        gcdSolutionWrapper26.setGcd((int) '#');
        boolean boolean67 = equation3.equals((java.lang.Object) gcdSolutionWrapper26);
        java.lang.String str68 = equation3.toString();
        java.lang.String str69 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(solution27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str28, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=97, y=1]" + "'", str43, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str68, "Equation[a=97, b=0, c=52]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Equation[a=97, b=0, c=52]" + "'", str69, "Equation[a=97, b=0, c=52]");
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        int int8 = gcdSolutionWrapper2.getGcd();
        int int9 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper2.getSolution();
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(solution10);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) (byte) 100, 125);
        int int4 = equation3.b();
        int int5 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-1), (-75), (-75));
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int9 = equation8.c();
        int int10 = equation8.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        boolean boolean19 = solution14.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper20.getSolution();
        java.lang.String str22 = gcdSolutionWrapper20.toString();
        gcdSolutionWrapper20.setGcd((int) (byte) 1);
        boolean boolean25 = equation8.equals((java.lang.Object) gcdSolutionWrapper20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper20.getSolution();
        int int27 = gcdSolutionWrapper20.getGcd();
        java.lang.String str28 = gcdSolutionWrapper20.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        int int33 = equation32.c();
        int int34 = equation32.a();
        int int35 = equation32.a();
        boolean boolean36 = gcdSolutionWrapper20.equals((java.lang.Object) int35);
        gcdSolutionWrapper20.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper20.setSolution(solution41);
        boolean boolean43 = equation3.equals((java.lang.Object) gcdSolutionWrapper20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-1, b=-75, c=-75]" + "'", str4, "Equation[a=-1, b=-75, c=-75]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str22, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str28, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(solution44);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation8);
        int int10 = solution9.getX();
        int int11 = solution9.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution9);
        boolean boolean13 = solution3.equals((java.lang.Object) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation18);
        solution19.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution19);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        int int29 = solution28.getX();
        int int30 = solution28.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution28);
        int int32 = solution28.getX();
        gcdSolutionWrapper22.setSolution(solution28);
        boolean boolean34 = solution3.equals((java.lang.Object) gcdSolutionWrapper22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper39 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution38);
        gcdSolutionWrapper39.setGcd(97);
        gcdSolutionWrapper39.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int51 = solution50.getY();
        solution50.setY((int) (byte) 1);
        boolean boolean55 = solution50.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution50);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int60 = solution59.getY();
        java.lang.String str61 = solution59.toString();
        boolean boolean63 = solution59.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper56.setSolution(solution59);
        int int65 = solution59.getX();
        int int66 = solution59.getY();
        solution59.setY((int) (short) 10);
        solution59.setY(35);
        solution59.setX(0);
        boolean boolean73 = solution46.equals((java.lang.Object) solution59);
        gcdSolutionWrapper39.setSolution(solution46);
        solution46.setY((int) '4');
        gcdSolutionWrapper22.setSolution(solution46);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper78 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution46);
        gcdSolutionWrapper78.setGcd(100);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Solution[x=97, y=1]" + "'", str61, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 97 + "'", int65 == 97);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        gcdSolutionWrapper4.setGcd(0);
        gcdSolutionWrapper4.setGcd(125);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 100, (int) ' ');
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.b();
        int int6 = equation3.b();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int3 = solution2.getY();
        java.lang.String str4 = solution2.toString();
        solution2.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean11 = solution2.equals((java.lang.Object) equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        boolean boolean16 = solution2.equals((java.lang.Object) (byte) 1);
        int int17 = solution2.getY();
        solution2.setX((int) (short) -1);
        int int20 = solution2.getY();
        solution2.setX(100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Solution[x=97, y=1]" + "'", str4, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution4);
        gcdSolutionWrapper11.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int18 = equation17.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation17);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution21);
        boolean boolean24 = gcdSolutionWrapper22.equals((java.lang.Object) 1);
        boolean boolean25 = equation17.equals((java.lang.Object) boolean24);
        boolean boolean26 = gcdSolutionWrapper11.equals((java.lang.Object) boolean24);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        java.lang.String str31 = solution29.toString();
        solution29.setX((int) (short) 1);
        solution29.setX((int) (byte) 10);
        gcdSolutionWrapper11.setSolution(solution29);
        java.lang.String str37 = gcdSolutionWrapper11.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution39);
        gcdSolutionWrapper40.setGcd((int) ' ');
        gcdSolutionWrapper40.setGcd((int) (short) 1);
        java.lang.String str45 = gcdSolutionWrapper40.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int49 = solution48.getY();
        java.lang.String str50 = solution48.toString();
        solution48.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int57 = equation56.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation56);
        boolean boolean59 = solution48.equals((java.lang.Object) solution58);
        boolean boolean61 = solution48.equals((java.lang.Object) false);
        gcdSolutionWrapper40.setSolution(solution48);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int66 = solution65.getY();
        java.lang.String str67 = solution65.toString();
        solution65.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean74 = solution65.equals((java.lang.Object) equation73);
        int int75 = equation73.c();
        int int76 = equation73.a();
        boolean boolean77 = gcdSolutionWrapper40.equals((java.lang.Object) equation73);
        boolean boolean78 = gcdSolutionWrapper11.equals((java.lang.Object) boolean77);
        gcdSolutionWrapper11.setGcd(32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=97, y=1]" + "'", str31, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=10, y=1]]" + "'", str37, "GcdSolutionWrapper[gcd=32, solution=Solution[x=10, y=1]]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str45, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Solution[x=97, y=1]" + "'", str50, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Solution[x=97, y=1]" + "'", str67, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, 96, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        boolean boolean18 = solution13.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        java.lang.String str24 = solution22.toString();
        boolean boolean26 = solution22.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper19.setSolution(solution22);
        int int28 = solution22.getX();
        boolean boolean29 = equation7.equals((java.lang.Object) solution22);
        java.lang.String str30 = equation7.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int38 = solution37.getY();
        java.lang.String str39 = solution37.toString();
        solution37.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int46 = equation45.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation45);
        boolean boolean48 = solution37.equals((java.lang.Object) solution47);
        boolean boolean50 = solution47.equals((java.lang.Object) 0);
        boolean boolean51 = equation34.equals((java.lang.Object) solution47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int56 = equation55.c();
        int int57 = equation55.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution61 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int62 = solution61.getY();
        solution61.setY((int) (byte) 1);
        boolean boolean66 = solution61.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper67 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution61);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution68 = gcdSolutionWrapper67.getSolution();
        java.lang.String str69 = gcdSolutionWrapper67.toString();
        gcdSolutionWrapper67.setGcd((int) (byte) 1);
        boolean boolean72 = equation55.equals((java.lang.Object) gcdSolutionWrapper67);
        boolean boolean73 = equation34.equals((java.lang.Object) equation55);
        int int74 = equation55.a();
        int int75 = equation55.b();
        boolean boolean76 = equation7.equals((java.lang.Object) int75);
        boolean boolean77 = equation3.equals((java.lang.Object) boolean76);
        org.junit.Assert.assertNotNull(solution8);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Equation[a=1, b=10, c=-1]" + "'", str30, "Equation[a=1, b=10, c=-1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Solution[x=97, y=1]" + "'", str39, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(solution47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(solution68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str69, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation6);
        int int8 = solution7.getX();
        int int9 = solution7.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution7);
        gcdSolutionWrapper10.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int17 = solution16.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution16);
        boolean boolean19 = gcdSolutionWrapper10.equals((java.lang.Object) solution16);
        java.lang.String str20 = solution16.toString();
        solution16.setY((int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(96, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution16);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = gcdSolutionWrapper24.getSolution();
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=52]" + "'", str20, "Solution[x=1, y=52]");
        org.junit.Assert.assertNotNull(solution25);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        int int22 = gcdSolutionWrapper15.getGcd();
        java.lang.String str23 = gcdSolutionWrapper15.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        int int28 = equation27.c();
        int int29 = equation27.a();
        int int30 = equation27.a();
        boolean boolean31 = gcdSolutionWrapper15.equals((java.lang.Object) int30);
        gcdSolutionWrapper15.setGcd(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper15.setSolution(solution36);
        solution36.setX((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str23, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        java.lang.String str9 = solution7.toString();
        gcdSolutionWrapper2.setSolution(solution7);
        boolean boolean12 = gcdSolutionWrapper2.equals((java.lang.Object) (short) 0);
        gcdSolutionWrapper2.setGcd((int) (short) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        solution22.setY((int) (byte) 1);
        boolean boolean27 = solution22.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = gcdSolutionWrapper28.getSolution();
        java.lang.String str30 = gcdSolutionWrapper28.toString();
        gcdSolutionWrapper28.setGcd((int) (byte) 1);
        boolean boolean33 = equation18.equals((java.lang.Object) gcdSolutionWrapper28);
        java.lang.String str34 = equation18.toString();
        int int35 = equation18.c();
        boolean boolean36 = gcdSolutionWrapper2.equals((java.lang.Object) equation18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = gcdSolutionWrapper2.getSolution();
        solution37.setY(35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str30, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str34, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(solution37);
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        boolean boolean10 = gcdSolutionWrapper4.equals((java.lang.Object) 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = gcdSolutionWrapper4.getSolution();
        java.lang.String str12 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int17 = solution16.getY();
        java.lang.String str18 = solution16.toString();
        solution16.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution16);
        int int22 = gcdSolutionWrapper21.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper21.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper21.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        java.lang.String str29 = solution27.toString();
        solution27.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, 0, (int) (short) -1);
        boolean boolean36 = solution27.equals((java.lang.Object) equation35);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation40 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (-35), (int) (byte) 1);
        boolean boolean41 = solution27.equals((java.lang.Object) (byte) 1);
        int int42 = solution27.getY();
        solution27.setX((int) (short) -1);
        boolean boolean45 = gcdSolutionWrapper21.equals((java.lang.Object) solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution46 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution.INFINITE_SOLUTIONS;
        solution46.setY((int) (short) 100);
        boolean boolean49 = gcdSolutionWrapper21.equals((java.lang.Object) (short) 100);
        boolean boolean50 = gcdSolutionWrapper4.equals((java.lang.Object) boolean49);
        gcdSolutionWrapper4.setGcd((int) ' ');
        int int53 = gcdSolutionWrapper4.getGcd();
        gcdSolutionWrapper4.setGcd((int) 'a');
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(solution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GcdSolutionWrapper[gcd=10, solution=Solution[x=100, y=32]]" + "'", str12, "GcdSolutionWrapper[gcd=10, solution=Solution[x=100, y=32]]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Solution[x=97, y=1]" + "'", str18, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-35) + "'", int22 == (-35));
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=97, y=1]" + "'", str29, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(solution46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 32 + "'", int53 == 32);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int23 = equation22.c();
        int int24 = equation22.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation22);
        boolean boolean26 = gcdSolutionWrapper13.equals((java.lang.Object) solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation30 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int31 = equation30.c();
        int int32 = equation30.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        solution36.setY((int) (byte) 1);
        boolean boolean41 = solution36.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = gcdSolutionWrapper42.getSolution();
        java.lang.String str44 = gcdSolutionWrapper42.toString();
        gcdSolutionWrapper42.setGcd((int) (byte) 1);
        boolean boolean47 = equation30.equals((java.lang.Object) gcdSolutionWrapper42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation30);
        int int49 = solution48.getY();
        boolean boolean50 = gcdSolutionWrapper13.equals((java.lang.Object) int49);
        java.lang.String str51 = gcdSolutionWrapper13.toString();
        int int52 = gcdSolutionWrapper13.getGcd();
        java.lang.String str53 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str58 = equation57.toString();
        boolean boolean60 = equation57.equals((java.lang.Object) true);
        int int61 = equation57.c();
        java.lang.String str62 = equation57.toString();
        boolean boolean63 = gcdSolutionWrapper13.equals((java.lang.Object) str62);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(solution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str44, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-35) + "'", int49 == (-35));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str51, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str53, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str58, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str62, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        int int19 = gcdSolutionWrapper13.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper13.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = gcdSolutionWrapper13.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation29);
        int int31 = solution30.getX();
        int int32 = solution30.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution30);
        gcdSolutionWrapper33.setGcd((int) 'a');
        int int36 = gcdSolutionWrapper33.getGcd();
        java.lang.String str37 = gcdSolutionWrapper33.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = gcdSolutionWrapper33.getSolution();
        gcdSolutionWrapper13.setSolution(solution38);
        java.lang.String str40 = gcdSolutionWrapper13.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(solution24);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GcdSolutionWrapper[gcd=97, solution=Solution[x=0, y=0]]" + "'", str37, "GcdSolutionWrapper[gcd=97, solution=Solution[x=0, y=0]]");
        org.junit.Assert.assertNotNull(solution38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=0]]" + "'", str40, "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=0]]");
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str6 = equation5.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        boolean boolean18 = solution13.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int23 = solution22.getY();
        java.lang.String str24 = solution22.toString();
        boolean boolean26 = solution22.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper19.setSolution(solution22);
        gcdSolutionWrapper9.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int33 = equation32.c();
        boolean boolean35 = equation32.equals((java.lang.Object) false);
        boolean boolean36 = solution22.equals((java.lang.Object) false);
        java.lang.String str37 = solution22.toString();
        java.lang.String str38 = solution22.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str6, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Solution[x=97, y=1]" + "'", str37, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Solution[x=97, y=1]" + "'", str38, "Solution[x=97, y=1]");
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(32, (int) (byte) 100, 1);
        int int4 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        int int15 = solution12.getX();
        int int16 = solution12.getY();
        gcdSolutionWrapper9.setSolution(solution12);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution20);
        gcdSolutionWrapper21.setGcd((int) ' ');
        gcdSolutionWrapper21.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = gcdSolutionWrapper21.getSolution();
        int int27 = gcdSolutionWrapper21.getGcd();
        gcdSolutionWrapper21.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str34 = equation33.toString();
        boolean boolean35 = gcdSolutionWrapper21.equals((java.lang.Object) equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        int int38 = equation33.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation33);
        boolean boolean40 = gcdSolutionWrapper9.equals((java.lang.Object) solution39);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(solution26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str34, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        boolean boolean9 = solution4.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        java.lang.String str15 = solution13.toString();
        boolean boolean17 = solution13.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper10.setSolution(solution13);
        int int19 = solution13.getX();
        int int20 = solution13.getY();
        solution13.setY((int) (short) 10);
        solution13.setY(35);
        solution13.setY((int) 'a');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution13);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=97, y=1]" + "'", str15, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) (byte) 100, 32);
        int int4 = equation3.b();
        int int5 = equation3.a();
        int int6 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str8 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Equation[a=52, b=100, c=32]" + "'", str8, "Equation[a=52, b=100, c=32]");
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = gcdSolutionWrapper15.getSolution();
        int int22 = gcdSolutionWrapper15.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str28 = equation27.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution31 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution31);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int36 = solution35.getY();
        solution35.setY((int) (byte) 1);
        gcdSolutionWrapper32.setSolution(solution35);
        int int40 = gcdSolutionWrapper32.getGcd();
        boolean boolean41 = solution29.equals((java.lang.Object) gcdSolutionWrapper32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(52, solution29);
        boolean boolean43 = gcdSolutionWrapper15.equals((java.lang.Object) gcdSolutionWrapper42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = gcdSolutionWrapper42.getSolution();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str28, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(solution44);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        int int6 = gcdSolutionWrapper4.getGcd();
        int int7 = gcdSolutionWrapper4.getGcd();
        java.lang.String str8 = gcdSolutionWrapper4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper9.getSolution();
        java.lang.String str11 = gcdSolutionWrapper9.toString();
        gcdSolutionWrapper9.setGcd((int) (byte) 1);
        java.lang.String str14 = gcdSolutionWrapper9.toString();
        java.lang.String str15 = gcdSolutionWrapper9.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int20 = equation19.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation19);
        boolean boolean22 = gcdSolutionWrapper9.equals((java.lang.Object) equation19);
        java.lang.String str23 = gcdSolutionWrapper9.toString();
        int int24 = gcdSolutionWrapper9.getGcd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(solution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str11, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str14, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]" + "'", str23, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation5);
        int int7 = solution6.getX();
        int int8 = solution6.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution6);
        gcdSolutionWrapper9.setGcd((int) (short) 0);
        gcdSolutionWrapper9.setGcd((int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), 100);
        gcdSolutionWrapper9.setSolution(solution16);
        int int18 = solution16.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution16);
        solution16.setY((-35));
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (short) 10);
        solution2.setY(35);
        java.lang.String str5 = solution2.toString();
        solution2.setX((int) (byte) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=0, y=35]" + "'", str5, "Solution[x=0, y=35]");
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int5 = solution4.getY();
        solution4.setY((int) (byte) 1);
        int int8 = solution4.getY();
        java.lang.String str9 = solution4.toString();
        solution4.setY(97);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = gcdSolutionWrapper12.getSolution();
        int int14 = gcdSolutionWrapper12.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper12.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        int int17 = gcdSolutionWrapper16.getGcd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=97, y=1]" + "'", str9, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(125, (int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 100, solution3);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (short) 10);
        java.lang.String str3 = solution2.toString();
        int int4 = solution2.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution6);
        gcdSolutionWrapper7.setGcd((int) ' ');
        gcdSolutionWrapper7.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = gcdSolutionWrapper7.getSolution();
        gcdSolutionWrapper7.setGcd((int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper7.getSolution();
        boolean boolean16 = solution2.equals((java.lang.Object) solution15);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Solution[x=32, y=10]" + "'", str3, "Solution[x=32, y=10]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNull(solution12);
        org.junit.Assert.assertNull(solution15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int5 = equation3.c();
        int int6 = equation3.c();
        int int7 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(solution8);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) ' ', (int) '#');
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=0, b=32, c=35]" + "'", str4, "Equation[a=0, b=32, c=35]");
        org.junit.Assert.assertNotNull(solution5);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (byte) 10, 10);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.String str5 = equation3.toString();
        int int6 = equation3.a();
        java.lang.Object obj7 = null;
        boolean boolean8 = equation3.equals(obj7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int14 = solution13.getY();
        solution13.setY((int) (byte) 1);
        boolean boolean18 = solution13.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution13);
        gcdSolutionWrapper20.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int27 = equation26.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution30);
        boolean boolean33 = gcdSolutionWrapper31.equals((java.lang.Object) 1);
        boolean boolean34 = equation26.equals((java.lang.Object) boolean33);
        boolean boolean35 = gcdSolutionWrapper20.equals((java.lang.Object) boolean33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int39 = solution38.getY();
        java.lang.String str40 = solution38.toString();
        solution38.setX((int) (short) 1);
        solution38.setX((int) (byte) 10);
        gcdSolutionWrapper20.setSolution(solution38);
        boolean boolean46 = equation3.equals((java.lang.Object) gcdSolutionWrapper20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation50 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int51 = equation50.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation55 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int56 = equation55.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution57 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution59 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper60 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution59);
        boolean boolean62 = gcdSolutionWrapper60.equals((java.lang.Object) 1);
        boolean boolean63 = equation55.equals((java.lang.Object) boolean62);
        int int64 = equation55.a();
        int int65 = equation55.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution67 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution67);
        gcdSolutionWrapper68.setGcd((int) ' ');
        gcdSolutionWrapper68.setGcd((int) (short) 1);
        int int73 = gcdSolutionWrapper68.getGcd();
        int int74 = gcdSolutionWrapper68.getGcd();
        boolean boolean75 = equation55.equals((java.lang.Object) int74);
        boolean boolean76 = equation50.equals((java.lang.Object) equation55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution77 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation55);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution78 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation55);
        boolean boolean79 = equation3.equals((java.lang.Object) equation55);
        int int80 = equation3.a();
        java.lang.String str81 = equation3.toString();
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str5, "Equation[a=10, b=10, c=100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(solution28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Solution[x=97, y=1]" + "'", str40, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(solution57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(solution77);
        org.junit.Assert.assertNotNull(solution78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Equation[a=10, b=10, c=100]" + "'", str81, "Equation[a=10, b=10, c=100]");
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.c();
        boolean boolean6 = equation3.equals((java.lang.Object) false);
        int int7 = equation3.a();
        int int8 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int10 = solution9.getX();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        int int8 = equation3.c();
        java.lang.String str9 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        solution12.setY((int) (byte) 1);
        int int16 = solution12.getY();
        java.lang.String str17 = solution12.toString();
        solution12.setY(97);
        int int20 = solution12.getX();
        boolean boolean21 = equation3.equals((java.lang.Object) int20);
        int int22 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str9, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=97, y=1]" + "'", str17, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int6 = solution5.getY();
        solution5.setY((int) (byte) 1);
        boolean boolean10 = solution5.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 0, solution5);
        int int14 = gcdSolutionWrapper13.getGcd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) '#');
        int int3 = solution2.getY();
        int int4 = solution2.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        java.lang.String str11 = solution9.toString();
        solution9.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution9);
        solution9.setY((int) (short) 10);
        int int17 = solution9.getX();
        solution9.setY((int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution9);
        solution9.setX(32);
        boolean boolean23 = solution2.equals((java.lang.Object) solution9);
        solution2.setX(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, 0, 100);
        int int4 = equation3.b();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 10, (int) (short) 0);
        int int3 = solution2.getY();
        solution2.setY(100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int7 = equation3.b();
        int int8 = equation3.c();
        java.lang.String str9 = equation3.toString();
        int int10 = equation3.c();
        int int11 = equation3.b();
        int int12 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str9, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (-35), 1);
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str11 = equation10.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution12);
        java.lang.String str14 = gcdSolutionWrapper13.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper13.getSolution();
        boolean boolean16 = solution5.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (short) 10);
        solution19.setY(35);
        solution19.setX((-75));
        gcdSolutionWrapper13.setSolution(solution19);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str11, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str14, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(1, 52);
        int int5 = solution4.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper6 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-1), solution4);
        java.lang.String str7 = gcdSolutionWrapper6.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        solution15.setY((int) (byte) 1);
        boolean boolean20 = solution15.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = gcdSolutionWrapper21.getSolution();
        java.lang.String str23 = gcdSolutionWrapper21.toString();
        gcdSolutionWrapper21.setGcd((int) (byte) 1);
        boolean boolean26 = equation11.equals((java.lang.Object) gcdSolutionWrapper21);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution28 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution28);
        gcdSolutionWrapper29.setGcd((int) ' ');
        gcdSolutionWrapper29.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        java.lang.String str38 = solution36.toString();
        solution36.setX((int) (short) 1);
        boolean boolean42 = solution36.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper29.setSolution(solution36);
        gcdSolutionWrapper21.setSolution(solution36);
        int int45 = gcdSolutionWrapper21.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper48 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution47);
        boolean boolean50 = gcdSolutionWrapper48.equals((java.lang.Object) 1);
        java.lang.String str51 = gcdSolutionWrapper48.toString();
        gcdSolutionWrapper48.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper48.setSolution(solution56);
        int int58 = solution56.getX();
        gcdSolutionWrapper21.setSolution(solution56);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution60 = gcdSolutionWrapper21.getSolution();
        solution60.setX((int) '4');
        gcdSolutionWrapper6.setSolution(solution60);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper64 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution60);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=1, y=52]]" + "'", str7, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=1, y=52]]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str23, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Solution[x=97, y=1]" + "'", str38, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str51, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(solution60);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int24 = equation23.c();
        int int25 = equation23.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        boolean boolean27 = gcdSolutionWrapper14.equals((java.lang.Object) solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str32 = equation31.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        solution33.setY((int) (byte) 10);
        gcdSolutionWrapper14.setSolution(solution33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution33);
        int int38 = gcdSolutionWrapper37.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation42 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution43 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation42);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 1, (int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution48 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation47);
        int int49 = solution48.getX();
        boolean boolean50 = equation42.equals((java.lang.Object) solution48);
        gcdSolutionWrapper37.setSolution(solution48);
        java.lang.String str52 = solution48.toString();
        java.lang.String str53 = solution48.toString();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str32, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(solution43);
        org.junit.Assert.assertNotNull(solution48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Solution[x=-1, y=0]" + "'", str52, "Solution[x=-1, y=0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Solution[x=-1, y=0]" + "'", str53, "Solution[x=-1, y=0]");
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int5 = equation4.c();
        int int6 = equation4.a();
        int int7 = equation4.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        java.lang.String str9 = solution8.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(32, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        boolean boolean18 = gcdSolutionWrapper16.equals((java.lang.Object) "Equation[a=0, b=-1, c=35]");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int25 = solution24.getY();
        java.lang.String str26 = solution24.toString();
        solution24.setX((int) (short) 1);
        boolean boolean30 = solution24.equals((java.lang.Object) (-1.0f));
        java.lang.String str31 = solution24.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str36 = equation35.toString();
        int int37 = equation35.c();
        boolean boolean38 = solution24.equals((java.lang.Object) equation35);
        int int39 = equation35.c();
        boolean boolean40 = solution21.equals((java.lang.Object) equation35);
        boolean boolean41 = gcdSolutionWrapper16.equals((java.lang.Object) equation35);
        boolean boolean42 = solution13.equals((java.lang.Object) gcdSolutionWrapper16);
        boolean boolean43 = gcdSolutionWrapper10.equals((java.lang.Object) boolean42);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertNotNull(solution8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Solution[x=35, y=32]" + "'", str9, "Solution[x=35, y=32]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Solution[x=97, y=1]" + "'", str26, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Solution[x=1, y=1]" + "'", str31, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str36, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution7);
        boolean boolean10 = gcdSolutionWrapper8.equals((java.lang.Object) 1);
        boolean boolean11 = equation3.equals((java.lang.Object) boolean10);
        int int12 = equation3.a();
        int int13 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper16 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution15);
        gcdSolutionWrapper16.setGcd((int) ' ');
        gcdSolutionWrapper16.setGcd((int) (short) 1);
        int int21 = gcdSolutionWrapper16.getGcd();
        int int22 = gcdSolutionWrapper16.getGcd();
        boolean boolean23 = equation3.equals((java.lang.Object) int22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution25 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper26 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution25);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int30 = solution29.getY();
        solution29.setY((int) (byte) 1);
        gcdSolutionWrapper26.setSolution(solution29);
        boolean boolean34 = equation3.equals((java.lang.Object) gcdSolutionWrapper26);
        boolean boolean36 = equation3.equals((java.lang.Object) (short) 1);
        java.lang.String str37 = equation3.toString();
        java.lang.String str38 = equation3.toString();
        int int39 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str37, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str38, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        boolean boolean8 = solution3.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        java.lang.String str14 = solution12.toString();
        boolean boolean16 = solution12.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper9.setSolution(solution12);
        solution12.setX(1);
        java.lang.String str20 = solution12.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '#', 52, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        java.lang.String str29 = solution27.toString();
        solution27.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int36 = equation35.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        boolean boolean38 = solution27.equals((java.lang.Object) solution37);
        boolean boolean40 = solution37.equals((java.lang.Object) 0);
        boolean boolean41 = equation24.equals((java.lang.Object) solution37);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation45 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int46 = equation45.c();
        int int47 = equation45.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution51 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int52 = solution51.getY();
        solution51.setY((int) (byte) 1);
        boolean boolean56 = solution51.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper57 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution51);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution58 = gcdSolutionWrapper57.getSolution();
        java.lang.String str59 = gcdSolutionWrapper57.toString();
        gcdSolutionWrapper57.setGcd((int) (byte) 1);
        boolean boolean62 = equation45.equals((java.lang.Object) gcdSolutionWrapper57);
        boolean boolean63 = equation24.equals((java.lang.Object) equation45);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation24);
        boolean boolean65 = solution12.equals((java.lang.Object) equation24);
        int int66 = equation24.b();
        java.lang.String str67 = equation24.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Solution[x=97, y=1]" + "'", str14, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Solution[x=1, y=1]" + "'", str20, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Solution[x=97, y=1]" + "'", str29, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(solution58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str59, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(solution64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Equation[a=35, b=52, c=32]" + "'", str67, "Equation[a=35, b=52, c=32]");
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 100, (-35));
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        gcdSolutionWrapper3.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper3.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean16 = solution9.equals((java.lang.Object) solution15);
        gcdSolutionWrapper3.setSolution(solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 100, solution9);
        int int19 = gcdSolutionWrapper18.getGcd();
        org.junit.Assert.assertNull(solution6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((-35), (int) ' ', 0);
        java.lang.String str4 = equation3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        java.lang.Class<?> wildcardClass6 = solution5.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=-35, b=32, c=0]" + "'", str4, "Equation[a=-35, b=32, c=0]");
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) '4', (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution3);
        java.lang.String str5 = gcdSolutionWrapper4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper4.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = gcdSolutionWrapper4.getSolution();
        solution8.setY((int) (byte) 0);
        solution8.setX((int) 'a');
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]" + "'", str5, "GcdSolutionWrapper[gcd=0, solution=Solution[x=52, y=52]]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertNotNull(solution7);
        org.junit.Assert.assertNotNull(solution8);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int8 = solution7.getY();
        solution7.setY((int) (byte) 1);
        boolean boolean12 = solution7.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = gcdSolutionWrapper13.getSolution();
        java.lang.String str15 = gcdSolutionWrapper13.toString();
        gcdSolutionWrapper13.setGcd((int) (byte) 1);
        boolean boolean18 = equation3.equals((java.lang.Object) gcdSolutionWrapper13);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper13.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(0, (int) (byte) 10);
        gcdSolutionWrapper13.setSolution(solution22);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int28 = solution27.getY();
        solution27.setY((int) (byte) 1);
        boolean boolean32 = solution27.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper33 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int37 = solution36.getY();
        java.lang.String str38 = solution36.toString();
        boolean boolean40 = solution36.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper33.setSolution(solution36);
        int int42 = solution36.getX();
        java.lang.String str43 = solution36.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution45);
        gcdSolutionWrapper46.setGcd((int) ' ');
        gcdSolutionWrapper46.setGcd((int) (short) 1);
        boolean boolean51 = solution36.equals((java.lang.Object) gcdSolutionWrapper46);
        gcdSolutionWrapper13.setSolution(solution36);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = null;
        gcdSolutionWrapper13.setSolution(solution53);
        int int55 = gcdSolutionWrapper13.getGcd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str15, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Solution[x=97, y=1]" + "'", str38, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Solution[x=97, y=1]" + "'", str43, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) '#', (int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution4 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int13 = solution12.getY();
        solution12.setY((int) (byte) 1);
        boolean boolean17 = solution12.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper18 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution12);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper18.getSolution();
        java.lang.String str20 = gcdSolutionWrapper18.toString();
        gcdSolutionWrapper18.setGcd((int) (byte) 1);
        boolean boolean23 = equation8.equals((java.lang.Object) gcdSolutionWrapper18);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int28 = equation27.c();
        int int29 = equation27.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        boolean boolean31 = gcdSolutionWrapper18.equals((java.lang.Object) solution30);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation35 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str36 = equation35.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution37 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation35);
        solution37.setY((int) (byte) 10);
        gcdSolutionWrapper18.setSolution(solution37);
        boolean boolean41 = equation3.equals((java.lang.Object) gcdSolutionWrapper18);
        java.lang.String str42 = gcdSolutionWrapper18.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution47 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int48 = solution47.getY();
        java.lang.String str49 = solution47.toString();
        solution47.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((-35), solution47);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) ' ', solution47);
        gcdSolutionWrapper53.setGcd(52);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution56 = gcdSolutionWrapper53.getSolution();
        solution56.setX((int) (short) 0);
        gcdSolutionWrapper18.setSolution(solution56);
        org.junit.Assert.assertNotNull(solution4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str20, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str36, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=10]]" + "'", str42, "GcdSolutionWrapper[gcd=1, solution=Solution[x=0, y=10]]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Solution[x=97, y=1]" + "'", str49, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution56);
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        java.lang.String str5 = solution3.toString();
        solution3.setX((int) (short) 1);
        java.lang.String str8 = solution3.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(35, solution3);
        java.lang.Object obj10 = null;
        boolean boolean11 = gcdSolutionWrapper9.equals(obj10);
        gcdSolutionWrapper9.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = null;
        gcdSolutionWrapper9.setSolution(solution14);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Solution[x=97, y=1]" + "'", str5, "Solution[x=97, y=1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=1, y=1]" + "'", str8, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 10, solution3);
        gcdSolutionWrapper4.setGcd(97);
        gcdSolutionWrapper4.setGcd(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(32, (int) (byte) 10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        solution15.setY((int) (byte) 1);
        boolean boolean20 = solution15.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution24 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int25 = solution24.getY();
        java.lang.String str26 = solution24.toString();
        boolean boolean28 = solution24.equals((java.lang.Object) (-1L));
        gcdSolutionWrapper21.setSolution(solution24);
        int int30 = solution24.getX();
        int int31 = solution24.getY();
        solution24.setY((int) (short) 10);
        solution24.setY(35);
        solution24.setX(0);
        boolean boolean38 = solution11.equals((java.lang.Object) solution24);
        gcdSolutionWrapper4.setSolution(solution11);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation43 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str44 = equation43.toString();
        java.lang.Object obj45 = null;
        boolean boolean46 = equation43.equals(obj45);
        int int47 = equation43.b();
        boolean boolean48 = solution11.equals((java.lang.Object) equation43);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Solution[x=97, y=1]" + "'", str26, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str44, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', (int) (short) 10, 0);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) ' ', 52, 100);
        int int4 = equation3.a();
        int int5 = equation3.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-1), (int) '4');
        gcdSolutionWrapper15.setSolution(solution22);
        boolean boolean24 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        int int25 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertNotNull(solution26);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = gcdSolutionWrapper2.getSolution();
        int int8 = gcdSolutionWrapper2.getGcd();
        int int9 = gcdSolutionWrapper2.getGcd();
        java.lang.String str10 = gcdSolutionWrapper2.toString();
        java.lang.String str11 = gcdSolutionWrapper2.toString();
        gcdSolutionWrapper2.setGcd((int) (short) 10);
        gcdSolutionWrapper2.setGcd(35);
        org.junit.Assert.assertNull(solution7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str10, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str11, "GcdSolutionWrapper[gcd=1, solution=null]");
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        java.lang.String str11 = solution9.toString();
        solution9.setX((int) (short) 1);
        boolean boolean15 = solution9.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper2.setSolution(solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int20 = solution19.getY();
        java.lang.String str21 = solution19.toString();
        solution19.setX((int) (short) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int28 = equation27.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution29 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        boolean boolean30 = solution19.equals((java.lang.Object) solution29);
        int int31 = solution29.getY();
        gcdSolutionWrapper2.setSolution(solution29);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = gcdSolutionWrapper2.getSolution();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Solution[x=97, y=1]" + "'", str11, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Solution[x=97, y=1]" + "'", str21, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(solution29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-35) + "'", int31 == (-35));
        org.junit.Assert.assertNotNull(solution33);
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        int int6 = equation3.b();
        int int7 = equation3.b();
        int int8 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(solution9);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(100, (int) (byte) -1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int8 = equation7.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper12 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        boolean boolean14 = gcdSolutionWrapper12.equals((java.lang.Object) 1);
        boolean boolean15 = equation7.equals((java.lang.Object) boolean14);
        int int16 = equation7.a();
        boolean boolean17 = solution3.equals((java.lang.Object) int16);
        solution3.setY(10);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 1, solution3);
        gcdSolutionWrapper20.setGcd(1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution23 = gcdSolutionWrapper20.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation28 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution32 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int33 = solution32.getY();
        solution32.setY((int) (byte) 1);
        boolean boolean37 = solution32.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper38 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution39 = gcdSolutionWrapper38.getSolution();
        java.lang.String str40 = gcdSolutionWrapper38.toString();
        gcdSolutionWrapper38.setGcd((int) (byte) 1);
        boolean boolean43 = equation28.equals((java.lang.Object) gcdSolutionWrapper38);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution45 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper46 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution45);
        gcdSolutionWrapper46.setGcd((int) ' ');
        gcdSolutionWrapper46.setGcd((int) (short) 100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution53 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int54 = solution53.getY();
        java.lang.String str55 = solution53.toString();
        solution53.setX((int) (short) 1);
        boolean boolean59 = solution53.equals((java.lang.Object) (-1.0f));
        gcdSolutionWrapper46.setSolution(solution53);
        gcdSolutionWrapper38.setSolution(solution53);
        int int62 = gcdSolutionWrapper38.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution64 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper65 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution64);
        boolean boolean67 = gcdSolutionWrapper65.equals((java.lang.Object) 1);
        java.lang.String str68 = gcdSolutionWrapper65.toString();
        gcdSolutionWrapper65.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution73 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper65.setSolution(solution73);
        int int75 = solution73.getX();
        gcdSolutionWrapper38.setSolution(solution73);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper77 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution73);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution80 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((-75), (int) (byte) 0);
        solution80.setY((-1));
        gcdSolutionWrapper77.setSolution(solution80);
        boolean boolean84 = gcdSolutionWrapper20.equals((java.lang.Object) gcdSolutionWrapper77);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(solution23);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(solution39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str40, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Solution[x=97, y=1]" + "'", str55, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str68, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str5 = equation4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution6);
        java.lang.String str8 = gcdSolutionWrapper7.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = gcdSolutionWrapper7.getSolution();
        int int10 = gcdSolutionWrapper7.getGcd();
        java.lang.Object obj11 = null;
        boolean boolean12 = gcdSolutionWrapper7.equals(obj11);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertNotNull(solution9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, (int) (byte) 100, (int) (short) 1);
        int int4 = equation3.c();
        java.lang.String str5 = equation3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=52, b=100, c=1]" + "'", str5, "Equation[a=52, b=100, c=1]");
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(0, (int) (short) 100, (int) (short) 1);
        int int4 = equation3.b();
        int int5 = equation3.a();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        int int7 = gcdSolutionWrapper2.getGcd();
        int int8 = gcdSolutionWrapper2.getGcd();
        int int9 = gcdSolutionWrapper2.getGcd();
        int int10 = gcdSolutionWrapper2.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) 'a', (int) (short) 10, 32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution(10, 35);
        int int18 = solution17.getY();
        boolean boolean19 = equation14.equals((java.lang.Object) int18);
        int int20 = equation14.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution21 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation14);
        boolean boolean22 = gcdSolutionWrapper2.equals((java.lang.Object) solution21);
        gcdSolutionWrapper2.setGcd((-35));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertNotNull(solution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int4 = solution3.getY();
        solution3.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 10, solution3);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper10 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution9);
        gcdSolutionWrapper10.setGcd((int) ' ');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int16 = solution15.getY();
        java.lang.String str17 = solution15.toString();
        gcdSolutionWrapper10.setSolution(solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = gcdSolutionWrapper10.getSolution();
        java.lang.String str20 = gcdSolutionWrapper10.toString();
        java.lang.String str21 = gcdSolutionWrapper10.toString();
        gcdSolutionWrapper10.setGcd(100);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation27 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (short) 10, 10, 52);
        java.lang.String str28 = equation27.toString();
        int int29 = equation27.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution30 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation27);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation34 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        int int35 = equation34.c();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution36 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation34);
        int int37 = equation34.b();
        boolean boolean38 = solution30.equals((java.lang.Object) int37);
        gcdSolutionWrapper10.setSolution(solution30);
        int int40 = gcdSolutionWrapper10.getGcd();
        boolean boolean41 = solution3.equals((java.lang.Object) gcdSolutionWrapper10);
        java.lang.String str42 = gcdSolutionWrapper10.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Solution[x=97, y=1]" + "'", str17, "Solution[x=97, y=1]");
        org.junit.Assert.assertNotNull(solution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]" + "'", str20, "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]" + "'", str21, "GcdSolutionWrapper[gcd=32, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Equation[a=10, b=10, c=52]" + "'", str28, "Equation[a=10, b=10, c=52]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(solution30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(solution36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GcdSolutionWrapper[gcd=100, solution=Solution[x=35, y=0]]" + "'", str42, "GcdSolutionWrapper[gcd=100, solution=Solution[x=35, y=0]]");
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 100, (int) (byte) -1, (-35));
        int int4 = equation3.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution6);
        gcdSolutionWrapper7.setGcd((int) ' ');
        gcdSolutionWrapper7.setGcd((int) (short) 1);
        boolean boolean12 = equation3.equals((java.lang.Object) gcdSolutionWrapper7);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, 0);
        boolean boolean16 = gcdSolutionWrapper7.equals((java.lang.Object) solution15);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution19 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) -1);
        gcdSolutionWrapper7.setSolution(solution19);
        java.lang.String str21 = gcdSolutionWrapper7.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=-1]]" + "'", str21, "GcdSolutionWrapper[gcd=1, solution=Solution[x=97, y=-1]]");
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution1 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution1);
        gcdSolutionWrapper2.setGcd((int) ' ');
        gcdSolutionWrapper2.setGcd((int) (short) 1);
        int int7 = gcdSolutionWrapper2.getGcd();
        int int8 = gcdSolutionWrapper2.getGcd();
        java.lang.String str9 = gcdSolutionWrapper2.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution10 = gcdSolutionWrapper2.getSolution();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int15 = solution14.getY();
        solution14.setY((int) (byte) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution20 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (short) 0, (int) (short) 1);
        boolean boolean21 = solution14.equals((java.lang.Object) solution20);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper22 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution14);
        int int23 = solution14.getY();
        java.lang.String str24 = solution14.toString();
        gcdSolutionWrapper2.setSolution(solution14);
        int int26 = solution14.getX();
        int int27 = solution14.getY();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str9, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertNull(solution10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Solution[x=97, y=1]" + "'", str24, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution2);
        boolean boolean5 = gcdSolutionWrapper3.equals((java.lang.Object) 1);
        java.lang.String str6 = gcdSolutionWrapper3.toString();
        gcdSolutionWrapper3.setGcd(32);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution11 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) (byte) 100, (int) (byte) -1);
        gcdSolutionWrapper3.setSolution(solution11);
        int int13 = solution11.getX();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution11);
        java.lang.String str15 = solution11.toString();
        solution11.setX((int) 'a');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GcdSolutionWrapper[gcd=1, solution=null]" + "'", str6, "GcdSolutionWrapper[gcd=1, solution=null]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Solution[x=100, y=-1]" + "'", str15, "Solution[x=100, y=-1]");
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) '4', (int) '4', 0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution5 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        int int6 = solution5.getX();
        int int7 = solution5.getY();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) 'a', solution5);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation13 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution14 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation13);
        solution14.setY(0);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper17 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper(0, solution14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation21 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(97, 0, (int) '4');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution22 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation21);
        solution22.setY((int) (byte) 10);
        boolean boolean25 = solution14.equals((java.lang.Object) (byte) 10);
        boolean boolean27 = solution14.equals((java.lang.Object) (-1));
        solution14.setY((int) (byte) 0);
        gcdSolutionWrapper8.setSolution(solution14);
        solution14.setY((int) ' ');
        java.lang.String str33 = solution14.toString();
        java.lang.Class<?> wildcardClass34 = solution14.getClass();
        org.junit.Assert.assertNotNull(solution5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(solution14);
        org.junit.Assert.assertNotNull(solution22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Solution[x=35, y=32]" + "'", str33, "Solution[x=35, y=32]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) (short) 0, (int) (short) 0);
        java.lang.String str4 = equation3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Equation[a=35, b=0, c=0]" + "'", str4, "Equation[a=35, b=0, c=0]");
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution8 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int9 = solution8.getY();
        solution8.setY((int) (byte) 1);
        boolean boolean13 = solution8.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper14 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution8);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution15 = gcdSolutionWrapper14.getSolution();
        java.lang.String str16 = gcdSolutionWrapper14.toString();
        gcdSolutionWrapper14.setGcd((int) (byte) 1);
        boolean boolean19 = equation4.equals((java.lang.Object) gcdSolutionWrapper14);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation23 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int24 = equation23.c();
        int int25 = equation23.a();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution26 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation23);
        boolean boolean27 = gcdSolutionWrapper14.equals((java.lang.Object) solution26);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation31 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str32 = equation31.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution33 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation31);
        solution33.setY((int) (byte) 10);
        gcdSolutionWrapper14.setSolution(solution33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper37 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution33);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution40 = null;
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper41 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) 1, solution40);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution44 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int45 = solution44.getY();
        solution44.setY((int) (byte) 1);
        gcdSolutionWrapper41.setSolution(solution44);
        int int49 = gcdSolutionWrapper41.getGcd();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution52 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int53 = solution52.getY();
        java.lang.String str54 = solution52.toString();
        solution52.setX((int) (short) 1);
        boolean boolean58 = solution52.equals((java.lang.Object) (-1.0f));
        java.lang.String str59 = solution52.toString();
        java.lang.String str60 = solution52.toString();
        gcdSolutionWrapper41.setSolution(solution52);
        java.lang.String str62 = solution52.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper63 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) -1, solution52);
        boolean boolean64 = solution33.equals((java.lang.Object) gcdSolutionWrapper63);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation68 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(35, (int) (short) 0, 1);
        boolean boolean69 = gcdSolutionWrapper63.equals((java.lang.Object) 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(solution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str16, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(solution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str32, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution33);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Solution[x=97, y=1]" + "'", str54, "Solution[x=97, y=1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Solution[x=1, y=1]" + "'", str59, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Solution[x=1, y=1]" + "'", str60, "Solution[x=1, y=1]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Solution[x=1, y=1]" + "'", str62, "Solution[x=1, y=1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation4 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        java.lang.String str5 = equation4.toString();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution6 = com.thealgorithms.maths.LinearDiophantineEquationsSolver.findAnySolution(equation4);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (short) 0, solution6);
        java.lang.String str8 = gcdSolutionWrapper7.toString();
        int int9 = gcdSolutionWrapper7.getGcd();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Equation[a=0, b=-1, c=35]" + "'", str5, "Equation[a=0, b=-1, c=35]");
        org.junit.Assert.assertNotNull(solution6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]" + "'", str8, "GcdSolutionWrapper[gcd=0, solution=Solution[x=0, y=-35]]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation(52, (int) (byte) 1, (int) (byte) 0);
        int int4 = equation3.c();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution2 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', (int) (short) 0);
        solution2.setY((-35));
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution7 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) ' ', 1);
        java.lang.String str8 = solution7.toString();
        boolean boolean9 = solution2.equals((java.lang.Object) str8);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Solution[x=32, y=1]" + "'", str8, "Solution[x=32, y=1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation equation3 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation((int) (byte) 0, (int) (byte) -1, (int) '#');
        int int4 = equation3.c();
        int int5 = equation3.b();
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution9 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution((int) 'a', (int) (short) 1);
        int int10 = solution9.getY();
        solution9.setY((int) (byte) 1);
        boolean boolean14 = solution9.equals((java.lang.Object) 1);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper gcdSolutionWrapper15 = new com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper((int) (byte) -1, solution9);
        com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution solution16 = gcdSolutionWrapper15.getSolution();
        java.lang.String str17 = gcdSolutionWrapper15.toString();
        gcdSolutionWrapper15.setGcd((int) (byte) 1);
        boolean boolean20 = equation3.equals((java.lang.Object) gcdSolutionWrapper15);
        int int21 = gcdSolutionWrapper15.getGcd();
        boolean boolean23 = gcdSolutionWrapper15.equals((java.lang.Object) ' ');
        java.lang.Class<?> wildcardClass24 = gcdSolutionWrapper15.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(solution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]" + "'", str17, "GcdSolutionWrapper[gcd=-1, solution=Solution[x=97, y=1]]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }
}

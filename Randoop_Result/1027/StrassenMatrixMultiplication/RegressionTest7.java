package StrassenMatrixMultiplication;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test3501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3501");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        int[][] intArray21 = strassenMatrixMultiplication8.sub(intArray16, intArray20);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray36 = null;
        int[][] intArray37 = new int[][] {};
        strassenMatrixMultiplication35.split(intArray36, intArray37, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication41 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray59 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray60 = new int[][] { intArray47, intArray53, intArray59 };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray85 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray86 = new int[][] { intArray65, intArray70, intArray75, intArray80, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication41.multiply(intArray60, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication29.add(intArray37, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication28.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication22.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication8.sub(intArray90, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication7.sub(intArray94, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray94, 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3502");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication20.add(intArray82, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication14.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray88, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3503");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.sub(intArray15, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3504");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray48);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication11.sub(intArray25, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication10.add(intArray78, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.sub(intArray6, intArray78);
        strassenMatrixMultiplication1.split(intArray2, intArray6, (int) (short) 10, (int) (short) 10);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray6, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) (byte) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3505");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        strassenMatrixMultiplication10.split(intArray11, intArray89, (int) (short) 10, (int) (byte) 1);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication9.add(intArray89, intArray93);
        strassenMatrixMultiplication2.split(intArray4, intArray94, (int) (short) -1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray1, intArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3506");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[] intArray68 = new int[] {};
        int[] intArray69 = new int[] {};
        int[] intArray70 = new int[] {};
        int[] intArray71 = new int[] {};
        int[] intArray72 = new int[] {};
        int[][] intArray73 = new int[][] { intArray68, intArray69, intArray70, intArray71, intArray72 };
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.multiply(intArray73, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3507");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray77, 100, (int) (short) 0);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3508");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) '#', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test3509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3509");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 0, (int) (short) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3510");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray70);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) 'a', (int) (byte) 1);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray75, intArray76, (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test3511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3511");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray71, intArray77);
        java.lang.Class<?> wildcardClass79 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3512");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (byte) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3513");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray10 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray11 = new int[][] { intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication6.sub(intArray11, intArray57);
        int[] intArray65 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray65, intArray71, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication5.add(intArray59, intArray78);
        int[][] intArray80 = new int[][] {};
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication5.add(intArray80, intArray81);
        strassenMatrixMultiplication3.split(intArray4, intArray82, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication1.split(intArray2, intArray82, 10, (int) (short) -1);
        int[][] intArray89 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray89, (-1), (int) (short) 1);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.add(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3514");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray3 = new int[] { (byte) 0, 'a' };
        int[][] intArray4 = new int[][] { intArray3 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        strassenMatrixMultiplication6.split(intArray7, intArray85, (int) (short) 10, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication5.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray4, intArray90, (int) '4', (int) (short) 10);
        int[][] intArray94 = new int[][] {};
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 97]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3515");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) '4', (int) '4');
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray88, intArray89, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3516");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        int[][] intArray60 = null;
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray60, intArray61, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test3517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3517");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication1.add(intArray10, intArray62);
        int[][] intArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray10, intArray64, (int) (byte) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test3518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3518");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.multiply(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test3519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3519");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray80, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test3520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3520");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray79, intArray86);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray92, intArray93, (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3521");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray79, intArray80, 10, 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray90, (int) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3522");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication6.add(intArray68, intArray72);
        int[][] intArray74 = new int[][] {};
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray74, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray80, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test3523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3523");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray71, intArray77);
        java.lang.Class<?> wildcardClass79 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3524");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        strassenMatrixMultiplication6.split(intArray12, intArray21, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray84, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray84, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3525");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) (short) 10, (int) (short) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, (int) 'a', 1);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3526");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.sub(intArray89, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication2.sub(intArray93, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray1, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test3527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3527");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        strassenMatrixMultiplication6.join(intArray9, intArray73, (int) (short) -1, (int) '#');
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray77, intArray80, (int) (short) 100, (int) (byte) 100);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray80, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3528");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        strassenMatrixMultiplication15.split(intArray23, intArray35, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray14, intArray23, 0, 10);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3529");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[][] intArray69 = strassenMatrixMultiplication0.sub(intArray14, intArray68);
        int[][] intArray70 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.add(intArray70, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3530");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication15.sub(intArray75, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray80, intArray84);
        strassenMatrixMultiplication0.split(intArray14, intArray80, (int) '#', 0);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3531");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray86, 0, 100);
        java.lang.Class<?> wildcardClass90 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3532");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray36, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication20.join(intArray36, intArray92, (int) (short) 1, 0);
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray19, intArray92);
        java.lang.Class<?> wildcardClass97 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3533");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        strassenMatrixMultiplication6.join(intArray9, intArray73, (int) (short) -1, (int) '#');
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray77, intArray80, (int) (short) 100, (int) (byte) 100);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray80, intArray87);
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3534");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (short) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3535");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        strassenMatrixMultiplication6.join(intArray9, intArray73, (int) (short) -1, (int) '#');
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray77, intArray80, (int) (short) 100, (int) (byte) 100);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray80, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3536");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray74, intArray75, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3537");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray14, intArray66);
        int[][] intArray68 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication69.sub(intArray77, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray68, intArray81, (int) (short) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3538");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray71, intArray77);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3539");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication19.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray79, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray83, intArray88, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3540");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray36, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication20.join(intArray36, intArray92, (int) (short) 1, 0);
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray19, intArray92);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3541");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray1, intArray81, 10, (int) (short) -1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray88, intArray89, (int) (byte) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test3542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3542");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.sub(intArray60, intArray61);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication63 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray64 = null;
        int[][] intArray65 = new int[][] {};
        strassenMatrixMultiplication63.split(intArray64, intArray65, (int) '4', (-1));
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray65, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray72, (int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test3543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3543");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        int[][] intArray15 = strassenMatrixMultiplication2.sub(intArray10, intArray14);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication22.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication2.sub(intArray84, intArray87);
        strassenMatrixMultiplication0.split(intArray1, intArray84, (int) (short) 100, (int) (short) 1);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.add(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3544");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray28 = new int[][] { intArray27 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication23.sub(intArray28, intArray74);
        int[] intArray78 = new int[] { (short) 0 };
        int[] intArray80 = new int[] { (short) 0 };
        int[][] intArray81 = new int[][] { intArray78, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication22.multiply(intArray28, intArray81);
        strassenMatrixMultiplication15.join(intArray18, intArray82, (int) (short) -1, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray14, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3545");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray17 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray18 = new int[][] { intArray12, intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.sub(intArray18, intArray65);
        int[] intArray69 = new int[] { (short) 10, '#' };
        int[][] intArray70 = new int[][] { intArray69 };
        int[] intArray72 = new int[] { ' ' };
        int[] intArray74 = new int[] { ' ' };
        int[] intArray76 = new int[] { ' ' };
        int[] intArray78 = new int[] { ' ' };
        int[][] intArray79 = new int[][] { intArray72, intArray74, intArray76, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication7.multiply(intArray70, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray80, (int) (byte) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[32]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[32]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[32]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test3546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3546");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray86, 0, 100);
        java.lang.Class<?> wildcardClass90 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3547");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        strassenMatrixMultiplication0.join(intArray3, intArray67, (int) (short) -1, (int) '#');
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray72, (int) (byte) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test3548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3548");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray74, 0, 0);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray78, intArray79, (int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3549");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        int[][] intArray60 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray60, intArray63, (int) (short) -1, (int) (byte) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.multiply(intArray71, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test3550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3550");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray80, intArray81, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test3551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3551");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication4.add(intArray85, intArray88);
        strassenMatrixMultiplication2.split(intArray3, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray85, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray85, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3552");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray90, intArray91, (int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3553");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication54 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray55 = null;
        int[][] intArray56 = new int[][] {};
        strassenMatrixMultiplication54.split(intArray55, intArray56, (int) '4', (-1));
        int[][] intArray60 = null;
        int[][] intArray61 = strassenMatrixMultiplication0.add(intArray56, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray64 = strassenMatrixMultiplication0.sub(intArray62, intArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
    }

    @Test
    public void test3554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3554");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication2.sub(intArray10, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication2.sub(intArray84, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray90, (int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3555");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        strassenMatrixMultiplication14.split(intArray20, intArray80, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray80, intArray86, (-1), (int) '#');
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.add(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3556");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) (short) 10, (int) (short) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, 0, (int) (short) 0);
        int[][] intArray94 = null;
        int[] intArray97 = new int[] { 0, '4' };
        int[][] intArray98 = new int[][] { intArray97 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray94, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52]");
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test3557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3557");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray33 = new int[][] { intArray32 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication28.sub(intArray33, intArray79);
        int[] intArray83 = new int[] { (short) 0 };
        int[] intArray85 = new int[] { (short) 0 };
        int[][] intArray86 = new int[][] { intArray83, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication27.multiply(intArray33, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication15.sub(intArray23, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.add(intArray14, intArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3558");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray32);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        strassenMatrixMultiplication1.join(intArray63, intArray67, (int) ' ', (int) (byte) 1);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray71, intArray74, (-1), (int) (short) -1);
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray74, intArray81, (int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test3559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3559");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray71, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test3560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3560");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        int[][] intArray60 = null;
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray60, intArray61, (int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test3561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3561");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.add(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test3562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3562");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray71, intArray75, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication6.add(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication93 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray94 = null;
        int[][] intArray95 = new int[][] {};
        strassenMatrixMultiplication93.split(intArray94, intArray95, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray92, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test3563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3563");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        int[][] intArray21 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray83 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray90 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray91 = new int[][] { intArray76, intArray83, intArray90 };
        int[][] intArray92 = strassenMatrixMultiplication22.sub(intArray42, intArray91);
        int[][] intArray93 = strassenMatrixMultiplication15.add(intArray21, intArray42);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray14, intArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3564");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication6.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) ' ', (int) (byte) 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3565");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray36, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication20.join(intArray36, intArray92, (int) (short) 1, 0);
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray19, intArray92);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3566");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray87, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3567");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication55 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray56 = null;
        int[][] intArray57 = new int[][] {};
        strassenMatrixMultiplication55.split(intArray56, intArray57, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray54, intArray57, (int) (short) 0, 10);
        int[][] intArray64 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication65.sub(intArray73, intArray77);
        strassenMatrixMultiplication7.split(intArray64, intArray73, (int) 'a', 10);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.add(intArray6, intArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test3568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3568");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray16 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray17 = new int[][] { intArray11, intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.sub(intArray17, intArray64);
        int[][] intArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray17, intArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
    }

    @Test
    public void test3569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3569");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray62 = new int[] { (short) 10, '#' };
        int[][] intArray63 = new int[][] { intArray62 };
        int[] intArray65 = new int[] { ' ' };
        int[] intArray67 = new int[] { ' ' };
        int[] intArray69 = new int[] { ' ' };
        int[] intArray71 = new int[] { ' ' };
        int[][] intArray72 = new int[][] { intArray65, intArray67, intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray63, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray74, intArray75, (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3570");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray72, 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test3571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3571");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3572");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        java.lang.Class<?> wildcardClass73 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3573");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) 'a', (int) (byte) 1);
        int[][] intArray81 = null;
        strassenMatrixMultiplication0.join(intArray26, intArray81, (int) 'a', (int) (byte) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        strassenMatrixMultiplication0.join(intArray87, intArray91, (int) (short) 1, (-1));
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3574");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[] intArray86 = new int[] {};
        int[] intArray87 = new int[] {};
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[][] intArray90 = new int[][] { intArray86, intArray87, intArray88, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication1.add(intArray82, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray82, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3575");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        strassenMatrixMultiplication14.split(intArray20, intArray80, (int) (short) 10, 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray89, 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3576");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        strassenMatrixMultiplication0.split(intArray6, intArray75, (int) (short) 10, 10);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test3577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3577");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[] intArray79 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray80 = new int[][] { intArray79 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray87, intArray91, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3578");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[] intArray13 = new int[] { (short) 10 };
        int[] intArray15 = new int[] { (short) 10 };
        int[][] intArray16 = new int[][] { intArray13, intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray36 = null;
        int[][] intArray37 = new int[][] {};
        strassenMatrixMultiplication35.split(intArray36, intArray37, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication41 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray59 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray60 = new int[][] { intArray47, intArray53, intArray59 };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray85 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray86 = new int[][] { intArray65, intArray70, intArray75, intArray80, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication41.multiply(intArray60, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication29.add(intArray37, intArray87);
        strassenMatrixMultiplication17.split(intArray25, intArray37, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication6.split(intArray16, intArray37, (int) (short) -1, (int) (byte) 0);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray37, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3579");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray67, intArray70, 0, (int) (byte) 1);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray70, intArray77, 1, (int) (byte) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray82, intArray87, 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test3580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3580");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray78, intArray79, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test3581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3581");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        java.lang.Class<?> wildcardClass73 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3582");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray71 = new int[] { (short) 0 };
        int[] intArray73 = new int[] { (short) 0 };
        int[][] intArray74 = new int[][] { intArray71, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication15.multiply(intArray21, intArray74);
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[] intArray84 = new int[] { 'a', (short) 1 };
        int[] intArray87 = new int[] { 'a', (short) 1 };
        int[] intArray90 = new int[] { 'a', (short) 1 };
        int[] intArray93 = new int[] { 'a', (short) 1 };
        int[][] intArray94 = new int[][] { intArray78, intArray81, intArray84, intArray87, intArray90, intArray93 };
        int[][] intArray95 = strassenMatrixMultiplication14.add(intArray21, intArray94);
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (byte) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test3583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3583");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray62, intArray66, (int) ' ', (int) (byte) 1);
        int[][] intArray70 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray70, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3584");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[] intArray79 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray80 = new int[][] { intArray79 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray86, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3585");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray83, intArray84, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3586");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        strassenMatrixMultiplication0.split(intArray69, intArray82, (int) (short) 10, (int) '4');
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3587");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication26.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.sub(intArray86, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication14.add(intArray90, intArray91);
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray90, intArray93, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test3588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3588");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray72, (int) (short) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test3589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3589");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test3590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3590");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.sub(intArray30, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray30, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray14, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3591");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3592");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3593");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test3594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3594");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[] intArray6 = new int[] {};
        int[] intArray7 = new int[] {};
        int[] intArray8 = new int[] {};
        int[] intArray9 = new int[] {};
        int[] intArray10 = new int[] {};
        int[] intArray11 = new int[] {};
        int[][] intArray12 = new int[][] { intArray6, intArray7, intArray8, intArray9, intArray10, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication13.add(intArray75, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray81, intArray82);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication13.add(intArray86, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.add(intArray12, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3595");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3596");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.add(intArray77, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray83, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication15.add(intArray88, intArray92);
        strassenMatrixMultiplication0.split(intArray14, intArray93, (int) (short) 100, (int) (short) 0);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3597");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication58 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray59 = null;
        int[][] intArray60 = new int[][] {};
        strassenMatrixMultiplication58.split(intArray59, intArray60, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication58.sub(intArray66, intArray70);
        strassenMatrixMultiplication0.split(intArray57, intArray66, (int) 'a', 10);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray75, intArray76, (int) (short) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test3598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3598");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[] intArray62 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray62, intArray69, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication8.sub(intArray28, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray7, intArray28);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray7, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray82, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test3599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3599");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray79, intArray82);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication90 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray91 = null;
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication90.split(intArray91, intArray92, (int) '4', (-1));
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication84.sub(intArray92, intArray96);
        int[][] intArray98 = null;
        int[][] intArray99 = strassenMatrixMultiplication0.add(intArray92, intArray98);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test3600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3600");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[] intArray13 = new int[] { (short) 10 };
        int[] intArray15 = new int[] { (short) 10 };
        int[][] intArray16 = new int[][] { intArray13, intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray36 = null;
        int[][] intArray37 = new int[][] {};
        strassenMatrixMultiplication35.split(intArray36, intArray37, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication41 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray59 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray60 = new int[][] { intArray47, intArray53, intArray59 };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray85 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray86 = new int[][] { intArray65, intArray70, intArray75, intArray80, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication41.multiply(intArray60, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication29.add(intArray37, intArray87);
        strassenMatrixMultiplication17.split(intArray25, intArray37, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication6.split(intArray16, intArray37, (int) (short) -1, (int) (byte) 0);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray37, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3601");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray76, intArray79);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3602");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray83, intArray84, (int) (short) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3603");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray3 = new int[] { (byte) 0, 'a' };
        int[][] intArray4 = new int[][] { intArray3 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        strassenMatrixMultiplication6.split(intArray7, intArray85, (int) (short) 10, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication5.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray4, intArray90, (int) '4', (int) (short) 10);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 97]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test3604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3604");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) (short) 1, (int) (short) 100);
        java.lang.Class<?> wildcardClass86 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test3605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3605");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication1.sub(intArray61, intArray62);
        int[][] intArray64 = null;
        int[][] intArray65 = strassenMatrixMultiplication0.add(intArray63, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray66, intArray67, (int) (byte) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
    }

    @Test
    public void test3606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3606");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray89 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray90 = new int[][] { intArray75, intArray82, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray41, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.add(intArray20, intArray41);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray20, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3607");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray66, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray72, (-1), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test3608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3608");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[] intArray7 = new int[] { (short) 10 };
        int[] intArray9 = new int[] { (short) 10 };
        int[][] intArray10 = new int[][] { intArray7, intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray81);
        strassenMatrixMultiplication11.split(intArray19, intArray31, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray10, intArray31, (int) (short) -1, (int) (byte) 0);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3609");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray83, intArray84, (int) ' ', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3610");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[] intArray62 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray62, intArray69, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication8.sub(intArray28, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray7, intArray28);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray7, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray82, intArray83, 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test3611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3611");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        int[][] intArray54 = null;
        int[][] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray54, intArray55, 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
    }

    @Test
    public void test3612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3612");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        int[][] intArray60 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray60, intArray63, (int) (short) -1, (int) (byte) 0);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray70, intArray71, (int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test3613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3613");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray65, intArray66, (int) '#', (int) ' ');
        int[][] intArray70 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.add(intArray70, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3614");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray32 = null;
        int[][] intArray33 = new int[][] {};
        strassenMatrixMultiplication31.split(intArray32, intArray33, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication37 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray38 = null;
        int[][] intArray39 = new int[][] {};
        strassenMatrixMultiplication37.split(intArray38, intArray39, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication43 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray55 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray61 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray62 = new int[][] { intArray49, intArray55, intArray61 };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray87 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray88 = new int[][] { intArray67, intArray72, intArray77, intArray82, intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication43.multiply(intArray62, intArray88);
        int[][] intArray90 = strassenMatrixMultiplication31.add(intArray39, intArray89);
        strassenMatrixMultiplication19.split(intArray27, intArray39, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) (short) 0, 10);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray6, intArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test3615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3615");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray33 = null;
        int[][] intArray34 = new int[][] {};
        strassenMatrixMultiplication32.split(intArray33, intArray34, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication38 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray57 = new int[][] { intArray44, intArray50, intArray56 };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray83 = new int[][] { intArray62, intArray67, intArray72, intArray77, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication38.multiply(intArray57, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication26.add(intArray34, intArray84);
        strassenMatrixMultiplication14.split(intArray22, intArray34, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication2.split(intArray10, intArray22, (int) (short) 0, 10);
        strassenMatrixMultiplication0.split(intArray1, intArray10, (int) (byte) 0, (int) (short) 10);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (byte) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3616");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        int[][] intArray15 = strassenMatrixMultiplication2.sub(intArray10, intArray14);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        int[][] intArray22 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray54);
        strassenMatrixMultiplication16.split(intArray22, intArray82, (int) (short) 10, 1);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray82, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray1, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3617");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) '#', (int) (byte) 10);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test3618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3618");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        strassenMatrixMultiplication8.split(intArray16, intArray28, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = strassenMatrixMultiplication7.sub(intArray28, intArray84);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication1.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray89, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3619");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication85.sub(intArray93, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray84, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test3620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3620");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) (short) 1, (int) (short) 100);
        java.lang.Class<?> wildcardClass86 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test3621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3621");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray68, intArray69, (int) (byte) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test3622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3622");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray60 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray66 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray67 = new int[][] { intArray54, intArray60, intArray66 };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray87 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray92 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray93 = new int[][] { intArray72, intArray77, intArray82, intArray87, intArray92 };
        int[][] intArray94 = strassenMatrixMultiplication48.multiply(intArray67, intArray93);
        int[][] intArray95 = strassenMatrixMultiplication0.add(intArray20, intArray94);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test3623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3623");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray66, intArray70, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.add(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3624");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3625");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray82, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.sub(intArray10, intArray82);
        strassenMatrixMultiplication0.split(intArray6, intArray85, (int) (short) 1, (int) '#');
        java.lang.Class<?> wildcardClass89 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3626");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) (short) 10, (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.multiply(intArray84, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3627");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray10 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray11 = new int[][] { intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication6.sub(intArray11, intArray57);
        int[] intArray65 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray65, intArray71, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication5.add(intArray59, intArray78);
        int[][] intArray80 = new int[][] {};
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication5.add(intArray80, intArray81);
        strassenMatrixMultiplication3.split(intArray4, intArray82, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication1.split(intArray2, intArray82, 10, (int) (short) -1);
        int[][] intArray89 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray89, (-1), (int) (short) 1);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, (int) (byte) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3628");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray81, intArray82, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test3629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3629");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray6 = null;
        int[][] intArray7 = new int[][] {};
        strassenMatrixMultiplication5.split(intArray6, intArray7, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray49);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication12.sub(intArray26, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication11.add(intArray79, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication4.sub(intArray7, intArray79);
        strassenMatrixMultiplication2.split(intArray3, intArray7, (int) (short) 10, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray7, (int) 'a', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3630");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        strassenMatrixMultiplication0.split(intArray6, intArray75, (int) (short) 10, 10);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray81, intArray82, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test3631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3631");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[] intArray83 = new int[] { (byte) 1, 1, 1, 100, '#' };
        int[][] intArray84 = new int[][] { intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication2.multiply(intArray57, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray1, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1, 100, 35]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3632");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray62 = new int[] { (short) 10, '#' };
        int[][] intArray63 = new int[][] { intArray62 };
        int[] intArray65 = new int[] { ' ' };
        int[] intArray67 = new int[] { ' ' };
        int[] intArray69 = new int[] { ' ' };
        int[] intArray71 = new int[] { ' ' };
        int[][] intArray72 = new int[][] { intArray65, intArray67, intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray63, intArray72);
        int[][] intArray74 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication75.sub(intArray83, intArray87);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray74, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3633");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray71, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3634");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication12.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray72, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[] intArray84 = new int[] { ' ', (short) 10, (short) 100, '#' };
        int[] intArray89 = new int[] { ' ', (short) 10, (short) 100, '#' };
        int[][] intArray90 = new int[][] { intArray84, intArray89 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray79, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[32, 10, 100, 35]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[32, 10, 100, 35]");
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test3635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3635");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication1.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray78, intArray84, (int) (short) 1, (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray88, intArray89, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test3636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3636");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.sub(intArray30, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.add(intArray83, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.sub(intArray11, intArray83);
        strassenMatrixMultiplication6.split(intArray7, intArray11, 0, 10);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray11, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, (int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3637");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        int[][] intArray60 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray60, intArray63, (int) (short) -1, (int) (byte) 0);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray70, intArray71, (int) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test3638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3638");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, (int) (short) 1, 100);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3639");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        strassenMatrixMultiplication8.split(intArray16, intArray28, (int) 'a', (int) (byte) 1);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.sub(intArray16, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3640");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        strassenMatrixMultiplication2.split(intArray10, intArray22, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray1, intArray22, (int) (byte) 10, (int) (short) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.multiply(intArray92, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3641");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        strassenMatrixMultiplication14.split(intArray20, intArray29, (int) 'a', 1);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray29, intArray84, 1, (int) (short) 0);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray88, intArray89, (int) (byte) 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test3642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3642");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) (short) 10, (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray89, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3643");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, 1, (int) (short) -1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray73, intArray74, (int) ' ', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test3644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3644");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[][] intArray69 = strassenMatrixMultiplication0.sub(intArray14, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray71, (int) '#', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test3645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3645");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 100, '4', (byte) -1, 10, '4' };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.sub(intArray89, intArray92);
        strassenMatrixMultiplication0.split(intArray7, intArray93, (-1), (int) 'a');
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 52, -1, 10, 52]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3646");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[] intArray72 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray76 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray80 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray84 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray88 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[] intArray92 = new int[] { (byte) 1, (byte) 100, 'a' };
        int[][] intArray93 = new int[][] { intArray72, intArray76, intArray80, intArray84, intArray88, intArray92 };
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray68, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 100, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3647");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray54);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication17.sub(intArray31, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication16.add(intArray84, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication9.sub(intArray12, intArray84);
        strassenMatrixMultiplication7.split(intArray8, intArray12, 0, 10);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication1.sub(intArray12, intArray91);
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray91, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test3648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3648");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        int[][] intArray68 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication69.sub(intArray77, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray68, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3649");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3650");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        int[][] intArray80 = null;
        strassenMatrixMultiplication6.join(intArray79, intArray80, 0, 0);
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray80, intArray84, 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test3651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3651");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray78, intArray81, (int) (short) 100, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray6, intArray81, (int) (byte) 10, 1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test3652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3652");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        int[][] intArray19 = null;
        int[][] intArray20 = strassenMatrixMultiplication7.sub(intArray15, intArray19);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication21.join(intArray89, intArray90, (int) (short) 1, (int) (short) 1);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication7.add(intArray89, intArray94);
        strassenMatrixMultiplication0.split(intArray6, intArray89, (int) (byte) 1, (int) (short) -1);
        java.lang.Class<?> wildcardClass99 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3653");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray24 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray25 = new int[][] { intArray19, intArray24 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.sub(intArray25, intArray72);
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray25, intArray74, 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3654");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        int[][] intArray19 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        strassenMatrixMultiplication13.split(intArray19, intArray79, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication6.split(intArray8, intArray79, (int) 'a', (int) (byte) 100);
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray8, intArray86, (int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test3655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3655");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 100, '4', (byte) -1, 10, '4' };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.sub(intArray89, intArray92);
        strassenMatrixMultiplication0.split(intArray7, intArray93, (-1), (int) 'a');
        java.lang.Class<?> wildcardClass97 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 52, -1, 10, 52]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3656");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        strassenMatrixMultiplication14.split(intArray20, intArray80, (int) (short) 10, 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3657");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        int[][] intArray54 = null;
        int[][] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray54, intArray55, (int) (byte) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
    }

    @Test
    public void test3658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3658");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        int[][] intArray19 = null;
        int[][] intArray20 = strassenMatrixMultiplication7.sub(intArray15, intArray19);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication21.join(intArray89, intArray90, (int) (short) 1, (int) (short) 1);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication7.add(intArray89, intArray94);
        strassenMatrixMultiplication0.split(intArray6, intArray89, (int) (byte) 1, (int) (short) -1);
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3659");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray82, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.sub(intArray10, intArray82);
        strassenMatrixMultiplication0.split(intArray6, intArray85, (int) (short) 1, (int) '#');
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3660");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3661");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 100, '4', (byte) -1, 10, '4' };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.sub(intArray89, intArray92);
        strassenMatrixMultiplication0.split(intArray7, intArray93, (-1), (int) 'a');
        java.lang.Class<?> wildcardClass97 = intArray7.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 52, -1, 10, 52]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3662");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication3.sub(intArray11, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray55 = new int[][] { intArray42, intArray48, intArray54 };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray81 = new int[][] { intArray60, intArray65, intArray70, intArray75, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication36.multiply(intArray55, intArray81);
        int[][] intArray83 = strassenMatrixMultiplication24.add(intArray32, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication23.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication17.sub(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication3.sub(intArray85, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication2.sub(intArray89, intArray90);
        strassenMatrixMultiplication0.split(intArray1, intArray91, 0, (int) (byte) 100);
        java.lang.Class<?> wildcardClass95 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3663");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        int[][] intArray80 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray80, intArray89, 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3664");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray81, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3665");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication3.sub(intArray11, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray55 = new int[][] { intArray42, intArray48, intArray54 };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray81 = new int[][] { intArray60, intArray65, intArray70, intArray75, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication36.multiply(intArray55, intArray81);
        int[][] intArray83 = strassenMatrixMultiplication24.add(intArray32, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication23.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication17.sub(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication3.sub(intArray85, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication2.sub(intArray89, intArray90);
        strassenMatrixMultiplication0.split(intArray1, intArray91, 0, (int) (byte) 100);
        java.lang.Class<?> wildcardClass95 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3666");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication85.sub(intArray93, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray84, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test3667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3667");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = strassenMatrixMultiplication1.sub(intArray9, intArray89);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray9, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3668");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.add(intArray76, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray76, intArray82);
        java.lang.Class<?> wildcardClass84 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test3669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3669");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        int[][] intArray60 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray60, intArray63, (int) (short) -1, (int) (byte) 0);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray72 = strassenMatrixMultiplication0.add(intArray70, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test3670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3670");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.add(intArray76, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray76, intArray82);
        java.lang.Class<?> wildcardClass84 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test3671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3671");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.add(intArray76, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray76, intArray82);
        java.lang.Class<?> wildcardClass84 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test3672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3672");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        strassenMatrixMultiplication14.split(intArray20, intArray80, (int) (short) 10, 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) 'a', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3673");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        int[][] intArray73 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray73, intArray76, 0, (int) 'a');
        java.lang.Class<?> wildcardClass83 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3674");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray82, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.sub(intArray10, intArray82);
        strassenMatrixMultiplication0.split(intArray6, intArray85, (int) (short) 1, (int) '#');
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3675");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray87 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray88 = new int[][] { intArray75, intArray81, intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication15.add(intArray69, intArray88);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray14, intArray89, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3676");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray82, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray90, intArray91, (int) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3677");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        strassenMatrixMultiplication0.join(intArray3, intArray67, (int) (short) -1, (int) '#');
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray72, (int) 'a', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test3678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3678");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray71, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray80, (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test3679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3679");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test3680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3680");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray27 = new int[][] { intArray26 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication22.sub(intArray27, intArray73);
        int[] intArray77 = new int[] { (short) 0 };
        int[] intArray79 = new int[] { (short) 0 };
        int[][] intArray80 = new int[][] { intArray77, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication21.multiply(intArray27, intArray80);
        strassenMatrixMultiplication14.join(intArray17, intArray81, (int) (short) -1, (int) '#');
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray81, intArray85, (int) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test3681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3681");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray82, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3682");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        strassenMatrixMultiplication7.split(intArray13, intArray73, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray2, intArray73, (int) 'a', (int) (byte) 100);
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray80, intArray81, (int) (short) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3683");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        int[][] intArray73 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray73, intArray76, 0, (int) 'a');
        java.lang.Class<?> wildcardClass83 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3684");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray5, intArray73);
        int[][] intArray75 = null;
        strassenMatrixMultiplication0.join(intArray5, intArray75, 0, (int) '4');
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray80, (int) (short) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test3685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3685");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication56 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray57 = null;
        int[][] intArray58 = new int[][] {};
        strassenMatrixMultiplication56.split(intArray57, intArray58, (int) '4', (-1));
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication2.add(intArray58, intArray62);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray64 = strassenMatrixMultiplication0.add(intArray1, intArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test3686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3686");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray82, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.sub(intArray10, intArray82);
        strassenMatrixMultiplication0.split(intArray6, intArray85, (int) (short) 1, (int) '#');
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3687");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[] intArray86 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray87 = new int[][] { intArray86 };
        int[] intArray89 = new int[] { (short) 0 };
        int[][] intArray90 = new int[][] { intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication7.sub(intArray87, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray6, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3688");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3689");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication17.add(intArray79, intArray83);
        strassenMatrixMultiplication15.split(intArray16, intArray84, (int) (short) -1, (int) (byte) -1);
        strassenMatrixMultiplication0.split(intArray14, intArray84, (int) (byte) 1, 0);
        java.lang.Class<?> wildcardClass91 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3690");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray86, 0, 100);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.multiply(intArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3691");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        strassenMatrixMultiplication4.split(intArray5, intArray87, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication3.add(intArray87, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication2.sub(intArray87, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray1, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test3692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3692");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) (short) 1, (int) (short) 100);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test3693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3693");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray77, intArray81);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication89 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray90 = null;
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication89.split(intArray90, intArray91, (int) '4', (-1));
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication83.sub(intArray91, intArray95);
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.add(intArray95, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3694");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication1.sub(intArray61, intArray62);
        int[][] intArray64 = null;
        int[][] intArray65 = strassenMatrixMultiplication0.add(intArray63, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray66, intArray67, 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
    }

    @Test
    public void test3695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3695");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication90 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray91 = null;
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication90.split(intArray91, intArray92, (int) '4', (-1));
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication84.sub(intArray92, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray83, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test3696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3696");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) '4', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3697");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.add(intArray60, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test3698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3698");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        int[][] intArray21 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        strassenMatrixMultiplication15.split(intArray21, intArray81, (int) (short) -1, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray14, intArray81, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test3699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3699");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray80, (int) (short) 100, (int) (short) 0);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test3700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3700");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        strassenMatrixMultiplication6.split(intArray12, intArray21, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray84, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray84, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3701");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication17.add(intArray79, intArray83);
        strassenMatrixMultiplication15.split(intArray16, intArray84, (int) (short) -1, (int) (byte) -1);
        strassenMatrixMultiplication0.split(intArray14, intArray84, (int) (byte) 1, 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.multiply(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3702");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication17.add(intArray79, intArray83);
        strassenMatrixMultiplication15.split(intArray16, intArray84, (int) (short) -1, (int) (byte) -1);
        strassenMatrixMultiplication0.split(intArray14, intArray84, (int) (byte) 1, 0);
        java.lang.Class<?> wildcardClass91 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3703");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray89 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray90 = new int[][] { intArray75, intArray82, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray41, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.add(intArray20, intArray41);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray20, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3704");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        strassenMatrixMultiplication14.split(intArray20, intArray29, (int) 'a', 1);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray29, intArray84, 1, (int) (short) 0);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray88, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test3705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3705");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray70, intArray71, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test3706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3706");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication82.sub(intArray90, intArray94);
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray94, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test3707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3707");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication2.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray83, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3708");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray66, intArray69, (-1), (int) (byte) 100);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray73, intArray74, 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test3709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3709");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.multiply(intArray73, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test3710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3710");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) 'a', (int) (byte) 1);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.add(intArray14, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray83, intArray84, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3711");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray60 = new int[] { (short) 0 };
        int[] intArray62 = new int[] { (short) 0 };
        int[][] intArray63 = new int[][] { intArray60, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication4.multiply(intArray10, intArray63);
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[][] intArray83 = new int[][] { intArray67, intArray70, intArray73, intArray76, intArray79, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication3.add(intArray10, intArray83);
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray10, intArray85, (-1), (-1));
        strassenMatrixMultiplication0.split(intArray1, intArray85, (int) (byte) 100, (int) (short) 1);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, (int) (short) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3712");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray66, intArray69, (int) (short) -1, (int) (byte) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray66, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3713");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) '#', (int) (byte) 10);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) (short) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test3714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3714");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        strassenMatrixMultiplication1.join(intArray69, intArray70, (int) (short) 1, (int) (short) 1);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray69, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.multiply(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test3715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3715");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (short) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3716");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[] intArray62 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray62, intArray69, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication8.sub(intArray28, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray7, intArray28);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray7, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray82, intArray83, (int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test3717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3717");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        int[][] intArray21 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray83 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray90 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray91 = new int[][] { intArray76, intArray83, intArray90 };
        int[][] intArray92 = strassenMatrixMultiplication22.sub(intArray42, intArray91);
        int[][] intArray93 = strassenMatrixMultiplication15.add(intArray21, intArray42);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication14.sub(intArray21, intArray94);
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) (byte) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test3718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3718");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray71, intArray75, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication6.add(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray92, intArray93, (int) ' ', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3719");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.add(intArray64, intArray68);
        strassenMatrixMultiplication0.split(intArray1, intArray69, (int) (short) -1, (int) (byte) -1);
        int[][] intArray73 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray73, intArray86, (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3720");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray67 = new int[] { (short) 0 };
        int[] intArray69 = new int[] { (short) 0 };
        int[][] intArray70 = new int[][] { intArray67, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication11.multiply(intArray17, intArray70);
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[] intArray83 = new int[] { 'a', (short) 1 };
        int[] intArray86 = new int[] { 'a', (short) 1 };
        int[] intArray89 = new int[] { 'a', (short) 1 };
        int[][] intArray90 = new int[][] { intArray74, intArray77, intArray80, intArray83, intArray86, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication10.add(intArray17, intArray90);
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray17, intArray92, (-1), (-1));
        int[][] intArray96 = strassenMatrixMultiplication2.sub(intArray8, intArray92);
        strassenMatrixMultiplication0.split(intArray1, intArray96, 0, 0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3721");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        strassenMatrixMultiplication14.join(intArray82, intArray83, (int) (short) 1, (int) (short) 1);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray82, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (-1), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3722");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray65, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray68, intArray69, (int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test3723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3723");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        strassenMatrixMultiplication3.split(intArray11, intArray23, (int) 'a', (int) (byte) 1);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.sub(intArray11, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray82, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray82, (int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3724");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) 'a', (int) (byte) 1);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.add(intArray14, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray83, intArray84, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3725");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray78, intArray82);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication85.sub(intArray93, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray84, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test3726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3726");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray83 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray69, intArray76, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray35, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.add(intArray14, intArray35);
        strassenMatrixMultiplication6.split(intArray7, intArray14, (int) (byte) 10, (int) '#');
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray14, intArray90, 0, (int) (byte) 1);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3727");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication58 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray59 = null;
        int[][] intArray60 = new int[][] {};
        strassenMatrixMultiplication58.split(intArray59, intArray60, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication58.sub(intArray66, intArray70);
        strassenMatrixMultiplication0.split(intArray57, intArray66, (int) 'a', 10);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.multiply(intArray75, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test3728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3728");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray88, intArray91);
        int[][] intArray93 = new int[][] {};
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray92, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3729");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray88, (int) ' ', 10);
        java.lang.Class<?> wildcardClass92 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3730");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray88, intArray91);
        int[][] intArray93 = new int[][] {};
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray92, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3731");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        int[][] intArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray6, intArray7, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
    }

    @Test
    public void test3732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3732");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 0, (int) (short) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3733");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[] intArray64 = new int[] { 100, '#', 10 };
        int[][] intArray65 = new int[][] { intArray64 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray65, intArray68, (int) (short) 0, (int) (short) 0);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.add(intArray68, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication77.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.multiply(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test3734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3734");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication6.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) ' ', (int) (byte) 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.multiply(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3735");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray88, (int) ' ', 10);
        java.lang.Class<?> wildcardClass92 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3736");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.add(intArray1, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test3737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3737");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        strassenMatrixMultiplication15.split(intArray23, intArray35, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray14, intArray23, 0, 10);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray93, intArray94, (int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3738");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray88, intArray91);
        int[][] intArray93 = new int[][] {};
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray92, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3739");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray72, intArray76, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication7.add(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication1.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray90, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3740");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.sub(intArray60, intArray61);
        int[][] intArray63 = null;
        int[][] intArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray63, intArray64, (int) (byte) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test3741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3741");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        strassenMatrixMultiplication8.split(intArray16, intArray28, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = strassenMatrixMultiplication7.sub(intArray28, intArray84);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication1.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray89, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3742");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 0, (int) (short) 100);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication82.sub(intArray90, intArray94);
        strassenMatrixMultiplication0.split(intArray81, intArray90, (int) (byte) 10, 1);
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3743");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray72, (int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test3744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3744");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication26.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication6.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray88, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3745");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication26.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication6.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray88, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3746");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication15.sub(intArray75, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray80, intArray84);
        strassenMatrixMultiplication0.split(intArray14, intArray80, (int) '#', 0);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, (int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3747");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication56 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray57 = null;
        int[][] intArray58 = new int[][] {};
        strassenMatrixMultiplication56.split(intArray57, intArray58, (int) '4', (-1));
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication2.add(intArray58, intArray62);
        strassenMatrixMultiplication0.split(intArray1, intArray58, (int) (short) 10, 10);
        int[][] intArray67 = null;
        int[][] intArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray69 = strassenMatrixMultiplication0.sub(intArray67, intArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test3748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3748");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        int[][] intArray60 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication61.sub(intArray69, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.multiply(intArray60, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test3749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3749");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray76, (int) (byte) 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray86, (int) '4', (int) (short) 0);
        java.lang.Class<?> wildcardClass90 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3750");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        int[][] intArray92 = new int[][] {};
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3751");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray26 = new int[][] { intArray25 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication21.sub(intArray26, intArray72);
        int[] intArray76 = new int[] { (short) 0 };
        int[] intArray78 = new int[] { (short) 0 };
        int[][] intArray79 = new int[][] { intArray76, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication20.multiply(intArray26, intArray79);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        strassenMatrixMultiplication14.split(intArray79, intArray83, 100, 0);
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray90, (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test3752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3752");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray66);
        int[][] intArray68 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        strassenMatrixMultiplication8.split(intArray68, intArray71, (int) (short) -1, (int) (byte) 0);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication7.add(intArray71, intArray78);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray2, intArray79, (int) '#', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test3753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3753");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray87, intArray90);
        java.lang.Class<?> wildcardClass92 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3754");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication17.add(intArray79, intArray83);
        strassenMatrixMultiplication15.split(intArray16, intArray84, (int) (short) -1, (int) (byte) -1);
        strassenMatrixMultiplication0.split(intArray14, intArray84, (int) (byte) 1, 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) (byte) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3755");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray81 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray67, intArray74, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray33, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.add(intArray12, intArray33);
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray85, intArray86, 10, 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication90 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray91 = null;
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication90.split(intArray91, intArray92, (int) '4', (-1));
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication6.add(intArray92, intArray96);
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray96, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test3756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3756");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray28, intArray82, (-1), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test3757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3757");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray87, intArray90);
        java.lang.Class<?> wildcardClass92 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3758");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.add(intArray81, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.sub(intArray9, intArray81);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray85, (int) 'a', (int) '4');
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, (int) '#', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3759");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray76, (int) (byte) 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray86, (int) '4', (int) (short) 0);
        java.lang.Class<?> wildcardClass90 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3760");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication26.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication6.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray88, intArray93);
        java.lang.Class<?> wildcardClass95 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3761");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, (int) (short) 1, 100);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (short) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3762");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test3763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3763");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray10 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray11 = new int[][] { intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication6.sub(intArray11, intArray57);
        int[][] intArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray11, intArray60, (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test3764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3764");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        strassenMatrixMultiplication3.split(intArray11, intArray23, (int) 'a', (int) (byte) 1);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.sub(intArray11, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray82, intArray86);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication2.add(intArray90, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray1, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test3765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3765");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray71, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test3766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3766");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray37, intArray66, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
    }

    @Test
    public void test3767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3767");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication85.sub(intArray93, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray83, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test3768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3768");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray87, intArray88);
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray88, intArray90, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3769");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 0, (int) (short) 100);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication82.sub(intArray90, intArray94);
        strassenMatrixMultiplication0.split(intArray81, intArray90, (int) (byte) 10, 1);
        java.lang.Class<?> wildcardClass99 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3770");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray87, intArray90);
        java.lang.Class<?> wildcardClass92 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3771");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray40);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication3.sub(intArray17, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.add(intArray70, intArray71);
        int[][] intArray73 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray73, intArray76, (int) (short) 0, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray1, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test3772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3772");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test3773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3773");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        strassenMatrixMultiplication1.split(intArray7, intArray76, (int) (short) 10, 10);
        int[][] intArray82 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray82, 10, (int) (short) 10);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) '4', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test3774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3774");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) '4', (int) '4');
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray88, intArray89, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3775");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.add(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray76, intArray79);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication2.add(intArray89, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray1, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3776");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication3.sub(intArray11, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        int[][] intArray71 = strassenMatrixMultiplication2.sub(intArray16, intArray70);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray72 = strassenMatrixMultiplication0.add(intArray1, intArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test3777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3777");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray78, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3778");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication19.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray79, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray83, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[] intArray92 = new int[] {};
        int[] intArray93 = new int[] {};
        int[] intArray94 = new int[] {};
        int[] intArray95 = new int[] {};
        int[][] intArray96 = new int[][] { intArray92, intArray93, intArray94, intArray95 };
        int[][] intArray97 = strassenMatrixMultiplication7.add(intArray88, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray6, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test3779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3779");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (byte) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3780");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray21 = strassenMatrixMultiplication0.sub(intArray14, intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
    }

    @Test
    public void test3781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3781");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray75, intArray76, 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test3782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3782");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray72, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test3783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3783");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        strassenMatrixMultiplication0.join(intArray3, intArray67, (int) (short) -1, (int) '#');
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 100, (int) (byte) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray89, intArray95);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3784");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        strassenMatrixMultiplication0.join(intArray3, intArray67, (int) (short) -1, (int) '#');
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 100, (int) (byte) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray89, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3785");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = new int[][] {};
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        int[][] intArray72 = new int[][] {};
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.sub(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray77, intArray78, (int) ' ', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test3786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3786");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[] intArray64 = new int[] { 100, '#', 10 };
        int[][] intArray65 = new int[][] { intArray64 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray65, intArray68, (int) (short) 0, (int) (short) 0);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.add(intArray68, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray77, intArray78, 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test3787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3787");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray86, 0, 100);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray90, intArray91, (int) ' ', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3788");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.add(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray76, intArray79);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication2.add(intArray89, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray89, 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3789");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray55 = new int[][] { intArray42, intArray48, intArray54 };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray81 = new int[][] { intArray60, intArray65, intArray70, intArray75, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication36.multiply(intArray55, intArray81);
        int[][] intArray83 = strassenMatrixMultiplication24.add(intArray32, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication23.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication17.sub(intArray83, intArray86);
        strassenMatrixMultiplication15.split(intArray16, intArray87, 100, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray14, intArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3790");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.sub(intArray73, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test3791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3791");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray86, 0, 100);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray90, intArray91, (int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3792");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.add(intArray77, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray83, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication15.add(intArray88, intArray92);
        strassenMatrixMultiplication0.split(intArray14, intArray93, (int) (short) 100, (int) (short) 0);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3793");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray29 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray30 = new int[][] { intArray24, intArray29 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.sub(intArray30, intArray77);
        int[] intArray82 = new int[] { 100, '#', 10 };
        int[][] intArray83 = new int[][] { intArray82 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        strassenMatrixMultiplication19.split(intArray83, intArray86, (int) (short) 0, (int) (short) 0);
        int[][] intArray93 = strassenMatrixMultiplication7.add(intArray15, intArray83);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray93, (int) (short) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3794");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication1.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray78, intArray84, (int) (short) 1, (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray88, intArray89, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test3795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3795");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray79, intArray86);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3796");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.add(intArray76, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray76, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test3797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3797");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) '#', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, (int) (short) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test3798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3798");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication58 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray59 = null;
        int[][] intArray60 = new int[][] {};
        strassenMatrixMultiplication58.split(intArray59, intArray60, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication58.sub(intArray66, intArray70);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray72 = strassenMatrixMultiplication0.add(intArray57, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test3799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3799");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray88, (int) ' ', 10);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3800");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        int[] intArray85 = new int[] { (short) 0 };
        int[] intArray87 = new int[] { (short) 0 };
        int[][] intArray88 = new int[][] { intArray85, intArray87 };
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.add(intArray88, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0]");
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3801");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        strassenMatrixMultiplication0.join(intArray3, intArray67, (int) (short) -1, (int) '#');
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 100, (int) (byte) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray89, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3802");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray71, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.multiply(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test3803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3803");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3804");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication54 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray55 = null;
        int[][] intArray56 = new int[][] {};
        strassenMatrixMultiplication54.split(intArray55, intArray56, (int) '4', (-1));
        int[][] intArray60 = null;
        int[][] intArray61 = strassenMatrixMultiplication0.add(intArray56, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray64 = strassenMatrixMultiplication0.add(intArray62, intArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
    }

    @Test
    public void test3805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3805");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray84, 1, (int) (byte) -1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray88, intArray89, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test3806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3806");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = new int[][] {};
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        int[][] intArray72 = new int[][] {};
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray72, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        int[][] intArray95 = strassenMatrixMultiplication1.add(intArray77, intArray93);
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray93, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test3807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3807");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        int[][] intArray16 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray85 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray71, intArray78, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication17.sub(intArray37, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication10.add(intArray16, intArray37);
        strassenMatrixMultiplication8.split(intArray9, intArray16, (int) (byte) 10, (int) '#');
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication7.sub(intArray16, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray6, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3808");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = new int[][] {};
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.add(intArray75, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray78, intArray79, (int) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test3809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3809");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication3.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication2.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray86, intArray89, (int) ' ', (int) 'a');
        strassenMatrixMultiplication0.split(intArray1, intArray89, (int) ' ', (-1));
        java.lang.Class<?> wildcardClass99 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3810");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray80, (int) (short) 100, (int) (short) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray86, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray92, intArray93, (int) (byte) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3811");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication3.add(intArray84, intArray87);
        strassenMatrixMultiplication1.split(intArray2, intArray84, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray84, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (short) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3812");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication78.sub(intArray86, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray92, 100, 1);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3813");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray76, (int) (byte) 0, (int) '#');
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray80, intArray81, (int) (byte) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test3814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3814");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray81, intArray84);
        int[][] intArray86 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.multiply(intArray86, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3815");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication7.sub(intArray67, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = strassenMatrixMultiplication1.add(intArray80, intArray87);
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray80, intArray93, (int) (byte) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test3816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3816");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[][] intArray60 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication61.sub(intArray69, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.multiply(intArray60, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test3817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3817");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray74, intArray75, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3818");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication3.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication2.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray86, intArray89, (int) ' ', (int) 'a');
        strassenMatrixMultiplication0.split(intArray1, intArray89, (int) ' ', (-1));
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3819");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray37 = null;
        int[][] intArray38 = new int[][] {};
        strassenMatrixMultiplication36.split(intArray37, intArray38, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication42 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray60 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray61 = new int[][] { intArray48, intArray54, intArray60 };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray86 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray87 = new int[][] { intArray66, intArray71, intArray76, intArray81, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication42.multiply(intArray61, intArray87);
        int[][] intArray89 = strassenMatrixMultiplication30.add(intArray38, intArray88);
        strassenMatrixMultiplication18.split(intArray26, intArray38, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) (short) 0, 10);
        int[][] intArray96 = null;
        strassenMatrixMultiplication0.join(intArray14, intArray96, (int) (byte) -1, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3820");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = new int[][] {};
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        int[][] intArray72 = new int[][] {};
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.sub(intArray74, intArray75);
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication78.sub(intArray86, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.add(intArray77, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3821");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.sub(intArray15, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.multiply(intArray86, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3822");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.add(intArray78, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray84, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication16.sub(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication15.sub(intArray89, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray14, intArray90, (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3823");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3824");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication26.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication6.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray88, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3825");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray87, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3826");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray37 = null;
        int[][] intArray38 = new int[][] {};
        strassenMatrixMultiplication36.split(intArray37, intArray38, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication42 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray60 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray61 = new int[][] { intArray48, intArray54, intArray60 };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray86 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray87 = new int[][] { intArray66, intArray71, intArray76, intArray81, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication42.multiply(intArray61, intArray87);
        int[][] intArray89 = strassenMatrixMultiplication30.add(intArray38, intArray88);
        strassenMatrixMultiplication18.split(intArray26, intArray38, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) (short) 0, 10);
        int[][] intArray96 = null;
        strassenMatrixMultiplication0.join(intArray14, intArray96, 100, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3827");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray29, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        strassenMatrixMultiplication14.join(intArray87, intArray91, 100, (int) (short) 0);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray87, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3828");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray86, intArray87, 10, 100);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray6, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3829");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        int[][] intArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray7, 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
    }

    @Test
    public void test3830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3830");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        strassenMatrixMultiplication6.split(intArray7, intArray85, (int) (short) 10, (int) (byte) 1);
        int[][] intArray89 = null;
        strassenMatrixMultiplication0.join(intArray85, intArray89, 100, (int) (short) 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray93, intArray94, (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3831");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray85, (int) '#', (int) (byte) -1);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test3832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3832");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        int[][] intArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray16 = strassenMatrixMultiplication0.sub(intArray14, intArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
    }

    @Test
    public void test3833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3833");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray65, intArray66, (int) '#', (int) ' ');
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray70, intArray71, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
    }

    @Test
    public void test3834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3834");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.sub(intArray30, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.add(intArray83, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.sub(intArray11, intArray83);
        strassenMatrixMultiplication6.split(intArray7, intArray11, 0, 10);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray11, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.multiply(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3835");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray29, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        strassenMatrixMultiplication14.join(intArray87, intArray91, 100, (int) (short) 0);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray87, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3836");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.add(intArray9, intArray61);
        int[][] intArray63 = null;
        int[][] intArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray63, intArray64, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test3837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3837");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray86, intArray89, (int) 'a', (int) '4');
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3838");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (short) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3839");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        strassenMatrixMultiplication1.join(intArray69, intArray70, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        strassenMatrixMultiplication0.split(intArray69, intArray82, (int) (byte) 0, (int) (byte) 100);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3840");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication6.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) ' ', (int) (byte) 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3841");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication54 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray55 = null;
        int[][] intArray56 = new int[][] {};
        strassenMatrixMultiplication54.split(intArray55, intArray56, (int) '4', (-1));
        int[][] intArray60 = null;
        int[][] intArray61 = strassenMatrixMultiplication0.add(intArray56, intArray60);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        int[][] intArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray63, intArray68, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
    }

    @Test
    public void test3842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3842");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray29, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        strassenMatrixMultiplication14.join(intArray87, intArray91, 100, (int) (short) 0);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray87, intArray95);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3843");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray88, intArray91);
        int[][] intArray93 = new int[][] {};
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray92, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3844");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (short) -1, 10);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray87 = strassenMatrixMultiplication0.multiply(intArray85, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test3845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3845");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[] intArray86 = new int[] {};
        int[] intArray87 = new int[] {};
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[][] intArray90 = new int[][] { intArray86, intArray87, intArray88, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication1.add(intArray82, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray82, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3846");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        int[][] intArray19 = null;
        int[][] intArray20 = strassenMatrixMultiplication7.sub(intArray15, intArray19);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        int[][] intArray81 = null;
        strassenMatrixMultiplication7.join(intArray80, intArray81, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray6, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test3847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3847");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray76, (int) (byte) 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray86, (int) '4', (int) (short) 0);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray90, intArray91, (int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3848");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray68, intArray69, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test3849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3849");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) 'a', (int) (byte) 1);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.add(intArray14, intArray81);
        int[][] intArray83 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray83, intArray86, 0, (int) (byte) 10);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3850");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray84, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3851");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        strassenMatrixMultiplication6.join(intArray9, intArray73, (int) (short) -1, (int) '#');
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray77, intArray80, (int) (short) 100, (int) (byte) 100);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray80, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3852");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray56 = new int[] { (short) 0 };
        int[] intArray58 = new int[] { (short) 0 };
        int[][] intArray59 = new int[][] { intArray56, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication0.multiply(intArray6, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray61, intArray62, 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
    }

    @Test
    public void test3853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3853");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray84, intArray87, 1, (int) (byte) 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3854");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication8.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray68, intArray71);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray72, (int) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test3855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3855");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray58);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication21.sub(intArray35, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.add(intArray88, intArray89);
        int[][] intArray91 = strassenMatrixMultiplication13.sub(intArray16, intArray88);
        strassenMatrixMultiplication6.split(intArray12, intArray91, (int) (short) 1, (int) '#');
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray91, intArray95);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3856");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray87, intArray91);
        strassenMatrixMultiplication0.split(intArray6, intArray87, (int) (short) -1, (-1));
        java.lang.Class<?> wildcardClass96 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test3857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3857");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray64 = new int[] { (short) 0 };
        int[] intArray66 = new int[] { (short) 0 };
        int[][] intArray67 = new int[][] { intArray64, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication8.multiply(intArray14, intArray67);
        strassenMatrixMultiplication1.join(intArray4, intArray68, (int) (short) -1, (int) '#');
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray4, intArray72);
        int[][] intArray74 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication75.sub(intArray83, intArray87);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.multiply(intArray74, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3858");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray79, intArray85);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3859");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        strassenMatrixMultiplication6.join(intArray9, intArray73, (int) (short) -1, (int) '#');
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray77, intArray80, (int) (short) 100, (int) (byte) 100);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray80, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3860");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray58);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication21.sub(intArray35, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.add(intArray88, intArray89);
        int[][] intArray91 = strassenMatrixMultiplication13.sub(intArray16, intArray88);
        strassenMatrixMultiplication6.split(intArray12, intArray91, (int) (short) 1, (int) '#');
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray91, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3861");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray62, intArray66, (int) ' ', (int) (byte) 1);
        int[][] intArray70 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray70, intArray73, (-1), (int) (short) -1);
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.multiply(intArray80, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3862");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray79, intArray85);
        java.lang.Class<?> wildcardClass87 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3863");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray17 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray18 = new int[][] { intArray12, intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.sub(intArray18, intArray65);
        int[] intArray70 = new int[] { 100, '#', 10 };
        int[][] intArray71 = new int[][] { intArray70 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray71, intArray74, (int) (short) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray6, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test3864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3864");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        strassenMatrixMultiplication8.join(intArray76, intArray77, (int) (short) 1, (int) (short) 1);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication7.add(intArray76, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray81, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3865");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        strassenMatrixMultiplication6.split(intArray7, intArray85, (int) (short) 10, (int) (byte) 1);
        int[][] intArray89 = null;
        strassenMatrixMultiplication0.join(intArray85, intArray89, 100, (int) (short) 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, (int) (byte) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3866");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray67, intArray70, 0, (int) (byte) 1);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray70, intArray77, (int) ' ', (int) (byte) 1);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test3867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3867");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray87, intArray91);
        strassenMatrixMultiplication0.split(intArray6, intArray87, (int) (short) -1, (-1));
        java.lang.Class<?> wildcardClass96 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test3868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3868");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        int[][] intArray54 = null;
        int[][] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray54, intArray55, 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
    }

    @Test
    public void test3869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3869");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        int[][] intArray78 = null;
        strassenMatrixMultiplication1.join(intArray74, intArray78, 100, (int) (short) 0);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray74, intArray82);
        java.lang.Class<?> wildcardClass84 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test3870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3870");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray13, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray90, intArray91, (int) (byte) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3871");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        int[][] intArray15 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        strassenMatrixMultiplication9.split(intArray15, intArray75, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication2.split(intArray4, intArray75, (int) 'a', (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.add(intArray1, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test3872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3872");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray79, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray87, intArray88, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3873");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        int[][] intArray76 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        strassenMatrixMultiplication16.split(intArray76, intArray79, (int) (short) -1, (int) (byte) 0);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication15.add(intArray79, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray14, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3874");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.sub(intArray15, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3875");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray18 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray19 = new int[][] { intArray13, intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.sub(intArray19, intArray66);
        int[] intArray71 = new int[] { 100, '#', 10 };
        int[][] intArray72 = new int[][] { intArray71 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        strassenMatrixMultiplication8.split(intArray72, intArray75, (int) (short) 0, (int) (short) 0);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication7.add(intArray75, intArray82);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray82, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test3876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3876");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray79, intArray85);
        java.lang.Class<?> wildcardClass87 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3877");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray56 = new int[] { (short) 0 };
        int[] intArray58 = new int[] { (short) 0 };
        int[][] intArray59 = new int[][] { intArray56, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication0.multiply(intArray6, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray61, intArray62, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
    }

    @Test
    public void test3878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3878");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray89 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray90 = new int[][] { intArray75, intArray82, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray41, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.add(intArray20, intArray41);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication13.sub(intArray20, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication7.sub(intArray20, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray6, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3879");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        strassenMatrixMultiplication1.split(intArray2, intArray80, (int) (short) 10, (int) (byte) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3880");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray58);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication21.sub(intArray35, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.add(intArray88, intArray89);
        int[][] intArray91 = strassenMatrixMultiplication13.sub(intArray16, intArray88);
        strassenMatrixMultiplication6.split(intArray12, intArray91, (int) (short) 1, (int) '#');
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray91, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3881");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray76 = strassenMatrixMultiplication0.add(intArray74, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3882");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray72, intArray76, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication7.add(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication1.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray90, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3883");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.add(intArray9, intArray61);
        int[][] intArray63 = null;
        int[][] intArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray65 = strassenMatrixMultiplication0.multiply(intArray63, intArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test3884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3884");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        int[][] intArray78 = null;
        strassenMatrixMultiplication1.join(intArray74, intArray78, 100, (int) (short) 0);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray74, intArray82);
        java.lang.Class<?> wildcardClass84 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test3885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3885");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication3.add(intArray84, intArray87);
        strassenMatrixMultiplication1.split(intArray2, intArray88, (int) (short) 0, 0);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (byte) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3886");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        int[][] intArray72 = null;
        strassenMatrixMultiplication0.join(intArray16, intArray72, (int) (short) 1, 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, (int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test3887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3887");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (byte) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test3888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3888");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray83 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray69, intArray76, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray35, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.add(intArray14, intArray35);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication7.sub(intArray14, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication1.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.sub(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test3889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3889");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray85, (int) (byte) 100, 100);
        int[][] intArray89 = null;
        int[] intArray91 = new int[] { 0 };
        int[][] intArray92 = new int[][] { intArray91 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.multiply(intArray89, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0]");
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test3890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3890");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray83 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray69, intArray76, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray35, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.add(intArray14, intArray35);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication7.sub(intArray14, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication1.sub(intArray14, intArray89);
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.add(intArray89, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test3891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3891");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        int[][] intArray78 = null;
        strassenMatrixMultiplication1.join(intArray74, intArray78, 100, (int) (short) 0);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray74, intArray82);
        java.lang.Class<?> wildcardClass84 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test3892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3892");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication6.sub(intArray10, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray79, intArray80);
        java.lang.Class<?> wildcardClass82 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test3893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3893");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, 1, (int) (short) -1);
        int[] intArray74 = new int[] { (short) 10 };
        int[] intArray76 = new int[] { (short) 10 };
        int[][] intArray77 = new int[][] { intArray74, intArray76 };
        int[][] intArray78 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray77, intArray78, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10]");
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test3894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3894");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray79, intArray85);
        int[][] intArray87 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray87, intArray90, 10, 0);
        java.lang.Class<?> wildcardClass97 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3895");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = new int[][] {};
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        int[][] intArray72 = new int[][] {};
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.sub(intArray74, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication89 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray90 = null;
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication89.split(intArray90, intArray91, (int) '4', (-1));
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication83.sub(intArray91, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray78, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3896");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 0, (int) (short) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3897");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication6.sub(intArray10, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray79, intArray80);
        java.lang.Class<?> wildcardClass82 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test3898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3898");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray78, intArray79, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test3899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3899");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray40);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication3.sub(intArray17, intArray69);
        int[][] intArray71 = null;
        strassenMatrixMultiplication2.join(intArray70, intArray71, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication75.sub(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication2.sub(intArray88, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray1, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test3900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3900");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray79, intArray85);
        int[][] intArray87 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray87, intArray90, 10, 0);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3901");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray87, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3902");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray65, intArray66);
        int[] intArray68 = new int[] {};
        int[] intArray69 = new int[] {};
        int[] intArray70 = new int[] {};
        int[] intArray71 = new int[] {};
        int[][] intArray72 = new int[][] { intArray68, intArray69, intArray70, intArray71 };
        int[][] intArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray74 = strassenMatrixMultiplication0.multiply(intArray72, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test3903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3903");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray85, (int) '4', (int) (short) 0);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test3904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3904");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray67, intArray70, (int) (short) -1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.multiply(intArray6, intArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test3905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3905");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication6.sub(intArray10, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray79, intArray80);
        java.lang.Class<?> wildcardClass82 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test3906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3906");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.add(intArray89, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.sub(intArray17, intArray89);
        strassenMatrixMultiplication12.split(intArray13, intArray17, 0, 10);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication6.sub(intArray17, intArray96);
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray96, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test3907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3907");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication69.sub(intArray77, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray68, intArray81, (int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3908");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = strassenMatrixMultiplication6.sub(intArray27, intArray83);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test3909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3909");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        strassenMatrixMultiplication6.split(intArray12, intArray72, (int) (short) -1, (int) (byte) 100);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray72, intArray76, (int) (byte) 100, 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication0.add(intArray88, intArray94);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test3910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3910");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (int) 'a', 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray70, intArray71, (int) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test3911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3911");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray6 = null;
        int[][] intArray7 = new int[][] {};
        strassenMatrixMultiplication5.split(intArray6, intArray7, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray83 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray71, intArray77, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication11.add(intArray65, intArray84);
        int[][] intArray86 = new int[][] {};
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication11.add(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication5.add(intArray86, intArray89);
        strassenMatrixMultiplication3.split(intArray4, intArray86, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication2.add(intArray86, intArray94);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication1.sub(intArray86, intArray96);
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray96, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test3912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3912");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, 0, 10);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (-1), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test3913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3913");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray9, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3914");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray62 = new int[] { (short) 10, '#' };
        int[][] intArray63 = new int[][] { intArray62 };
        int[] intArray65 = new int[] { ' ' };
        int[] intArray67 = new int[] { ' ' };
        int[] intArray69 = new int[] { ' ' };
        int[] intArray71 = new int[] { ' ' };
        int[][] intArray72 = new int[][] { intArray65, intArray67, intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray63, intArray72);
        int[] intArray77 = new int[] { ' ', '4', (byte) 100 };
        int[][] intArray78 = new int[][] { intArray77 };
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray78, intArray79, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[32, 52, 100]");
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test3915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3915");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray59 = new int[] { (short) 0 };
        int[] intArray61 = new int[] { (short) 0 };
        int[][] intArray62 = new int[][] { intArray59, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication3.multiply(intArray9, intArray62);
        int[] intArray66 = new int[] { 'a', (short) 1 };
        int[] intArray69 = new int[] { 'a', (short) 1 };
        int[] intArray72 = new int[] { 'a', (short) 1 };
        int[] intArray75 = new int[] { 'a', (short) 1 };
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[][] intArray82 = new int[][] { intArray66, intArray69, intArray72, intArray75, intArray78, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication2.add(intArray9, intArray82);
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray9, intArray84, (-1), (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray84, intArray89);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3916");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test3917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3917");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.add(intArray69, intArray70);
        int[][] intArray72 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray72, intArray75, (int) (short) 0, (int) (short) 100);
        int[][] intArray82 = null;
        strassenMatrixMultiplication0.join(intArray75, intArray82, (int) '4', (int) (short) 0);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test3918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3918");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication12.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray72, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray88, (int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3919");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray72, (int) ' ', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test3920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3920");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 0, (int) (short) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3921");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (int) 'a', 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray72 = strassenMatrixMultiplication0.sub(intArray70, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test3922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3922");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray76, (int) (byte) 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray86, (int) '4', (int) (short) 0);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.multiply(intArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3923");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        strassenMatrixMultiplication8.join(intArray76, intArray77, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        strassenMatrixMultiplication7.split(intArray76, intArray89, (int) (byte) 0, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.add(intArray6, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3924");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray80, (int) (short) 100, (int) (short) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray86, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray92, intArray93, (int) (short) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test3925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3925");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.add(intArray81, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.sub(intArray9, intArray81);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray85, (int) 'a', (int) '4');
        int[][] intArray89 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication90 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray91 = null;
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication90.split(intArray91, intArray92, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray89, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test3926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3926");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication4.sub(intArray81, intArray85);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) '4', (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.add(intArray1, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3927");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray77, 100, (int) (short) 0);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.multiply(intArray81, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3928");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[] intArray60 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray60, intArray67, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray26, intArray75);
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test3929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3929");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray22 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray23 = new int[][] { intArray17, intArray22 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.sub(intArray23, intArray70);
        int[] intArray75 = new int[] { 100, '#', 10 };
        int[][] intArray76 = new int[][] { intArray75 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        strassenMatrixMultiplication12.split(intArray76, intArray79, (int) (short) 0, (int) (short) 0);
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray8, intArray76);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3930");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[] intArray85 = new int[] { 'a', (short) 1 };
        int[][] intArray86 = new int[][] { intArray70, intArray73, intArray76, intArray79, intArray82, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication6.add(intArray13, intArray86);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication6.sub(intArray90, intArray94);
        int[][] intArray96 = null;
        strassenMatrixMultiplication0.join(intArray90, intArray96, (int) (short) 0, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test3931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3931");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        strassenMatrixMultiplication6.split(intArray7, intArray85, (int) (short) 10, (int) (byte) 1);
        int[][] intArray89 = null;
        strassenMatrixMultiplication0.join(intArray85, intArray89, 100, (int) (short) 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, (int) (short) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3932");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication56 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray57 = null;
        int[][] intArray58 = new int[][] {};
        strassenMatrixMultiplication56.split(intArray57, intArray58, (int) '4', (-1));
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication2.add(intArray58, intArray62);
        strassenMatrixMultiplication0.split(intArray1, intArray58, (int) (short) 10, 10);
        int[][] intArray67 = null;
        int[][] intArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray69 = strassenMatrixMultiplication0.add(intArray67, intArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test3933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3933");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication17.add(intArray79, intArray83);
        strassenMatrixMultiplication15.split(intArray16, intArray84, (int) (short) -1, (int) (byte) -1);
        strassenMatrixMultiplication0.split(intArray14, intArray84, (int) (byte) 1, 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3934");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication58 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray59 = null;
        int[][] intArray60 = new int[][] {};
        strassenMatrixMultiplication58.split(intArray59, intArray60, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication58.sub(intArray66, intArray70);
        strassenMatrixMultiplication0.split(intArray57, intArray66, (int) 'a', 10);
        int[] intArray75 = new int[] {};
        int[] intArray76 = new int[] {};
        int[] intArray77 = new int[] {};
        int[][] intArray78 = new int[][] { intArray75, intArray76, intArray77 };
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray78, intArray79, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test3935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3935");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray22, intArray74);
        java.lang.Class<?> wildcardClass76 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3936");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        strassenMatrixMultiplication0.join(intArray3, intArray67, (int) (short) -1, (int) '#');
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 100, (int) (byte) 100);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray81, intArray82, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test3937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3937");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray13, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3938");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        int[][] intArray21 = strassenMatrixMultiplication8.sub(intArray16, intArray20);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray36 = null;
        int[][] intArray37 = new int[][] {};
        strassenMatrixMultiplication35.split(intArray36, intArray37, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication41 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray59 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray60 = new int[][] { intArray47, intArray53, intArray59 };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray85 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray86 = new int[][] { intArray65, intArray70, intArray75, intArray80, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication41.multiply(intArray60, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication29.add(intArray37, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication28.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication22.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication8.sub(intArray90, intArray93);
        strassenMatrixMultiplication6.split(intArray7, intArray90, (int) (short) 100, (int) (short) 1);
        int[][] intArray98 = null;
        int[][] intArray99 = strassenMatrixMultiplication0.add(intArray90, intArray98);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test3939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3939");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray78, intArray81, (int) (short) 100, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray6, intArray81, (int) (byte) 10, 1);
        int[][] intArray91 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication92 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray93 = null;
        int[][] intArray94 = new int[][] {};
        strassenMatrixMultiplication92.split(intArray93, intArray94, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray91, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3940");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication1.add(intArray80, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray80, intArray88);
        java.lang.Class<?> wildcardClass90 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3941");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray22, intArray74);
        java.lang.Class<?> wildcardClass76 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3942");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray24 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray25 = new int[][] { intArray19, intArray24 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.sub(intArray25, intArray72);
        int[] intArray76 = new int[] { (short) 10, '#' };
        int[][] intArray77 = new int[][] { intArray76 };
        int[] intArray79 = new int[] { ' ' };
        int[] intArray81 = new int[] { ' ' };
        int[] intArray83 = new int[] { ' ' };
        int[] intArray85 = new int[] { ' ' };
        int[][] intArray86 = new int[][] { intArray79, intArray81, intArray83, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication14.multiply(intArray77, intArray86);
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray86, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[32]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[32]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test3943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3943");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3944");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray79, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3945");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) 'a', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3946");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[] intArray62 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray62, intArray69, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication8.sub(intArray28, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray7, intArray28);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray7, intArray80);
        int[][] intArray82 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication89 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray90 = null;
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication89.split(intArray90, intArray91, (int) '4', (-1));
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication83.sub(intArray91, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray82, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test3947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3947");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray81 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray67, intArray74, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray33, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.add(intArray12, intArray33);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray12, intArray85);
        java.lang.Class<?> wildcardClass87 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3948");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        int[][] intArray24 = null;
        int[][] intArray25 = strassenMatrixMultiplication12.sub(intArray20, intArray24);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray33 = null;
        int[][] intArray34 = new int[][] {};
        strassenMatrixMultiplication32.split(intArray33, intArray34, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication38 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray57 = new int[][] { intArray44, intArray50, intArray56 };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray83 = new int[][] { intArray62, intArray67, intArray72, intArray77, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication38.multiply(intArray57, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication26.add(intArray34, intArray84);
        int[][] intArray86 = null;
        strassenMatrixMultiplication12.join(intArray85, intArray86, 0, 0);
        strassenMatrixMultiplication0.split(intArray8, intArray85, (int) (byte) 1, 100);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.multiply(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3949");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray25 = new int[][] { intArray24 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication20.sub(intArray25, intArray71);
        int[] intArray75 = new int[] { (short) 0 };
        int[] intArray77 = new int[] { (short) 0 };
        int[][] intArray78 = new int[][] { intArray75, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication19.multiply(intArray25, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication7.sub(intArray15, intArray78);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (int) (short) 10, (int) 'a');
        java.lang.Class<?> wildcardClass84 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test3950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3950");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray78, intArray82);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray85, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3951");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication1.add(intArray80, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray80, intArray88);
        java.lang.Class<?> wildcardClass90 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3952");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        int[][] intArray25 = null;
        int[][] intArray26 = strassenMatrixMultiplication13.sub(intArray21, intArray25);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication13.join(intArray86, intArray87, 0, 0);
        strassenMatrixMultiplication1.split(intArray9, intArray86, (int) (byte) 1, 100);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication0.sub(intArray9, intArray94);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test3953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3953");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.sub(intArray15, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray88, (int) (short) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test3954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3954");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        int[][] intArray19 = null;
        int[][] intArray20 = strassenMatrixMultiplication7.sub(intArray15, intArray19);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication21.join(intArray89, intArray90, (int) (short) 1, (int) (short) 1);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication7.add(intArray89, intArray94);
        strassenMatrixMultiplication0.split(intArray6, intArray89, (int) (byte) 0, (int) ' ');
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3955");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray5, intArray73);
        int[][] intArray75 = null;
        strassenMatrixMultiplication0.join(intArray5, intArray75, 0, (int) '4');
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray80, (int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test3956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3956");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test3957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3957");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication6.sub(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test3958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3958");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray71, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test3959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3959");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray81 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray67, intArray74, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray33, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.add(intArray12, intArray33);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray12, intArray85);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3960");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication6.add(intArray68, intArray72);
        int[][] intArray74 = new int[][] {};
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray74, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication6.sub(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray77, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.multiply(intArray82, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test3961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3961");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        int[][] intArray19 = null;
        int[][] intArray20 = strassenMatrixMultiplication7.sub(intArray15, intArray19);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication21.join(intArray89, intArray90, (int) (short) 1, (int) (short) 1);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication7.add(intArray89, intArray94);
        strassenMatrixMultiplication0.split(intArray6, intArray89, (int) (byte) 0, (int) ' ');
        java.lang.Class<?> wildcardClass99 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3962");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication1.add(intArray80, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray80, intArray88);
        java.lang.Class<?> wildcardClass90 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3963");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray25 = new int[][] { intArray24 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication20.sub(intArray25, intArray71);
        int[] intArray75 = new int[] { (short) 0 };
        int[] intArray77 = new int[] { (short) 0 };
        int[][] intArray78 = new int[][] { intArray75, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication19.multiply(intArray25, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication7.sub(intArray15, intArray78);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (int) (short) 10, (int) 'a');
        java.lang.Class<?> wildcardClass84 = intArray15.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test3964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3964");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[] intArray54 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray69 = new int[][] { intArray54, intArray61, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray20, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray79, intArray85, (int) (byte) -1, 100);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (short) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3965");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        strassenMatrixMultiplication6.join(intArray9, intArray73, (int) (short) -1, (int) '#');
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray77, intArray80, (int) (short) 100, (int) (byte) 100);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray80, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3966");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        java.lang.Class<?> wildcardClass71 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test3967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3967");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray87, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3968");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray81 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray67, intArray74, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray33, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.add(intArray12, intArray33);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray12, intArray85);
        java.lang.Class<?> wildcardClass87 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3969");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test3970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3970");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray67, intArray70, 0, (int) (byte) 1);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray70, intArray77, (int) ' ', (int) (byte) 1);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (-1), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test3971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3971");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = new int[][] {};
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray75, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication7.sub(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication6.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray83, (int) (short) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test3972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3972");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray65, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray68, intArray69, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test3973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3973");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        int[][] intArray15 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray84 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray70, intArray77, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray36, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication9.add(intArray15, intArray36);
        strassenMatrixMultiplication7.split(intArray8, intArray15, (int) (byte) 10, (int) '#');
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication6.sub(intArray15, intArray91);
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray91, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test3974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3974");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray22, intArray74);
        java.lang.Class<?> wildcardClass76 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3975");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray74, intArray75, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3976");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray71 = new int[] { (short) 0 };
        int[] intArray73 = new int[] { (short) 0 };
        int[][] intArray74 = new int[][] { intArray71, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication15.multiply(intArray21, intArray74);
        strassenMatrixMultiplication8.join(intArray11, intArray75, (int) (short) -1, (int) '#');
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        strassenMatrixMultiplication8.split(intArray79, intArray82, (int) (short) 100, (int) (byte) 100);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication2.add(intArray82, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray1, intArray89, (int) (short) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test3977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3977");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray92, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3978");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.add(intArray77, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray83, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray14, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test3979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3979");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[][] intArray48 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication49 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray50 = null;
        int[][] intArray51 = new int[][] {};
        strassenMatrixMultiplication49.split(intArray50, intArray51, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray48, intArray51, (int) (short) 0, 10);
        int[][] intArray58 = null;
        strassenMatrixMultiplication0.join(intArray51, intArray58, 10, (int) (short) 0);
        int[][] intArray62 = null;
        int[][] intArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray62, intArray63, 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
    }

    @Test
    public void test3980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3980");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray92, intArray93);
        java.lang.Class<?> wildcardClass95 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3981");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray9, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.multiply(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test3982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3982");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray76, intArray79);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test3983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3983");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (short) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3984");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray26 = new int[][] { intArray25 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication21.sub(intArray26, intArray72);
        int[] intArray76 = new int[] { (short) 0 };
        int[] intArray78 = new int[] { (short) 0 };
        int[][] intArray79 = new int[][] { intArray76, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication20.multiply(intArray26, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication8.sub(intArray16, intArray79);
        strassenMatrixMultiplication1.split(intArray7, intArray16, (int) (short) 10, (int) 'a');
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray7, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test3985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3985");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray66, intArray70, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.add(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, (int) (byte) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test3986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3986");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, 0, 10);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.add(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test3987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3987");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test3988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3988");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray5, intArray73);
        int[][] intArray75 = null;
        strassenMatrixMultiplication0.join(intArray5, intArray75, 0, (int) '4');
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray80, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test3989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3989");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray22 = new int[][] { intArray9, intArray15, intArray21 };
        int[] intArray27 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray48 = new int[][] { intArray27, intArray32, intArray37, intArray42, intArray47 };
        int[][] intArray49 = strassenMatrixMultiplication3.multiply(intArray22, intArray48);
        int[] intArray56 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray71 = new int[][] { intArray56, intArray63, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray22, intArray71);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.add(intArray1, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test3990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3990");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication3.add(intArray11, intArray61);
        int[][] intArray63 = null;
        int[][] intArray64 = strassenMatrixMultiplication2.sub(intArray62, intArray63);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray67, intArray71);
        strassenMatrixMultiplication0.split(intArray1, intArray72, (int) (short) 1, (int) (byte) 100);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.multiply(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test3991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3991");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray72, intArray76, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication7.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray6, intArray90, (int) (short) -1, 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test3992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3992");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        int[][] intArray72 = null;
        strassenMatrixMultiplication0.join(intArray16, intArray72, (int) (short) 1, 0);
        int[][] intArray76 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication77.sub(intArray85, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray76, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test3993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3993");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray72, intArray77, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test3994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3994");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray92, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3995");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        int[][] intArray72 = null;
        strassenMatrixMultiplication0.join(intArray16, intArray72, (int) (short) 1, 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, 1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test3996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3996");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) '#', (int) (byte) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test3997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3997");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) '#', (int) (byte) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test3998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3998");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        int[][] intArray92 = new int[][] {};
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test3999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3999");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray82, intArray83);
        int[][] intArray85 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        strassenMatrixMultiplication14.split(intArray85, intArray88, (int) (short) 0, (int) (short) 100);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray88, intArray95, (int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test4000");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray36, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication20.join(intArray36, intArray92, (int) (short) 1, 0);
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray19, intArray92);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
    }
}


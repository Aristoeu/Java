package StrassenMatrixMultiplication;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test4501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4501");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray66, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray72, (int) (byte) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test4502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4502");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray72, intArray76, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication7.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray6, intArray90, (int) '4', (int) '#');
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test4503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4503");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray72, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test4504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4504");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray80, (int) 'a', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4505");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        int[][] intArray17 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray49);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.add(intArray17, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test4506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4506");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        int[][] intArray15 = strassenMatrixMultiplication2.sub(intArray10, intArray14);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication22.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication2.sub(intArray84, intArray87);
        strassenMatrixMultiplication0.split(intArray1, intArray84, (int) (short) 100, (int) (short) 1);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4507");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication12.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray72, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray80, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4508");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray58);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication21.sub(intArray35, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.add(intArray88, intArray89);
        int[][] intArray91 = strassenMatrixMultiplication13.sub(intArray16, intArray88);
        strassenMatrixMultiplication6.split(intArray12, intArray91, (int) (short) 1, (int) '#');
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray91, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4509");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray24 = new int[][] { intArray23 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication19.sub(intArray24, intArray70);
        int[] intArray74 = new int[] { (short) 0 };
        int[] intArray76 = new int[] { (short) 0 };
        int[][] intArray77 = new int[][] { intArray74, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication18.multiply(intArray24, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication6.sub(intArray14, intArray77);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray79, intArray80, 0, (int) (short) -1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication90 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray91 = null;
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication90.split(intArray91, intArray92, (int) '4', (-1));
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication84.sub(intArray92, intArray96);
        int[][] intArray98 = null;
        int[][] intArray99 = strassenMatrixMultiplication0.add(intArray92, intArray98);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test4510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4510");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication22.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray82, intArray85);
        strassenMatrixMultiplication14.split(intArray15, intArray86, 100, (int) '4');
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, 10, (int) (short) 10);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4511");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray81, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) '#', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4512");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray17 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray18 = new int[][] { intArray12, intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.sub(intArray18, intArray65);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray6, intArray65, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test4513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4513");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.sub(intArray15, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[] intArray88 = new int[] { (byte) 1 };
        int[] intArray90 = new int[] { (byte) 1 };
        int[][] intArray91 = new int[][] { intArray88, intArray90 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.add(intArray86, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1]");
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4514");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = new int[][] {};
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray71, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray76, intArray92);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4515");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4516");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, (int) '#', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test4517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4517");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication26.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication6.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray88, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4518");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray27 = new int[][] { intArray26 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication22.sub(intArray27, intArray73);
        int[] intArray77 = new int[] { (short) 0 };
        int[] intArray79 = new int[] { (short) 0 };
        int[][] intArray80 = new int[][] { intArray77, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication21.multiply(intArray27, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        strassenMatrixMultiplication15.split(intArray80, intArray84, 100, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray14, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4519");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray65 = strassenMatrixMultiplication0.sub(intArray62, intArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test4520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4520");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        strassenMatrixMultiplication15.split(intArray23, intArray35, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray14, intArray23, 0, 10);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray93, intArray94, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4521");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication6.sub(intArray10, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray82, intArray83, (int) (short) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test4522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4522");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray81 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray67, intArray74, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray33, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.add(intArray12, intArray33);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray12, intArray85);
        int[] intArray87 = new int[] {};
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[] intArray90 = new int[] {};
        int[][] intArray91 = new int[][] { intArray87, intArray88, intArray89, intArray90 };
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, (int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4523");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        strassenMatrixMultiplication4.split(intArray5, intArray83, (int) (short) 10, (int) (byte) 1);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication3.add(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication2.add(intArray83, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray83, (-1), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test4524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4524");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication68.sub(intArray76, intArray80);
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.add(intArray80, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test4525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4525");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 10, (int) (short) -1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4526");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray76, intArray79);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication82.sub(intArray90, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray81, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test4527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4527");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication54 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray55 = null;
        int[][] intArray56 = new int[][] {};
        strassenMatrixMultiplication54.split(intArray55, intArray56, (int) '4', (-1));
        int[][] intArray60 = null;
        int[][] intArray61 = strassenMatrixMultiplication0.add(intArray56, intArray60);
        int[] intArray65 = new int[] { (short) 100, 'a', (-1) };
        int[][] intArray66 = new int[][] { intArray65 };
        int[][] intArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray68 = strassenMatrixMultiplication0.multiply(intArray66, intArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[100, 97, -1]");
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test4528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4528");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray70 = strassenMatrixMultiplication0.multiply(intArray68, intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test4529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4529");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        strassenMatrixMultiplication0.split(intArray13, intArray74, 0, (int) (byte) 0);
        java.lang.Class<?> wildcardClass78 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test4530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4530");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray87, intArray88, (int) (short) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4531");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray86, intArray87, 10, 100);
        strassenMatrixMultiplication0.split(intArray6, intArray87, (int) (byte) 0, (int) (byte) 10);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4532");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray48);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication11.sub(intArray25, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication10.add(intArray78, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.sub(intArray6, intArray78);
        strassenMatrixMultiplication1.split(intArray2, intArray6, (int) (short) 10, (int) (short) 10);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray6, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) 'a', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4533");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray66, intArray69, (-1), (int) (byte) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication73.add(intArray87, intArray88);
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray88, intArray90, (int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4534");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        int[][] intArray29 = null;
        int[][] intArray30 = strassenMatrixMultiplication17.sub(intArray25, intArray29);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray33 = null;
        int[][] intArray34 = new int[][] {};
        strassenMatrixMultiplication32.split(intArray33, intArray34, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication38 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray39 = null;
        int[][] intArray40 = new int[][] {};
        strassenMatrixMultiplication38.split(intArray39, intArray40, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication44 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray62 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray63 = new int[][] { intArray50, intArray56, intArray62 };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray88 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray89 = new int[][] { intArray68, intArray73, intArray78, intArray83, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication44.multiply(intArray63, intArray89);
        int[][] intArray91 = strassenMatrixMultiplication32.add(intArray40, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication31.sub(intArray91, intArray92);
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray25, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4535");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication68.sub(intArray76, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication89 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray90 = null;
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication89.split(intArray90, intArray91, (int) '4', (-1));
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication83.sub(intArray91, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication82.add(intArray96, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray80, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test4536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4536");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 10, (int) (short) -1);
        int[][] intArray91 = new int[][] {};
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4537");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test4538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4538");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray87, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.multiply(intArray6, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4539");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        int[][] intArray73 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray73, intArray76, 0, (int) 'a');
        int[][] intArray83 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.multiply(intArray83, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4540");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray75, intArray76, (int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test4541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4541");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray70, intArray71, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test4542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4542");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[] intArray79 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray80 = new int[][] { intArray79 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        int[][] intArray85 = null;
        int[] intArray87 = new int[] { ' ' };
        int[] intArray89 = new int[] { ' ' };
        int[] intArray91 = new int[] { ' ' };
        int[][] intArray92 = new int[][] { intArray87, intArray89, intArray91 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray85, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[32]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[32]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[32]");
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4543");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        strassenMatrixMultiplication8.split(intArray16, intArray28, (int) 'a', (int) (byte) 1);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.sub(intArray16, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (-1), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4544");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray24 = new int[][] { intArray23 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication19.sub(intArray24, intArray70);
        int[] intArray74 = new int[] { (short) 0 };
        int[] intArray76 = new int[] { (short) 0 };
        int[][] intArray77 = new int[][] { intArray74, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication18.multiply(intArray24, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication6.sub(intArray14, intArray77);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray79, intArray80, 0, (int) (short) -1);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test4545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4545");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        int[][] intArray17 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray32 = null;
        int[][] intArray33 = new int[][] {};
        strassenMatrixMultiplication31.split(intArray32, intArray33, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication37 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray55 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray56 = new int[][] { intArray43, intArray49, intArray55 };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray82 = new int[][] { intArray61, intArray66, intArray71, intArray76, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication37.multiply(intArray56, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication25.add(intArray33, intArray56);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication19.sub(intArray33, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication18.join(intArray86, intArray87, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication18.add(intArray93, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray17, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test4546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4546");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test4547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4547");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray29, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray87, intArray88, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4548");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray73, intArray74);
        java.lang.Class<?> wildcardClass76 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test4549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4549");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication17.add(intArray26, intArray78);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray79, intArray80, 1, (int) (byte) 10);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray84, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4550");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication1.sub(intArray8, intArray81);
        int[][] intArray83 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray83, (int) 'a', (int) ' ');
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray87, intArray88, (int) (byte) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4551");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication12.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray72, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray80, 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4552");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        strassenMatrixMultiplication0.split(intArray13, intArray74, 0, (int) (byte) 0);
        java.lang.Class<?> wildcardClass78 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test4553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4553");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray29, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray87, intArray88, (int) (byte) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4554");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        strassenMatrixMultiplication0.split(intArray79, intArray88, 0, (int) (byte) 10);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4555");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray73, intArray74);
        java.lang.Class<?> wildcardClass76 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test4556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4556");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication26.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication6.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray88, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4557");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        int[][] intArray15 = strassenMatrixMultiplication2.sub(intArray10, intArray14);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray37 = null;
        int[][] intArray38 = new int[][] {};
        strassenMatrixMultiplication36.split(intArray37, intArray38, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication42 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray60 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray61 = new int[][] { intArray48, intArray54, intArray60 };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray86 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray87 = new int[][] { intArray66, intArray71, intArray76, intArray81, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication42.multiply(intArray61, intArray87);
        int[][] intArray89 = strassenMatrixMultiplication30.add(intArray38, intArray61);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication24.sub(intArray38, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication23.add(intArray91, intArray92);
        int[][] intArray94 = strassenMatrixMultiplication16.sub(intArray19, intArray91);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication2.add(intArray19, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray1, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4558");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication70.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4559");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication85.sub(intArray93, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray84, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test4560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4560");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication70.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4561");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray80, (-1), (int) (short) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4562");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray78, intArray79, (int) (short) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test4563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4563");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) (short) 1, (int) (short) 100);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test4564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4564");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4565");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication8.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray68, intArray71);
        strassenMatrixMultiplication0.split(intArray1, intArray72, 100, (int) '4');
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, (int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test4566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4566");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray72, (int) (byte) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test4567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4567");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[] intArray79 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray80 = new int[][] { intArray79 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray86, 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4568");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        strassenMatrixMultiplication6.split(intArray12, intArray72, (int) (short) -1, (int) (byte) 100);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray72, intArray76, (int) (byte) 100, 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        strassenMatrixMultiplication0.join(intArray93, intArray94, (int) (byte) -1, (int) '#');
        java.lang.Class<?> wildcardClass98 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test4569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4569");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray55 = new int[][] { intArray42, intArray48, intArray54 };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray81 = new int[][] { intArray60, intArray65, intArray70, intArray75, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication36.multiply(intArray55, intArray81);
        int[][] intArray83 = strassenMatrixMultiplication24.add(intArray32, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication23.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication17.sub(intArray83, intArray86);
        strassenMatrixMultiplication15.split(intArray16, intArray87, 100, (int) '4');
        int[][] intArray91 = null;
        strassenMatrixMultiplication1.join(intArray87, intArray91, 10, (int) (short) 10);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray95, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4570");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray73, intArray74);
        java.lang.Class<?> wildcardClass76 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test4571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4571");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray79, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4572");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) '#', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, (int) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test4573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4573");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        strassenMatrixMultiplication1.join(intArray69, intArray70, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        strassenMatrixMultiplication0.split(intArray69, intArray82, (int) (byte) 0, (int) (byte) 100);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.multiply(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4574");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        strassenMatrixMultiplication6.split(intArray12, intArray72, (int) (short) -1, (int) (byte) 100);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray72, intArray76, (int) (byte) 100, 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        strassenMatrixMultiplication0.join(intArray93, intArray94, (int) (byte) -1, (int) '#');
        java.lang.Class<?> wildcardClass98 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test4575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4575");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray87, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4576");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray25, intArray53, (int) 'a', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
    }

    @Test
    public void test4577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4577");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray81, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4578");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray72, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test4579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4579");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        int[][] intArray60 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray60, intArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test4580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4580");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication3.add(intArray11, intArray61);
        int[][] intArray63 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        strassenMatrixMultiplication3.split(intArray63, intArray66, (int) (short) -1, (int) (byte) 0);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication2.add(intArray66, intArray73);
        int[][] intArray75 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray75, intArray78, 0, (int) 'a');
        strassenMatrixMultiplication0.split(intArray1, intArray78, (-1), (int) (short) 1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.add(intArray88, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4581");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray13, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray90, intArray91, (int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4582");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication70.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4583");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test4584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4584");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray13, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication90 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray91 = null;
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication90.split(intArray91, intArray92, (int) '4', (-1));
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray91, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4585");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        int[][] intArray15 = strassenMatrixMultiplication2.sub(intArray10, intArray14);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        int[][] intArray22 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray84 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray91 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray92 = new int[][] { intArray77, intArray84, intArray91 };
        int[][] intArray93 = strassenMatrixMultiplication23.sub(intArray43, intArray92);
        int[][] intArray94 = strassenMatrixMultiplication16.add(intArray22, intArray43);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication2.add(intArray22, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray1, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4586");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        int[][] intArray21 = strassenMatrixMultiplication8.sub(intArray16, intArray20);
        int[][] intArray22 = null;
        int[][] intArray23 = strassenMatrixMultiplication7.add(intArray21, intArray22);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray24 = strassenMatrixMultiplication0.sub(intArray6, intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
    }

    @Test
    public void test4587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4587");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (int) 'a', 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray71, 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test4588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4588");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication62.sub(intArray70, intArray74);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray61, intArray74, 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test4589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4589");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray80, (-1), (int) (short) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (-1), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4590");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication18.split(intArray78, intArray81, (int) (short) -1, (int) (byte) 0);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication17.add(intArray81, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray89, intArray90, (int) ' ', (int) ' ');
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test4591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4591");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray80, (int) (short) 100, (int) (short) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray86, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4592");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        strassenMatrixMultiplication2.split(intArray10, intArray22, (int) 'a', (int) (byte) 1);
        int[][] intArray77 = null;
        strassenMatrixMultiplication1.join(intArray10, intArray77, (int) (byte) 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        strassenMatrixMultiplication1.join(intArray83, intArray87, (int) '4', (int) (short) 0);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.add(intArray83, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.sub(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4593");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication4.add(intArray85, intArray88);
        strassenMatrixMultiplication2.split(intArray3, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray85, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test4594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4594");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication69.add(intArray83, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray68, intArray84, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4595");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray78, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4596");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication4.add(intArray85, intArray88);
        strassenMatrixMultiplication2.split(intArray3, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray85, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test4597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4597");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication18.split(intArray78, intArray81, (int) (short) -1, (int) (byte) 0);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication17.add(intArray81, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray89, intArray90, (int) ' ', (int) ' ');
        java.lang.Class<?> wildcardClass94 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test4598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4598");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        strassenMatrixMultiplication6.split(intArray12, intArray21, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray84, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray84, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4599");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[] intArray64 = new int[] { 100, '#', 10 };
        int[][] intArray65 = new int[][] { intArray64 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray65, intArray68, (int) (short) 0, (int) (short) 0);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.add(intArray68, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication77.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray93, intArray94, (int) (short) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4600");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication4.add(intArray85, intArray88);
        strassenMatrixMultiplication2.split(intArray3, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray85, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test4601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4601");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        int[][] intArray17 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray37 = new int[][] { intArray36 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication38 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray57 = new int[][] { intArray44, intArray50, intArray56 };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray83 = new int[][] { intArray62, intArray67, intArray72, intArray77, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication38.multiply(intArray57, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication32.sub(intArray37, intArray83);
        int[] intArray87 = new int[] { (short) 0 };
        int[] intArray89 = new int[] { (short) 0 };
        int[][] intArray90 = new int[][] { intArray87, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication31.multiply(intArray37, intArray90);
        strassenMatrixMultiplication24.join(intArray27, intArray91, (int) (short) -1, (int) '#');
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication18.sub(intArray27, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray17, intArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4602");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        strassenMatrixMultiplication3.split(intArray11, intArray23, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication1.split(intArray2, intArray23, (int) (byte) 10, (int) (short) 100);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.add(intArray23, intArray81);
        java.lang.Class<?> wildcardClass83 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test4603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4603");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication3.add(intArray11, intArray61);
        int[][] intArray63 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        strassenMatrixMultiplication3.split(intArray63, intArray66, (int) (short) -1, (int) (byte) 0);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication2.add(intArray66, intArray73);
        int[][] intArray75 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray75, intArray78, 0, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray1, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4604");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        int[][] intArray15 = strassenMatrixMultiplication2.sub(intArray10, intArray14);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.add(intArray84, intArray88);
        int[][] intArray90 = new int[][] {};
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication22.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication16.sub(intArray90, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication2.sub(intArray90, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray96, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4605");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication75.sub(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) (byte) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test4606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4606");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray26 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray27 = new int[][] { intArray21, intArray26 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.sub(intArray27, intArray74);
        int[] intArray79 = new int[] { 100, '#', 10 };
        int[][] intArray80 = new int[][] { intArray79 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        strassenMatrixMultiplication16.split(intArray80, intArray83, (int) (short) 0, (int) (short) 0);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication15.add(intArray83, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray14, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4607");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        strassenMatrixMultiplication6.join(intArray9, intArray73, (int) (short) -1, (int) '#');
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray77, intArray80, (int) (short) 100, (int) (byte) 100);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray80, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, (int) (short) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4608");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray33 = null;
        int[][] intArray34 = new int[][] {};
        strassenMatrixMultiplication32.split(intArray33, intArray34, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication38 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray57 = new int[][] { intArray44, intArray50, intArray56 };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray83 = new int[][] { intArray62, intArray67, intArray72, intArray77, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication38.multiply(intArray57, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication26.add(intArray34, intArray84);
        strassenMatrixMultiplication14.split(intArray22, intArray34, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication2.split(intArray10, intArray22, (int) (short) 0, 10);
        strassenMatrixMultiplication0.split(intArray1, intArray10, (int) (byte) 0, (int) (short) 10);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) '4', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4609");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        int[][] intArray60 = null;
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray60, intArray61, (int) (short) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test4610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4610");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray29, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray87, intArray88, (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4611");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test4612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4612");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray72, intArray76, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication7.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray6, intArray90, (int) (short) -1, 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test4613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4613");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication1.sub(intArray8, intArray81);
        int[][] intArray83 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray83, (int) 'a', (int) ' ');
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.multiply(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4614");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 10, (int) (short) -1);
        int[][] intArray91 = new int[][] {};
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4615");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        strassenMatrixMultiplication2.split(intArray8, intArray17, (int) 'a', 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray72 = strassenMatrixMultiplication0.multiply(intArray1, intArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test4616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4616");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication12.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray72, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[] intArray85 = new int[] {};
        int[] intArray86 = new int[] {};
        int[] intArray87 = new int[] {};
        int[] intArray88 = new int[] {};
        int[][] intArray89 = new int[][] { intArray85, intArray86, intArray87, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication0.add(intArray81, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.multiply(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test4617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4617");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        int[][] intArray87 = null;
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[] intArray90 = new int[] {};
        int[][] intArray91 = new int[][] { intArray88, intArray89, intArray90 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.multiply(intArray87, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4618");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray76, intArray79);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4619");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = strassenMatrixMultiplication6.sub(intArray27, intArray83);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test4620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4620");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        int[][] intArray26 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray58);
        strassenMatrixMultiplication20.split(intArray26, intArray86, (int) (short) -1, (int) (byte) 100);
        int[][] intArray90 = null;
        strassenMatrixMultiplication14.join(intArray86, intArray90, (int) (byte) 100, 10);
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.multiply(intArray90, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4621");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray55 = new int[][] { intArray42, intArray48, intArray54 };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray81 = new int[][] { intArray60, intArray65, intArray70, intArray75, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication36.multiply(intArray55, intArray81);
        int[][] intArray83 = strassenMatrixMultiplication24.add(intArray32, intArray82);
        strassenMatrixMultiplication12.split(intArray20, intArray32, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) (short) 0, 10);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray90, intArray91, (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test4622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4622");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray60 = new int[] { (short) 0 };
        int[] intArray62 = new int[] { (short) 0 };
        int[][] intArray63 = new int[][] { intArray60, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication4.multiply(intArray10, intArray63);
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[][] intArray83 = new int[][] { intArray67, intArray70, intArray73, intArray76, intArray79, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication3.add(intArray10, intArray83);
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray10, intArray85, (-1), (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication89 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray90 = null;
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication89.split(intArray90, intArray91, (int) '4', (-1));
        int[][] intArray95 = strassenMatrixMultiplication1.sub(intArray85, intArray90);
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray90, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test4623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4623");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication12.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray72, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4624");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray16 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray17 = new int[][] { intArray11, intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.sub(intArray17, intArray64);
        int[] intArray68 = new int[] { (short) 10, '#' };
        int[][] intArray69 = new int[][] { intArray68 };
        int[] intArray71 = new int[] { ' ' };
        int[] intArray73 = new int[] { ' ' };
        int[] intArray75 = new int[] { ' ' };
        int[] intArray77 = new int[] { ' ' };
        int[][] intArray78 = new int[][] { intArray71, intArray73, intArray75, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication6.multiply(intArray69, intArray78);
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray78, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[32]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test4625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4625");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication20.sub(intArray80, intArray81);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication14.sub(intArray85, intArray91);
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray91, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4626");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        int[][] intArray17 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray32 = null;
        int[][] intArray33 = new int[][] {};
        strassenMatrixMultiplication31.split(intArray32, intArray33, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication37 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray55 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray56 = new int[][] { intArray43, intArray49, intArray55 };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray82 = new int[][] { intArray61, intArray66, intArray71, intArray76, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication37.multiply(intArray56, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication25.add(intArray33, intArray56);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication19.sub(intArray33, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication18.add(intArray86, intArray87);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray17, intArray88, 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4627");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) 'a', (int) (byte) 1);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.add(intArray14, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray83, intArray84, (int) (byte) 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4628");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 10, (int) (short) -1);
        int[][] intArray91 = new int[][] {};
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4629");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication14.sub(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.sub(intArray74, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray78, intArray79);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[] intArray87 = new int[] {};
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[] intArray90 = new int[] {};
        int[][] intArray91 = new int[][] { intArray87, intArray88, intArray89, intArray90 };
        int[][] intArray92 = strassenMatrixMultiplication2.add(intArray83, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray83, intArray93);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray83, intArray95, (int) (short) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4630");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        strassenMatrixMultiplication3.split(intArray11, intArray23, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication1.split(intArray2, intArray23, (int) (byte) 10, (int) (short) 100);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.add(intArray23, intArray81);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test4631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4631");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        strassenMatrixMultiplication3.split(intArray11, intArray23, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication1.split(intArray2, intArray23, (int) (byte) 10, (int) (short) 100);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.add(intArray23, intArray81);
        java.lang.Class<?> wildcardClass83 = intArray23.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test4632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4632");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.add(intArray67, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray78, intArray84, (int) (short) 10, (int) 'a');
        int[][] intArray88 = null;
        strassenMatrixMultiplication1.join(intArray84, intArray88, 0, (int) (short) 0);
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray88, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4633");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray84, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray92, intArray93, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4634");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication54 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray55 = null;
        int[][] intArray56 = new int[][] {};
        strassenMatrixMultiplication54.split(intArray55, intArray56, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication54.sub(intArray62, intArray66);
        int[][] intArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray67, intArray68, (int) 'a', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test4635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4635");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray29, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray87, intArray88, (int) 'a', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4636");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        int[][] intArray78 = null;
        strassenMatrixMultiplication1.join(intArray74, intArray78, 100, (int) (short) 0);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray74, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test4637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4637");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication8.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray68, intArray71);
        strassenMatrixMultiplication0.split(intArray1, intArray72, 100, (int) '4');
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.multiply(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test4638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4638");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray81, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4639");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (byte) -1, 1);
        java.lang.Class<?> wildcardClass85 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test4640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4640");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        int[][] intArray71 = null;
        int[] intArray77 = new int[] { (-1), (-1), '4', 0, (byte) 1 };
        int[] intArray83 = new int[] { (-1), (-1), '4', 0, (byte) 1 };
        int[] intArray89 = new int[] { (-1), (-1), '4', 0, (byte) 1 };
        int[] intArray95 = new int[] { (-1), (-1), '4', 0, (byte) 1 };
        int[][] intArray96 = new int[][] { intArray77, intArray83, intArray89, intArray95 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray71, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 52, 0, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, 52, 0, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, 52, 0, 1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, 52, 0, 1]");
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4641");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        int[][] intArray19 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray58);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication21.sub(intArray35, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.add(intArray88, intArray89);
        strassenMatrixMultiplication13.split(intArray19, intArray88, (int) (short) 10, 10);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication7.sub(intArray88, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray95, (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test4642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4642");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication6.add(intArray68, intArray72);
        int[][] intArray74 = new int[][] {};
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray74, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication6.sub(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray77, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray82, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test4643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4643");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1) };
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1) };
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1) };
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1) };
        int[][] intArray76 = new int[][] { intArray63, intArray67, intArray71, intArray75 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication78.sub(intArray86, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication77.add(intArray91, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray93, (int) (byte) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4644");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray5, intArray73);
        int[][] intArray75 = null;
        strassenMatrixMultiplication0.join(intArray5, intArray75, 0, (int) '4');
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication80.add(intArray94, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray79, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4645");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (byte) -1, 1);
        java.lang.Class<?> wildcardClass85 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test4646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4646");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[] intArray64 = new int[] { 100, '#', 10 };
        int[][] intArray65 = new int[][] { intArray64 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray65, intArray68, (int) (short) 0, (int) (short) 0);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.add(intArray68, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication77.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray93, intArray94, (int) (short) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4647");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray27 = new int[][] { intArray26 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication22.sub(intArray27, intArray73);
        int[] intArray77 = new int[] { (short) 0 };
        int[] intArray79 = new int[] { (short) 0 };
        int[][] intArray80 = new int[][] { intArray77, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication21.multiply(intArray27, intArray80);
        strassenMatrixMultiplication14.join(intArray17, intArray81, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication12.split(intArray13, intArray17, (int) '#', (int) (byte) 1);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = strassenMatrixMultiplication6.add(intArray17, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray17, intArray90, (int) '#', 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4648");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) 'a', (int) (byte) 1);
        int[][] intArray81 = null;
        strassenMatrixMultiplication0.join(intArray26, intArray81, (int) 'a', (int) (byte) 10);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray86, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test4649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4649");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.add(intArray69, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication72.add(intArray86, intArray87);
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray69, intArray86);
        java.lang.Class<?> wildcardClass90 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test4650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4650");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = new int[][] {};
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray74, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray79, intArray80);
        java.lang.Class<?> wildcardClass82 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test4651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4651");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.add(intArray69, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication72.add(intArray86, intArray87);
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray69, intArray86);
        java.lang.Class<?> wildcardClass90 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test4652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4652");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.add(intArray69, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication72.add(intArray86, intArray87);
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray69, intArray86);
        java.lang.Class<?> wildcardClass90 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test4653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4653");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) (short) 10, (int) (short) 10);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication85.sub(intArray93, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray84, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test4654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4654");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication17.add(intArray79, intArray83);
        strassenMatrixMultiplication15.split(intArray16, intArray84, (int) (short) -1, (int) (byte) -1);
        strassenMatrixMultiplication0.split(intArray14, intArray84, (int) (byte) 1, 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4655");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = new int[][] {};
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray74, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray79, intArray80);
        java.lang.Class<?> wildcardClass82 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test4656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4656");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray88, intArray91);
        int[][] intArray93 = new int[][] {};
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray92, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray92, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test4657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4657");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray88, intArray91);
        int[][] intArray93 = new int[][] {};
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray92, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray92, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test4658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4658");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        strassenMatrixMultiplication9.split(intArray17, intArray29, (int) 'a', (int) (byte) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.sub(intArray17, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray85, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray89, intArray90, (int) (byte) -1, (int) (byte) -1);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4659");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.add(intArray69, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication72.add(intArray86, intArray87);
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray69, intArray86);
        java.lang.Class<?> wildcardClass90 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test4660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4660");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = new int[][] {};
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray74, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray79, intArray80);
        java.lang.Class<?> wildcardClass82 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test4661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4661");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.sub(intArray30, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication15.join(intArray83, intArray84, (int) (short) 1, (int) (short) 1);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication14.add(intArray83, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray83, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4662");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray78, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4663");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication20.add(intArray82, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication14.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray88, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4664");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray77, 100, (int) (short) 0);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test4665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4665");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray16 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray17 = new int[][] { intArray11, intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.sub(intArray17, intArray64);
        int[] intArray69 = new int[] { 100, '#', 10 };
        int[][] intArray70 = new int[][] { intArray69 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray70, intArray73, (int) (short) 0, (int) (short) 0);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray80, (int) (byte) 0, (int) (short) -1);
        java.lang.Class<?> wildcardClass84 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test4666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4666");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.multiply(intArray87, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4667");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.sub(intArray21, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray21, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        strassenMatrixMultiplication6.join(intArray79, intArray83, 100, (int) (short) 0);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray79, intArray87);
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4668");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray87, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4669");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray2, 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4670");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray16 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray17 = new int[][] { intArray11, intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.sub(intArray17, intArray64);
        int[] intArray69 = new int[] { 100, '#', 10 };
        int[][] intArray70 = new int[][] { intArray69 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray70, intArray73, (int) (short) 0, (int) (short) 0);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray80, (int) (byte) 0, (int) (short) -1);
        java.lang.Class<?> wildcardClass84 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test4671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4671");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[] intArray87 = new int[] { (byte) 1, 1, 1, 100, '#' };
        int[][] intArray88 = new int[][] { intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication6.multiply(intArray61, intArray88);
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray88, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, 1, 1, 100, 35]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4672");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication22.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray82, intArray85);
        strassenMatrixMultiplication14.split(intArray15, intArray86, 100, (int) '4');
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, 10, (int) (short) 10);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (short) 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4673");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray48);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication11.sub(intArray25, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication10.add(intArray78, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.sub(intArray6, intArray78);
        strassenMatrixMultiplication1.split(intArray2, intArray6, (int) (short) 10, (int) (short) 10);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray6, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4674");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray24 = new int[][] { intArray23 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication19.sub(intArray24, intArray70);
        int[] intArray74 = new int[] { (short) 0 };
        int[] intArray76 = new int[] { (short) 0 };
        int[][] intArray77 = new int[][] { intArray74, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication18.multiply(intArray24, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication6.sub(intArray14, intArray77);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray79, intArray80, 0, (int) (short) -1);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) (short) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test4675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4675");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        int[][] intArray21 = strassenMatrixMultiplication8.sub(intArray16, intArray20);
        int[][] intArray22 = null;
        int[][] intArray23 = strassenMatrixMultiplication7.add(intArray21, intArray22);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray32 = null;
        int[][] intArray33 = new int[][] {};
        strassenMatrixMultiplication31.split(intArray32, intArray33, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication37 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray55 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray56 = new int[][] { intArray43, intArray49, intArray55 };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray82 = new int[][] { intArray61, intArray66, intArray71, intArray76, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication37.multiply(intArray56, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication25.add(intArray33, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication24.add(intArray33, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication7.join(intArray86, intArray87, 1, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray6, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4676");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray13 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray14 = new int[][] { intArray8, intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication3.sub(intArray14, intArray61);
        int[] intArray66 = new int[] { 100, '#', 10 };
        int[][] intArray67 = new int[][] { intArray66 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication3.split(intArray67, intArray70, (int) (short) 0, (int) (short) 0);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication2.add(intArray70, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication2.sub(intArray92, intArray93);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray1, intArray93, (int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4677");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.sub(intArray21, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray21, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        strassenMatrixMultiplication6.join(intArray79, intArray83, 100, (int) (short) 0);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray79, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4678");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray25, intArray77);
        java.lang.Class<?> wildcardClass79 = intArray25.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test4679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4679");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication20.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray85, (int) (byte) 0, (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4680");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray83, intArray84, 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4681");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray72, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test4682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4682");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray37 = null;
        int[][] intArray38 = new int[][] {};
        strassenMatrixMultiplication36.split(intArray37, intArray38, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication42 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray60 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray61 = new int[][] { intArray48, intArray54, intArray60 };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray86 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray87 = new int[][] { intArray66, intArray71, intArray76, intArray81, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication42.multiply(intArray61, intArray87);
        int[][] intArray89 = strassenMatrixMultiplication30.add(intArray38, intArray88);
        strassenMatrixMultiplication18.split(intArray26, intArray38, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) (short) 0, 10);
        int[][] intArray96 = null;
        strassenMatrixMultiplication0.join(intArray14, intArray96, (-1), 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4683");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray82, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.add(intArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4684");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) '#', (int) (byte) 10);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test4685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4685");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray88, intArray91);
        int[][] intArray93 = new int[][] {};
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray92, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray92, intArray95);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test4686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4686");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.add(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray76, intArray79);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        strassenMatrixMultiplication2.join(intArray94, intArray95, (int) (byte) 100, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray1, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4687");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication56 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray57 = null;
        int[][] intArray58 = new int[][] {};
        strassenMatrixMultiplication56.split(intArray57, intArray58, (int) '4', (-1));
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication2.add(intArray58, intArray62);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray64 = strassenMatrixMultiplication0.multiply(intArray1, intArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test4688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4688");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray25, intArray77);
        java.lang.Class<?> wildcardClass79 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test4689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4689");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray25, intArray77);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test4690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4690");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray27 = new int[][] { intArray26 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication22.sub(intArray27, intArray73);
        int[] intArray77 = new int[] { (short) 0 };
        int[] intArray79 = new int[] { (short) 0 };
        int[][] intArray80 = new int[][] { intArray77, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication21.multiply(intArray27, intArray80);
        strassenMatrixMultiplication14.join(intArray17, intArray81, (int) (short) -1, (int) '#');
        int[][] intArray85 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        strassenMatrixMultiplication14.split(intArray85, intArray88, (int) (short) 100, (int) (byte) 100);
        strassenMatrixMultiplication7.split(intArray13, intArray88, (int) (byte) 10, 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.add(intArray6, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4691");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray62, intArray66, (int) ' ', (int) (byte) 1);
        int[][] intArray70 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray70, intArray73, (-1), (int) (short) -1);
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray80, intArray81, (int) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test4692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4692");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray63 = new int[] { 100, '#', 10 };
        int[][] intArray64 = new int[][] { intArray63 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray64, intArray67, (int) (short) 0, (int) (short) 0);
        int[][] intArray74 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication75.sub(intArray83, intArray87);
        strassenMatrixMultiplication0.split(intArray74, intArray88, (int) (short) 10, (int) (short) 1);
        java.lang.Class<?> wildcardClass92 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test4693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4693");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.sub(intArray21, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray21, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        strassenMatrixMultiplication6.join(intArray79, intArray83, 100, (int) (short) 0);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray79, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4694");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray24 = new int[][] { intArray23 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication19.sub(intArray24, intArray70);
        int[] intArray74 = new int[] { (short) 0 };
        int[] intArray76 = new int[] { (short) 0 };
        int[][] intArray77 = new int[][] { intArray74, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication18.multiply(intArray24, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication6.sub(intArray14, intArray77);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray79, intArray80, 0, (int) (short) -1);
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4695");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray25, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.multiply(intArray79, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4696");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray67 = strassenMatrixMultiplication0.add(intArray61, intArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test4697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4697");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[][] intArray48 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication49 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray50 = null;
        int[][] intArray51 = new int[][] {};
        strassenMatrixMultiplication49.split(intArray50, intArray51, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray48, intArray51, (int) (short) 0, 10);
        int[][] intArray58 = null;
        strassenMatrixMultiplication0.join(intArray51, intArray58, 10, (int) (short) 0);
        int[][] intArray62 = null;
        int[][] intArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray62, intArray63, 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
    }

    @Test
    public void test4698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4698");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication7.sub(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication6.add(intArray85, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray85, intArray90, 0, 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (short) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4699");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        strassenMatrixMultiplication3.split(intArray11, intArray23, (int) 'a', (int) (byte) 1);
        int[][] intArray78 = null;
        strassenMatrixMultiplication2.join(intArray11, intArray78, (int) (byte) 0, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.add(intArray1, intArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test4700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4700");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.sub(intArray21, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray21, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        strassenMatrixMultiplication6.join(intArray79, intArray83, 100, (int) (short) 0);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray79, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4701");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray67, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.add(intArray67, intArray70);
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray70, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test4702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4702");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) '#', (int) (byte) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4703");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray63 = new int[] { 100, '#', 10 };
        int[][] intArray64 = new int[][] { intArray63 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray64, intArray67, (int) (short) 0, (int) (short) 0);
        int[][] intArray74 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication75.sub(intArray83, intArray87);
        strassenMatrixMultiplication0.split(intArray74, intArray88, (int) (short) 10, (int) (short) 1);
        java.lang.Class<?> wildcardClass92 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test4704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4704");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication1.sub(intArray61, intArray62);
        int[][] intArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray65 = strassenMatrixMultiplication0.sub(intArray62, intArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test4705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4705");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray88, (int) ' ', 10);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4706");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.add(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray76, intArray79);
        strassenMatrixMultiplication0.join(intArray1, intArray76, (int) (byte) 1, (int) (byte) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4707");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[] intArray79 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray80 = new int[][] { intArray79 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray86, (int) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4708");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication6.add(intArray68, intArray72);
        int[][] intArray74 = new int[][] {};
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray74, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray80, (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4709");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        strassenMatrixMultiplication6.join(intArray9, intArray73, (int) (short) -1, (int) '#');
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray77, intArray80, (int) (short) 100, (int) (byte) 100);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray80, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4710");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray73, intArray74, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test4711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4711");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 0, (int) (short) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, (int) '4', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4712");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        strassenMatrixMultiplication8.split(intArray74, intArray77, 0, (int) (byte) 1);
        strassenMatrixMultiplication1.split(intArray7, intArray77, (int) '#', (int) (byte) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray89, intArray93);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray93, intArray95, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4713");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.add(intArray76, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray76, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.add(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test4714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4714");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray73, intArray74, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test4715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4715");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication6.sub(intArray13, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication90 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray91 = null;
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication90.split(intArray91, intArray92, (int) '4', (-1));
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray96, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4716");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 100, '4', (byte) -1, 10, '4' };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.sub(intArray89, intArray92);
        strassenMatrixMultiplication0.split(intArray7, intArray93, (-1), (int) 'a');
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 52, -1, 10, 52]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4717");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.sub(intArray30, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication15.join(intArray83, intArray84, (int) (short) 1, (int) (short) 1);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication14.add(intArray83, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray83, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4718");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray25 = new int[][] { intArray24 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication20.sub(intArray25, intArray71);
        int[] intArray75 = new int[] { (short) 0 };
        int[] intArray77 = new int[] { (short) 0 };
        int[][] intArray78 = new int[][] { intArray75, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication19.multiply(intArray25, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication7.sub(intArray15, intArray78);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (int) (short) 10, (int) 'a');
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication85.sub(intArray93, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray84, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test4719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4719");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) (short) 1, (int) (short) 100);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) (short) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test4720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4720");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        strassenMatrixMultiplication6.join(intArray9, intArray73, (int) (short) -1, (int) '#');
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray77, intArray80, (int) (short) 100, (int) (byte) 100);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray80, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4721");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray87, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray89, intArray90, (int) (byte) 10, (int) '4');
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4722");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray10 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray11 = new int[][] { intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication6.sub(intArray11, intArray57);
        int[] intArray65 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray65, intArray71, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication5.add(intArray59, intArray78);
        int[][] intArray80 = new int[][] {};
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication5.add(intArray80, intArray81);
        strassenMatrixMultiplication3.split(intArray4, intArray82, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication1.split(intArray2, intArray82, 10, (int) (short) -1);
        int[][] intArray89 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray89, (-1), (int) (short) 1);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray93, intArray94, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4723");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray62, intArray66, (int) ' ', (int) (byte) 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray71, (int) (byte) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test4724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4724");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 10, (int) (short) -1);
        int[][] intArray91 = new int[][] {};
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
        int[][] intArray94 = new int[][] {};
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4725");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication18.sub(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication17.add(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        java.lang.Class<?> wildcardClass85 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test4726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4726");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray40);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication3.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.add(intArray68, intArray71);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray1, intArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test4727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4727");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication1.add(intArray80, intArray86);
        int[][] intArray88 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication89 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray90 = null;
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication89.split(intArray90, intArray91, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray88, intArray91, 10, 0);
        int[][] intArray98 = null;
        int[][] intArray99 = strassenMatrixMultiplication0.add(intArray91, intArray98);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test4728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4728");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.sub(intArray30, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication15.join(intArray83, intArray84, (int) (short) 1, (int) (short) 1);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication14.add(intArray83, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray83, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.add(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4729");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication18.sub(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication17.add(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test4730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4730");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray70);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication75.add(intArray89, intArray90);
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray90, intArray92, (int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4731");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray80, (int) (short) 100, (int) (short) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray86, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray92, intArray93, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4732");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray35 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray42 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray43 = new int[][] { intArray21, intArray28, intArray35, intArray42 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication44 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray62 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray63 = new int[][] { intArray50, intArray56, intArray62 };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray88 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray89 = new int[][] { intArray68, intArray73, intArray78, intArray83, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication44.multiply(intArray63, intArray89);
        int[][] intArray91 = strassenMatrixMultiplication14.sub(intArray43, intArray89);
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4733");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[] intArray64 = new int[] { 100, '#', 10 };
        int[][] intArray65 = new int[][] { intArray64 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray65, intArray68, (int) (short) 0, (int) (short) 0);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.add(intArray68, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray79 = strassenMatrixMultiplication0.multiply(intArray77, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test4734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4734");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.sub(intArray60, intArray61);
        int[][] intArray63 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication64.sub(intArray72, intArray76);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray63, intArray77, (-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test4735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4735");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        strassenMatrixMultiplication7.split(intArray13, intArray73, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray2, intArray73, (int) 'a', (int) (byte) 100);
        int[][] intArray80 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray87 = strassenMatrixMultiplication0.add(intArray80, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test4736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4736");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        strassenMatrixMultiplication8.split(intArray16, intArray28, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = strassenMatrixMultiplication7.sub(intArray28, intArray84);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication1.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray89, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4737");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = new int[][] {};
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray71, intArray72);
        int[][] intArray74 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication75.add(intArray89, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray74, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4738");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.add(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray76, intArray79);
        strassenMatrixMultiplication0.join(intArray1, intArray76, (int) (byte) 1, (int) (byte) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.add(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4739");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, 0, 10);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4740");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray25, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray81, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4741");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication1.add(intArray74, intArray75);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray74, intArray77, (int) '#', (int) ' ');
        java.lang.Class<?> wildcardClass81 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test4742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4742");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication1.add(intArray74, intArray75);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray74, intArray77, (int) '#', (int) ' ');
        java.lang.Class<?> wildcardClass81 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test4743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4743");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray81 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray67, intArray74, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray33, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.add(intArray12, intArray33);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 10, 10);
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4744");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray71, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test4745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4745");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) '#', (int) (byte) 10);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test4746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4746");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication1.sub(intArray8, intArray81);
        int[][] intArray83 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray83, (int) 'a', (int) ' ');
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray87, intArray88, (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4747");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.add(intArray64, intArray68);
        strassenMatrixMultiplication0.split(intArray1, intArray69, (int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication73.add(intArray87, intArray88);
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray87, intArray90, 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4748");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        strassenMatrixMultiplication0.split(intArray79, intArray93, (int) (short) 0, (int) (short) 100);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test4749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4749");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray80, (int) '4', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4750");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = new int[][] {};
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.add(intArray75, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray78, intArray79, (int) ' ', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test4751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4751");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4752");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        int[][] intArray76 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        strassenMatrixMultiplication16.split(intArray76, intArray79, (int) (short) -1, (int) (byte) 0);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication15.add(intArray79, intArray86);
        strassenMatrixMultiplication0.split(intArray14, intArray79, 1, (int) (short) -1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4753");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray81 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray67, intArray74, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray33, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.add(intArray12, intArray33);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 10, 10);
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4754");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray58 = new int[] { (short) 0 };
        int[] intArray60 = new int[] { (short) 0 };
        int[][] intArray61 = new int[][] { intArray58, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication2.multiply(intArray8, intArray61);
        int[] intArray65 = new int[] { 'a', (short) 1 };
        int[] intArray68 = new int[] { 'a', (short) 1 };
        int[] intArray71 = new int[] { 'a', (short) 1 };
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[][] intArray81 = new int[][] { intArray65, intArray68, intArray71, intArray74, intArray77, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication1.add(intArray8, intArray81);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication1.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray85, intArray91);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test4755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4755");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray58 = new int[] { (short) 0 };
        int[] intArray60 = new int[] { (short) 0 };
        int[][] intArray61 = new int[][] { intArray58, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication2.multiply(intArray8, intArray61);
        int[] intArray65 = new int[] { 'a', (short) 1 };
        int[] intArray68 = new int[] { 'a', (short) 1 };
        int[] intArray71 = new int[] { 'a', (short) 1 };
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[][] intArray81 = new int[][] { intArray65, intArray68, intArray71, intArray74, intArray77, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication1.add(intArray8, intArray81);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication1.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray85, intArray91);
        java.lang.Class<?> wildcardClass93 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test4756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4756");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray84, 1, (int) (byte) -1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray88, intArray89, 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test4757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4757");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        strassenMatrixMultiplication2.split(intArray10, intArray22, (int) 'a', (int) (byte) 1);
        int[][] intArray77 = null;
        strassenMatrixMultiplication1.join(intArray10, intArray77, (int) (byte) 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        strassenMatrixMultiplication1.join(intArray83, intArray87, (int) '4', (int) (short) 0);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.add(intArray83, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.add(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4758");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication8.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication2.sub(intArray90, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray91, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4759");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication1.sub(intArray61, intArray62);
        int[][] intArray64 = null;
        int[][] intArray65 = strassenMatrixMultiplication0.add(intArray63, intArray64);
        int[][] intArray66 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray66, intArray69, (int) (short) 100, (int) '#');
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test4760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4760");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        int[][] intArray73 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray73, intArray76, (int) (short) 100, (int) (byte) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication89 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray90 = null;
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication89.split(intArray90, intArray91, (int) '4', (-1));
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication83.sub(intArray91, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication2.sub(intArray91, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray1, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test4761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4761");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[] intArray64 = new int[] { 100, '#', 10 };
        int[][] intArray65 = new int[][] { intArray64 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray65, intArray68, (int) (short) 0, (int) (short) 0);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.add(intArray68, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication77.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, (int) (byte) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4762");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.add(intArray9, intArray61);
        int[][] intArray63 = null;
        int[][] intArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray63, intArray64, (int) (byte) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test4763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4763");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray72, intArray76, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication7.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray6, intArray90, (int) (short) -1, 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (short) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test4764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4764");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray58 = new int[] { (short) 0 };
        int[] intArray60 = new int[] { (short) 0 };
        int[][] intArray61 = new int[][] { intArray58, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication2.multiply(intArray8, intArray61);
        int[] intArray65 = new int[] { 'a', (short) 1 };
        int[] intArray68 = new int[] { 'a', (short) 1 };
        int[] intArray71 = new int[] { 'a', (short) 1 };
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[][] intArray81 = new int[][] { intArray65, intArray68, intArray71, intArray74, intArray77, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication1.add(intArray8, intArray81);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication1.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray85, intArray91);
        java.lang.Class<?> wildcardClass93 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test4765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4765");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication22.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray82, intArray85);
        strassenMatrixMultiplication14.split(intArray15, intArray86, 100, (int) '4');
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, 10, (int) (short) 10);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4766");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.add(intArray89, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.sub(intArray17, intArray89);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray17, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4767");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication78.add(intArray92, intArray93);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4768");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication3.add(intArray11, intArray61);
        int[][] intArray63 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        strassenMatrixMultiplication3.split(intArray63, intArray66, (int) (short) -1, (int) (byte) 0);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication2.add(intArray66, intArray73);
        int[][] intArray75 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray75, intArray78, 0, (int) 'a');
        strassenMatrixMultiplication0.split(intArray1, intArray78, (-1), (int) (short) 1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray88, intArray89, (int) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4769");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication70.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4770");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication79.add(intArray93, intArray94);
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray94, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test4771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4771");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication18.sub(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication17.add(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        java.lang.Class<?> wildcardClass85 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test4772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4772");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        int[] intArray72 = new int[] { 'a', (short) 1 };
        int[] intArray75 = new int[] { 'a', (short) 1 };
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[] intArray84 = new int[] { 'a', (short) 1 };
        int[] intArray87 = new int[] { 'a', (short) 1 };
        int[][] intArray88 = new int[][] { intArray72, intArray75, intArray78, intArray81, intArray84, intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication8.add(intArray15, intArray88);
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray15, intArray90, (-1), (-1));
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray6, intArray90);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4773");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) -1, (int) (byte) 100);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray70, intArray71, (int) (byte) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test4774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4774");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray83, intArray84, (-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4775");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4776");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray81 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray67, intArray74, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray33, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.add(intArray12, intArray33);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 10, 10);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4777");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray76, (int) (short) 1, (int) (short) 100);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test4778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4778");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication16.sub(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication15.add(intArray78, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray14, intArray79, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4779");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray89 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray90 = new int[][] { intArray75, intArray82, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray41, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.add(intArray20, intArray41);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray20, intArray93);
        java.lang.Class<?> wildcardClass95 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4780");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray89 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray90 = new int[][] { intArray75, intArray82, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray41, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.add(intArray20, intArray41);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray20, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4781");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray82, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4782");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray82, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4783");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        strassenMatrixMultiplication3.split(intArray11, intArray23, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication1.split(intArray2, intArray23, (int) (byte) 10, (int) (short) 100);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.add(intArray23, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray83, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4784");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication14.sub(intArray74, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.add(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4785");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, 0, 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, 1, (int) (byte) 100);
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test4786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4786");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[] intArray79 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray80 = new int[][] { intArray79 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray86, 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4787");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        strassenMatrixMultiplication0.split(intArray79, intArray93, (int) (short) 0, (int) (short) 100);
        java.lang.Class<?> wildcardClass97 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test4788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4788");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication2.sub(intArray10, intArray90);
        strassenMatrixMultiplication0.split(intArray1, intArray10, (int) (byte) 10, (int) (byte) 1);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4789");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray71 = new int[] { (short) 0 };
        int[] intArray73 = new int[] { (short) 0 };
        int[][] intArray74 = new int[][] { intArray71, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication15.multiply(intArray21, intArray74);
        strassenMatrixMultiplication8.join(intArray11, intArray75, (int) (short) -1, (int) '#');
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication7.sub(intArray11, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication1.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        strassenMatrixMultiplication0.join(intArray80, intArray83, 0, (int) (byte) 0);
        java.lang.Class<?> wildcardClass87 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test4790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4790");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray71 = new int[] { (short) 0 };
        int[] intArray73 = new int[] { (short) 0 };
        int[][] intArray74 = new int[][] { intArray71, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication15.multiply(intArray21, intArray74);
        strassenMatrixMultiplication8.join(intArray11, intArray75, (int) (short) -1, (int) '#');
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication7.sub(intArray11, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication1.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        strassenMatrixMultiplication0.join(intArray80, intArray83, 0, (int) (byte) 0);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray87, intArray88, (int) (byte) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4791");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray71 = new int[] { (short) 0 };
        int[] intArray73 = new int[] { (short) 0 };
        int[][] intArray74 = new int[][] { intArray71, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication15.multiply(intArray21, intArray74);
        strassenMatrixMultiplication8.join(intArray11, intArray75, (int) (short) -1, (int) '#');
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication7.sub(intArray11, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication1.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        strassenMatrixMultiplication0.join(intArray80, intArray83, 0, (int) (byte) 0);
        java.lang.Class<?> wildcardClass87 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test4792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4792");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray78, intArray79, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test4793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4793");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test4794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4794");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray89 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray90 = new int[][] { intArray75, intArray82, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray41, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.add(intArray20, intArray41);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray20, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4795");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray5, intArray73);
        int[][] intArray75 = null;
        strassenMatrixMultiplication0.join(intArray5, intArray75, 0, (int) '4');
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray80, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test4796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4796");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication1.sub(intArray61, intArray62);
        int[][] intArray64 = null;
        int[][] intArray65 = strassenMatrixMultiplication0.add(intArray63, intArray64);
        int[][] intArray66 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray66, intArray69, (int) (short) 100, (int) '#');
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test4797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4797");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray84, intArray87, 1, (int) (byte) 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) '#', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4798");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4799");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray82, intArray87);
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4800");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, 0, 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, 1, (int) (byte) 100);
        java.lang.Class<?> wildcardClass94 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test4801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4801");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 10, (int) (short) -1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4802");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray58 = new int[] { (short) 0 };
        int[] intArray60 = new int[] { (short) 0 };
        int[][] intArray61 = new int[][] { intArray58, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication2.multiply(intArray8, intArray61);
        int[] intArray65 = new int[] { 'a', (short) 1 };
        int[] intArray68 = new int[] { 'a', (short) 1 };
        int[] intArray71 = new int[] { 'a', (short) 1 };
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[][] intArray81 = new int[][] { intArray65, intArray68, intArray71, intArray74, intArray77, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication1.add(intArray8, intArray81);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication1.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.sub(intArray85, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.add(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4803");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        int[][] intArray73 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray73, intArray76, 0, (int) 'a');
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.multiply(intArray83, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test4804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4804");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray87, (int) (short) 0, 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4805");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test4806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4806");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray84, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray92, intArray93, 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4807");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        int[][] intArray17 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray55 = new int[][] { intArray42, intArray48, intArray54 };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray81 = new int[][] { intArray60, intArray65, intArray70, intArray75, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication36.multiply(intArray55, intArray81);
        int[][] intArray83 = strassenMatrixMultiplication24.add(intArray32, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication18.add(intArray83, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray17, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4808");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray72, intArray76, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication7.add(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication1.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray90, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4809");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication70.sub(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray78, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4810");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        strassenMatrixMultiplication8.split(intArray16, intArray28, (int) 'a', (int) (byte) 1);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.add(intArray16, intArray83);
        strassenMatrixMultiplication0.split(intArray1, intArray84, (int) '4', (int) (byte) 0);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray88, intArray89, (int) (byte) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4811");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        strassenMatrixMultiplication8.split(intArray16, intArray28, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = strassenMatrixMultiplication7.sub(intArray28, intArray84);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication1.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray89, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (short) 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4812");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        int[][] intArray17 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray30 = new int[][] { intArray29 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication25.sub(intArray30, intArray76);
        int[] intArray80 = new int[] { (short) 0 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray80, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication24.multiply(intArray30, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        strassenMatrixMultiplication18.split(intArray83, intArray87, 100, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray17, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4813");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.sub(intArray15, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4814");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray53);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.sub(intArray30, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication15.join(intArray83, intArray84, (int) (short) 1, (int) (short) 1);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication14.add(intArray83, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray83, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray92, intArray93, 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4815");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test4816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4816");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication16.sub(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication15.add(intArray78, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.multiply(intArray14, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4817");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.sub(intArray60, intArray61);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication63 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray64 = null;
        int[][] intArray65 = new int[][] {};
        strassenMatrixMultiplication63.split(intArray64, intArray65, (int) '4', (-1));
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray65, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray72, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test4818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4818");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray80 = strassenMatrixMultiplication0.add(intArray1, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test4819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4819");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray79, intArray86);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4820");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, 1, (int) (short) -1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.multiply(intArray73, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test4821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4821");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        strassenMatrixMultiplication14.split(intArray20, intArray80, (int) (short) 10, 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4822");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        int[][] intArray21 = strassenMatrixMultiplication8.sub(intArray16, intArray20);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray36 = null;
        int[][] intArray37 = new int[][] {};
        strassenMatrixMultiplication35.split(intArray36, intArray37, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication41 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray59 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray60 = new int[][] { intArray47, intArray53, intArray59 };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray85 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray86 = new int[][] { intArray65, intArray70, intArray75, intArray80, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication41.multiply(intArray60, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication29.add(intArray37, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication28.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication22.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication8.sub(intArray90, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication2.add(intArray90, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray96, (int) (byte) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4823");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray71, intArray72, (int) ' ', 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, (int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test4824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4824");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray73, intArray74, (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test4825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4825");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.add(intArray89, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.sub(intArray17, intArray89);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray17, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4826");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        strassenMatrixMultiplication6.join(intArray71, intArray72, (int) '#', (int) ' ');
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray76, 0, (int) '#');
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.add(intArray80, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test4827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4827");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication70.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4828");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        int[][] intArray73 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray73, intArray76, 0, (int) 'a');
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray83, intArray84, (int) (short) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test4829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4829");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray80, (int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4830");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray81, intArray82, (int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4831");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 0, (int) (short) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray83, intArray87);
        int[] intArray89 = new int[] {};
        int[] intArray90 = new int[] {};
        int[] intArray91 = new int[] {};
        int[][] intArray92 = new int[][] { intArray89, intArray90, intArray91 };
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4832");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication14.sub(intArray74, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        strassenMatrixMultiplication0.split(intArray79, intArray93, 0, (int) (short) 1);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4833");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray40);
        strassenMatrixMultiplication2.split(intArray8, intArray17, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray80, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.add(intArray1, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4834");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray82, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray90, intArray91, (int) (short) 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4835");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (byte) -1, 1);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray86, (int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4836");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[] intArray86 = new int[] {};
        int[] intArray87 = new int[] {};
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[][] intArray90 = new int[][] { intArray86, intArray87, intArray88, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication1.add(intArray82, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray82, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4837");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, (int) (byte) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test4838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4838");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray1, intArray75, 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test4839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4839");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication69.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication68.add(intArray82, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4840");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication90 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray91 = null;
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication90.split(intArray91, intArray92, (int) '4', (-1));
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication84.sub(intArray92, intArray96);
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray96, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test4841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4841");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication14.split(intArray61, intArray64, (int) (short) 0, 10);
        int[][] intArray71 = null;
        strassenMatrixMultiplication0.join(intArray64, intArray71, (int) (short) 10, (int) (short) 1);
        java.lang.Class<?> wildcardClass75 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test4842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4842");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication54 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication55 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray56 = null;
        int[][] intArray57 = new int[][] {};
        strassenMatrixMultiplication55.split(intArray56, intArray57, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication55.sub(intArray63, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication54.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray70, intArray71);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test4843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4843");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication14.split(intArray61, intArray64, (int) (short) 0, 10);
        int[][] intArray71 = null;
        strassenMatrixMultiplication0.join(intArray64, intArray71, (int) (short) 10, (int) (short) 1);
        java.lang.Class<?> wildcardClass75 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test4844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4844");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray83, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray83, intArray90);
        java.lang.Class<?> wildcardClass92 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test4845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4845");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication69.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication68.add(intArray82, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4846");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray83, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray83, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.multiply(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4847");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, 1, (int) (short) -1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray73, intArray74, (int) (short) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test4848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4848");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication54 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication55 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray56 = null;
        int[][] intArray57 = new int[][] {};
        strassenMatrixMultiplication55.split(intArray56, intArray57, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication55.sub(intArray63, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication54.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray70, intArray71);
        java.lang.Class<?> wildcardClass73 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test4849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4849");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, (int) (short) 1, 100);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (short) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4850");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray85, intArray87, (int) (short) 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4851");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray83, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray83, intArray90);
        java.lang.Class<?> wildcardClass92 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test4852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4852");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray48);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication11.sub(intArray25, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication10.add(intArray78, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.sub(intArray6, intArray78);
        strassenMatrixMultiplication1.split(intArray2, intArray6, (int) (short) 10, (int) (short) 10);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray6, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4853");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        strassenMatrixMultiplication4.split(intArray5, intArray83, (int) (short) 10, (int) (byte) 1);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication3.add(intArray83, intArray87);
        int[][] intArray89 = null;
        strassenMatrixMultiplication2.join(intArray88, intArray89, (int) (byte) 10, (int) (short) -1);
        strassenMatrixMultiplication0.split(intArray1, intArray88, (int) (byte) 10, (int) (byte) -1);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4854");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication54 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication55 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray56 = null;
        int[][] intArray57 = new int[][] {};
        strassenMatrixMultiplication55.split(intArray56, intArray57, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication55.sub(intArray63, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication54.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray70, intArray71);
        java.lang.Class<?> wildcardClass73 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test4855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4855");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray83, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray83, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray83, intArray90);
        java.lang.Class<?> wildcardClass92 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test4856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4856");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray79, intArray86);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray92, intArray93, (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4857");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        int[][] intArray30 = null;
        int[][] intArray31 = strassenMatrixMultiplication18.sub(intArray26, intArray30);
        int[][] intArray32 = null;
        int[][] intArray33 = strassenMatrixMultiplication17.add(intArray31, intArray32);
        int[][] intArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray35 = strassenMatrixMultiplication0.add(intArray32, intArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
    }

    @Test
    public void test4858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4858");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication75.sub(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test4859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4859");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication3.add(intArray11, intArray61);
        int[][] intArray63 = null;
        int[][] intArray64 = strassenMatrixMultiplication2.sub(intArray62, intArray63);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray67, intArray71);
        strassenMatrixMultiplication0.split(intArray1, intArray72, (int) (short) 1, (int) (byte) 100);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test4860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4860");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.sub(intArray21, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray21, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        strassenMatrixMultiplication6.join(intArray79, intArray83, 100, (int) (short) 0);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray79, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4861");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray87 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray88 = new int[][] { intArray75, intArray81, intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication15.add(intArray69, intArray88);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.add(intArray14, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4862");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray77, 100, (int) (short) 0);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray81, intArray82, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test4863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4863");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        strassenMatrixMultiplication6.join(intArray9, intArray73, (int) (short) -1, (int) '#');
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray9, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray80, 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4864");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication6.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray87, (int) ' ', (int) (byte) 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4865");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray84, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.add(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4866");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, 0, 10);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) (short) 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4867");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray72, (int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test4868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4868");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        strassenMatrixMultiplication8.split(intArray16, intArray28, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = strassenMatrixMultiplication7.sub(intArray28, intArray84);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication1.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication0.join(intArray89, intArray92, 0, (int) (short) 0);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4869");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication18.split(intArray78, intArray81, (int) (short) -1, (int) (byte) 0);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication17.add(intArray81, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray81, intArray90);
        java.lang.Class<?> wildcardClass92 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test4870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4870");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray40);
        strassenMatrixMultiplication2.split(intArray8, intArray17, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray80, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray87, (int) (byte) 0, (int) (byte) -1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4871");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.add(intArray77, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4872");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray71, intArray72, (int) ' ', 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test4873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4873");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication18.split(intArray78, intArray81, (int) (short) -1, (int) (byte) 0);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication17.add(intArray81, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray81, intArray90);
        java.lang.Class<?> wildcardClass92 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test4874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4874");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray66, (int) (short) -1, (int) (byte) 100);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray76, (int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test4875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4875");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication18.split(intArray78, intArray81, (int) (short) -1, (int) (byte) 0);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication17.add(intArray81, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray81, intArray90);
        java.lang.Class<?> wildcardClass92 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test4876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4876");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray78, intArray81, (int) (short) 100, (int) (byte) 100);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray81, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
        java.lang.Class<?> wildcardClass92 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test4877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4877");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        strassenMatrixMultiplication6.split(intArray12, intArray72, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication0.join(intArray89, intArray92, (int) (short) 100, (int) '#');
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4878");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        strassenMatrixMultiplication8.split(intArray74, intArray77, 0, (int) (byte) 1);
        strassenMatrixMultiplication1.split(intArray7, intArray77, (int) '#', (int) (byte) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray89, intArray93);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray93, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4879");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray78, intArray81, (int) (short) 100, (int) (byte) 100);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray81, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
        java.lang.Class<?> wildcardClass92 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test4880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4880");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray83 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray69, intArray76, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray35, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.add(intArray14, intArray35);
        strassenMatrixMultiplication6.split(intArray7, intArray14, (int) (byte) 10, (int) '#');
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray14, intArray90, 0, (int) (byte) 1);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4881");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication79.add(intArray93, intArray94);
        strassenMatrixMultiplication0.split(intArray78, intArray93, (int) (short) 100, (int) '4');
        java.lang.Class<?> wildcardClass99 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test4882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4882");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray71, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray93, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4883");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4884");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        strassenMatrixMultiplication2.split(intArray10, intArray22, (int) 'a', (int) (byte) 1);
        int[][] intArray77 = null;
        strassenMatrixMultiplication1.join(intArray10, intArray77, (int) (byte) 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        strassenMatrixMultiplication1.join(intArray83, intArray87, (int) '4', (int) (short) 0);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication0.add(intArray83, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test4885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4885");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication26.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication6.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray88, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4886");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray80, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray14, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4887");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        int[][] intArray15 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray84 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray70, intArray77, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray36, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication9.add(intArray15, intArray36);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication8.sub(intArray15, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication7.join(intArray89, intArray90, (int) 'a', (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.multiply(intArray6, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4888");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray76, (int) (byte) 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray86, (int) '4', (int) (short) 0);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray90, intArray91, (int) (byte) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4889");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication3.sub(intArray11, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray55 = new int[][] { intArray42, intArray48, intArray54 };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray81 = new int[][] { intArray60, intArray65, intArray70, intArray75, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication36.multiply(intArray55, intArray81);
        int[][] intArray83 = strassenMatrixMultiplication24.add(intArray32, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication23.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication17.sub(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication3.sub(intArray85, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication2.sub(intArray89, intArray90);
        strassenMatrixMultiplication0.split(intArray1, intArray91, 0, (int) (byte) 100);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4890");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray21, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication0.sub(intArray3, intArray74);
        java.lang.Class<?> wildcardClass76 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test4891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4891");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray15, 10, 100);
        java.lang.Class<?> wildcardClass85 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test4892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4892");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray15, 10, 100);
        java.lang.Class<?> wildcardClass85 = intArray15.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test4893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4893");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = strassenMatrixMultiplication1.sub(intArray9, intArray89);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray9, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (byte) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4894");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication79.add(intArray93, intArray94);
        strassenMatrixMultiplication0.split(intArray78, intArray93, (int) (short) 100, (int) '4');
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test4895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4895");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.add(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication8.add(intArray82, intArray85);
        strassenMatrixMultiplication6.join(intArray7, intArray82, (int) (byte) 1, (int) (byte) 1);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray7, intArray90, (int) '#', (int) (short) 100);
        java.lang.Class<?> wildcardClass94 = intArray7.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test4896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4896");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.add(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication8.add(intArray82, intArray85);
        strassenMatrixMultiplication6.join(intArray7, intArray82, (int) (byte) 1, (int) (byte) 1);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray7, intArray90, (int) '#', (int) (short) 100);
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test4897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4897");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray54);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication17.sub(intArray31, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray31, intArray85);
        int[][] intArray87 = null;
        strassenMatrixMultiplication15.join(intArray31, intArray87, (int) (short) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray14, intArray87, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4898");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray77, 100, (int) (short) 0);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication89 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray90 = null;
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication89.split(intArray90, intArray91, (int) '4', (-1));
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication83.sub(intArray91, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication82.add(intArray96, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray81, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test4899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4899");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) (short) 10, (int) (short) 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, 0, (int) (short) 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4900");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (byte) 10, 1);
        java.lang.Class<?> wildcardClass73 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test4901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4901");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.add(intArray76, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray76, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test4902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4902");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication1.sub(intArray61, intArray62);
        int[][] intArray64 = null;
        int[][] intArray65 = strassenMatrixMultiplication0.add(intArray63, intArray64);
        int[][] intArray66 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray66, intArray69, (int) (short) 100, (int) '#');
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, (int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test4903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4903");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication16.add(intArray72, intArray76);
        strassenMatrixMultiplication14.split(intArray15, intArray72, (int) (short) 10, 10);
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray15, intArray81, (int) (short) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test4904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4904");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray78, intArray81, (int) (short) 100, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray6, intArray81, (int) (byte) 10, 1);
        int[][] intArray91 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication92 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray93 = null;
        int[][] intArray94 = new int[][] {};
        strassenMatrixMultiplication92.split(intArray93, intArray94, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.add(intArray91, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4905");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray21, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication0.sub(intArray3, intArray74);
        java.lang.Class<?> wildcardClass76 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test4906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4906");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (byte) 10, 1);
        java.lang.Class<?> wildcardClass73 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test4907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4907");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication1.add(intArray80, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray80, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.add(intArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4908");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray21, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication0.sub(intArray3, intArray74);
        java.lang.Class<?> wildcardClass76 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test4909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4909");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.add(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication8.add(intArray82, intArray85);
        strassenMatrixMultiplication6.join(intArray7, intArray82, (int) (byte) 1, (int) (byte) 1);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray7, intArray90, (int) '#', (int) (short) 100);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4910");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray70 = new int[] { (short) 0 };
        int[] intArray72 = new int[] { (short) 0 };
        int[][] intArray73 = new int[][] { intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication14.multiply(intArray20, intArray73);
        strassenMatrixMultiplication7.join(intArray10, intArray74, (int) (short) -1, (int) '#');
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray78, intArray81, (int) (short) 100, (int) (byte) 100);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray81, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
        java.lang.Class<?> wildcardClass92 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test4911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4911");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray15, intArray69);
        int[][] intArray71 = null;
        int[] intArray74 = new int[] { (short) 100, (short) 10 };
        int[] intArray77 = new int[] { (short) 100, (short) 10 };
        int[] intArray80 = new int[] { (short) 100, (short) 10 };
        int[] intArray83 = new int[] { (short) 100, (short) 10 };
        int[] intArray86 = new int[] { (short) 100, (short) 10 };
        int[][] intArray87 = new int[][] { intArray74, intArray77, intArray80, intArray83, intArray86 };
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray87, (int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4912");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (byte) -1, 1);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray87 = strassenMatrixMultiplication0.multiply(intArray85, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4913");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        int[][] intArray19 = null;
        int[][] intArray20 = strassenMatrixMultiplication7.sub(intArray15, intArray19);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication27.sub(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication7.sub(intArray89, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication6.sub(intArray93, intArray94);
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray96, (int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test4914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4914");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray16 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray17 = new int[][] { intArray11, intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.sub(intArray17, intArray64);
        int[] intArray69 = new int[] { 100, '#', 10 };
        int[][] intArray70 = new int[][] { intArray69 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray70, intArray73, (int) (short) 0, (int) (short) 0);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray80, (int) (byte) 0, (int) (short) -1);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.add(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test4915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4915");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.add(intArray79, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4916");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication73.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4917");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray70);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) 'a', (int) (byte) 1);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray75, intArray76, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test4918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4918");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        int[][] intArray92 = new int[][] {};
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4919");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray21, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication0.sub(intArray3, intArray74);
        java.lang.Class<?> wildcardClass76 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test4920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4920");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[] intArray54 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray69 = new int[][] { intArray54, intArray61, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray20, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray79, intArray85, (int) (byte) -1, 100);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (-1), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4921");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray63 = new int[] { 100, '#', 10 };
        int[][] intArray64 = new int[][] { intArray63 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray64, intArray67, (int) (short) 0, (int) (short) 0);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray74, intArray75, (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test4922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4922");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray82, intArray88);
        int[][] intArray90 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray90, intArray92, (-1), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4923");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray72, intArray76, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication7.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray6, intArray90, (int) (short) -1, 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (-1), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test4924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4924");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.add(intArray9, intArray61);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication63 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray64 = null;
        int[][] intArray65 = new int[][] {};
        strassenMatrixMultiplication63.split(intArray64, intArray65, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication63.sub(intArray71, intArray75);
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray75, intArray77, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test4925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4925");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray62 = new int[] { (short) 10, '#' };
        int[][] intArray63 = new int[][] { intArray62 };
        int[] intArray65 = new int[] { ' ' };
        int[] intArray67 = new int[] { ' ' };
        int[] intArray69 = new int[] { ' ' };
        int[] intArray71 = new int[] { ' ' };
        int[][] intArray72 = new int[][] { intArray65, intArray67, intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray63, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray74, intArray75, (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test4926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4926");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray88 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray89 = new int[][] { intArray76, intArray82, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication16.add(intArray70, intArray89);
        int[][] intArray91 = new int[][] {};
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication16.add(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication15.sub(intArray93, intArray94);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication14.sub(intArray95, intArray96);
        int[][] intArray98 = null;
        int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test4927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4927");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray71, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray81, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4928");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray74, 0, 0);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray78, intArray79, (int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test4929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4929");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray92, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4930");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication2.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.add(intArray80, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray80, intArray85, (int) (byte) 10, (int) 'a');
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4931");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.multiply(intArray14, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4932");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication58 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray59 = null;
        int[][] intArray60 = new int[][] {};
        strassenMatrixMultiplication58.split(intArray59, intArray60, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication58.sub(intArray66, intArray70);
        strassenMatrixMultiplication0.split(intArray57, intArray66, (int) 'a', 10);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray75, intArray76, (int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test4933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4933");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[][] intArray60 = null;
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray60, intArray61, (int) 'a', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test4934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4934");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication2.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.add(intArray80, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray80, intArray85, (int) (byte) 10, (int) 'a');
        java.lang.Class<?> wildcardClass89 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4935");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray63 = new int[] { 100, '#', 10 };
        int[][] intArray64 = new int[][] { intArray63 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray64, intArray67, (int) (short) 0, (int) (short) 0);
        int[] intArray78 = new int[] { (byte) -1, (short) -1, (byte) 10, (byte) 10 };
        int[][] intArray79 = new int[][] { intArray78 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication80.add(intArray94, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray79, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 10, 10]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4936");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray79, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) (byte) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test4937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4937");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray88, (int) ' ', 10);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4938");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray71, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test4939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4939");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        int[] intArray72 = new int[] { 'a', (short) 1 };
        int[] intArray75 = new int[] { 'a', (short) 1 };
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[] intArray84 = new int[] { 'a', (short) 1 };
        int[] intArray87 = new int[] { 'a', (short) 1 };
        int[][] intArray88 = new int[][] { intArray72, intArray75, intArray78, intArray81, intArray84, intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication8.add(intArray15, intArray88);
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray15, intArray90, (-1), (-1));
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray6, intArray90);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) ' ', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4940");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication73 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray74 = null;
        int[][] intArray75 = new int[][] {};
        strassenMatrixMultiplication73.split(intArray74, intArray75, (int) '4', (-1));
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.add(intArray75, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4941");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication14.sub(intArray74, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test4942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4942");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication54 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray55 = null;
        int[][] intArray56 = new int[][] {};
        strassenMatrixMultiplication54.split(intArray55, intArray56, (int) '4', (-1));
        int[][] intArray60 = null;
        int[][] intArray61 = strassenMatrixMultiplication0.add(intArray56, intArray60);
        int[][] intArray62 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication63 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication70.split(intArray71, intArray72, (int) '4', (-1));
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication64.sub(intArray72, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication63.add(intArray77, intArray78);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray62, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test4943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4943");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.add(intArray9, intArray61);
        int[][] intArray63 = null;
        int[][] intArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray63, intArray64, (int) (byte) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test4944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4944");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        strassenMatrixMultiplication0.join(intArray3, intArray67, (int) (short) -1, (int) '#');
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray72, (int) ' ', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test4945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4945");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray80, (int) (short) 100, (int) (short) 0);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) (short) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test4946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4946");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray90, intArray92, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4947");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[][] intArray48 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication49 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray50 = null;
        int[][] intArray51 = new int[][] {};
        strassenMatrixMultiplication49.split(intArray50, intArray51, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray48, intArray51, (int) (short) 0, 10);
        int[][] intArray58 = null;
        strassenMatrixMultiplication0.join(intArray51, intArray58, 10, (int) (short) 0);
        int[][] intArray62 = new int[][] {};
        int[][] intArray63 = null;
        strassenMatrixMultiplication0.join(intArray62, intArray63, 0, (int) (short) 10);
        int[][] intArray67 = null;
        int[][] intArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray67, intArray68, 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test4948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4948");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray71 = new int[] { (short) 0 };
        int[] intArray73 = new int[] { (short) 0 };
        int[][] intArray74 = new int[][] { intArray71, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication15.multiply(intArray21, intArray74);
        strassenMatrixMultiplication8.join(intArray11, intArray75, (int) (short) -1, (int) '#');
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication7.sub(intArray11, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication1.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        strassenMatrixMultiplication0.join(intArray80, intArray83, 0, (int) (byte) 0);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4949");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication8.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray68, intArray71);
        strassenMatrixMultiplication0.split(intArray1, intArray72, 100, (int) '4');
        int[][] intArray76 = null;
        int[] intArray79 = new int[] { (short) 0, 10 };
        int[][] intArray80 = new int[][] { intArray79 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.multiply(intArray76, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 10]");
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4950");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray10 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray11 = new int[][] { intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication6.sub(intArray11, intArray57);
        int[] intArray65 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray65, intArray71, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication5.add(intArray59, intArray78);
        int[][] intArray80 = new int[][] {};
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication5.add(intArray80, intArray81);
        strassenMatrixMultiplication3.split(intArray4, intArray82, (int) (short) 10, (int) (byte) 1);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray82, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray82, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication92 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray93 = null;
        int[][] intArray94 = new int[][] {};
        strassenMatrixMultiplication92.split(intArray93, intArray94, (int) '4', (-1));
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray93, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4951");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication80.add(intArray94, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray79, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4952");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.add(intArray64, intArray68);
        strassenMatrixMultiplication0.split(intArray1, intArray69, (int) (short) -1, (int) (byte) -1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray73, intArray74, 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test4953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4953");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        strassenMatrixMultiplication14.split(intArray20, intArray80, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray80, intArray86, (-1), (int) '#');
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray93, intArray94, (int) '4', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4954");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray66, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray83, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4955");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (int) 'a', 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication70.add(intArray84, intArray85);
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray85, intArray87, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4956");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray71, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication81.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication80.add(intArray94, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray79, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4957");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray78, intArray79, (int) '#', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test4958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4958");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (int) ' ', 100);
        int[][] intArray85 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.add(intArray85, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test4959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4959");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[][] intArray69 = strassenMatrixMultiplication0.sub(intArray14, intArray68);
        int[][] intArray70 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        strassenMatrixMultiplication0.split(intArray70, intArray84, (int) (byte) 0, (int) (byte) -1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray88, intArray89, (int) (short) 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4960");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray87, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) 'a', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4961");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication22.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray82, intArray85);
        strassenMatrixMultiplication14.split(intArray15, intArray86, 100, (int) '4');
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, 10, (int) (short) 10);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4962");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication1.add(intArray10, intArray62);
        int[][] intArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray62, intArray64, (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test4963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4963");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        strassenMatrixMultiplication7.split(intArray13, intArray73, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray2, intArray73, (int) 'a', (int) (byte) 100);
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray80, intArray81, (int) (short) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test4964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4964");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication8.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray70, intArray71);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray1, intArray71, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test4965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4965");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray14, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray68, intArray69, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test4966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4966");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = strassenMatrixMultiplication6.sub(intArray27, intArray83);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, (int) '#', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test4967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4967");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication6.add(intArray88, intArray93);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray93, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4968");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        int[][] intArray17 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray28 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray29 = new int[][] { intArray23, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.sub(intArray29, intArray76);
        int[] intArray81 = new int[] { 100, '#', 10 };
        int[][] intArray82 = new int[][] { intArray81 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        strassenMatrixMultiplication18.split(intArray82, intArray85, (int) (short) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.add(intArray17, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test4969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4969");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray9, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray87, intArray88, (int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test4970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4970");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        strassenMatrixMultiplication0.join(intArray3, intArray67, (int) (short) -1, (int) '#');
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 100, (int) (byte) 100);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) ' ', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test4971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4971");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        int[] intArray72 = new int[] { (short) 0 };
        int[] intArray74 = new int[] { (short) 0 };
        int[][] intArray75 = new int[][] { intArray72, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication16.multiply(intArray22, intArray75);
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[] intArray85 = new int[] { 'a', (short) 1 };
        int[] intArray88 = new int[] { 'a', (short) 1 };
        int[] intArray91 = new int[] { 'a', (short) 1 };
        int[] intArray94 = new int[] { 'a', (short) 1 };
        int[][] intArray95 = new int[][] { intArray79, intArray82, intArray85, intArray88, intArray91, intArray94 };
        int[][] intArray96 = strassenMatrixMultiplication15.add(intArray22, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray14, intArray95, (int) (short) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4972");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        strassenMatrixMultiplication6.split(intArray12, intArray72, (int) (short) -1, (int) (byte) 100);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray72, intArray76, (int) (byte) 100, 10);
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray80, intArray81, (int) (short) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test4973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4973");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[] intArray86 = new int[] {};
        int[] intArray87 = new int[] {};
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[][] intArray90 = new int[][] { intArray86, intArray87, intArray88, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication1.add(intArray82, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray82, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) 'a', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4974");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication78.sub(intArray86, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray92, 100, 1);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test4975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4975");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[] intArray7 = new int[] { (short) 10 };
        int[] intArray9 = new int[] { (short) 10 };
        int[][] intArray10 = new int[][] { intArray7, intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray81);
        strassenMatrixMultiplication11.split(intArray19, intArray31, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray10, intArray31, (int) (short) -1, (int) (byte) 0);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test4976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4976");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray5, intArray73);
        int[][] intArray75 = null;
        strassenMatrixMultiplication0.join(intArray5, intArray75, 0, (int) '4');
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray80, (int) (short) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test4977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4977");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray30 = new int[][] { intArray29 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication25.sub(intArray30, intArray76);
        int[] intArray80 = new int[] { (short) 0 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray80, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication24.multiply(intArray30, intArray83);
        strassenMatrixMultiplication17.join(intArray20, intArray84, (int) (short) -1, (int) '#');
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication16.sub(intArray20, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication15.join(intArray20, intArray90, 0, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.add(intArray14, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test4978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4978");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray72, intArray76, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication7.add(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication1.sub(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray90, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test4979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4979");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray83, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4980");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.add(intArray81, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.sub(intArray9, intArray81);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray85, (int) 'a', (int) '4');
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4981");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray59, intArray61, (int) (byte) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
    }

    @Test
    public void test4982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4982");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray65, intArray66, (int) '#', (int) ' ');
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray71, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
    }

    @Test
    public void test4983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4983");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        int[][] intArray18 = null;
        int[][] intArray19 = strassenMatrixMultiplication6.sub(intArray14, intArray18);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray36, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication20.join(intArray36, intArray92, (int) (short) 1, 0);
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray19, intArray92);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test4984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4984");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication71.add(intArray85, intArray86);
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray86, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test4985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4985");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray25, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication79.add(intArray93, intArray94);
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray94, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test4986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4986");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication77.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication76.add(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray90, intArray93);
        java.lang.Class<?> wildcardClass95 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4987");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray62 = strassenMatrixMultiplication0.add(intArray14, intArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
    }

    @Test
    public void test4988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4988");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray16 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray17 = new int[][] { intArray11, intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.sub(intArray17, intArray64);
        int[] intArray69 = new int[] { 100, '#', 10 };
        int[][] intArray70 = new int[][] { intArray69 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray70, intArray73, (int) (short) 0, (int) (short) 0);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray80, (int) (byte) 0, (int) (short) -1);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test4989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4989");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray81 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray67, intArray74, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray33, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.add(intArray12, intArray33);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 10, 10);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test4990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4990");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[][] intArray48 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication49 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray50 = null;
        int[][] intArray51 = new int[][] {};
        strassenMatrixMultiplication49.split(intArray50, intArray51, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray48, intArray51, (int) (short) 0, 10);
        int[][] intArray58 = null;
        strassenMatrixMultiplication0.join(intArray51, intArray58, 10, (int) (short) 0);
        int[][] intArray62 = null;
        int[][] intArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray62, intArray63, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
    }

    @Test
    public void test4991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4991");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        int[][] intArray15 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray84 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray70, intArray77, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray36, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication9.add(intArray15, intArray36);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication8.sub(intArray15, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication2.add(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication1.sub(intArray89, intArray92);
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray94, (int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4992");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication1.add(intArray74, intArray75);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray74, intArray77, (int) '#', (int) ' ');
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.add(intArray81, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test4993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4993");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray79, intArray80, 10, 100);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test4994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4994");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        int[][] intArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray7, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
    }

    @Test
    public void test4995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4995");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication77.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication76.add(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray90, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4996");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication77.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication76.add(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray90, intArray93);
        java.lang.Class<?> wildcardClass95 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4997");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray71, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test4998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4998");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication3.add(intArray84, intArray87);
        strassenMatrixMultiplication1.split(intArray2, intArray88, (int) (short) 0, 0);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) '4', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test4999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4999");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication1.add(intArray74, intArray75);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray74, intArray77, (int) '#', (int) ' ');
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test5000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test5000");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication53 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray54 = null;
        int[][] intArray55 = new int[][] {};
        strassenMatrixMultiplication53.split(intArray54, intArray55, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication59 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray60 = null;
        int[][] intArray61 = new int[][] {};
        strassenMatrixMultiplication59.split(intArray60, intArray61, (int) '4', (-1));
        int[][] intArray65 = null;
        int[][] intArray66 = strassenMatrixMultiplication53.sub(intArray61, intArray65);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray67 = strassenMatrixMultiplication0.multiply(intArray51, intArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray66);
    }
}


package StrassenMatrixMultiplication;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest12 {

    public static boolean debug = false;

    @Test
    public void test6001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6001");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray65, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray68, intArray69, (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test6002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6002");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray70);
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication6.add(intArray20, intArray72);
        int[][] intArray74 = null;
        strassenMatrixMultiplication0.join(intArray20, intArray74, 100, (int) (short) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.add(intArray79, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test6003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6003");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray29, intArray81);
        int[][] intArray83 = null;
        strassenMatrixMultiplication14.join(intArray82, intArray83, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication14.add(intArray89, intArray93);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray95, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6004");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[] intArray86 = new int[] {};
        int[] intArray87 = new int[] {};
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[][] intArray90 = new int[][] { intArray86, intArray87, intArray88, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication1.add(intArray82, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray82, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test6005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6005");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray22 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray23 = new int[][] { intArray17, intArray22 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.sub(intArray23, intArray70);
        int[] intArray75 = new int[] { 100, '#', 10 };
        int[][] intArray76 = new int[][] { intArray75 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        strassenMatrixMultiplication12.split(intArray76, intArray79, (int) (short) 0, (int) (short) 0);
        int[][] intArray86 = null;
        strassenMatrixMultiplication6.join(intArray79, intArray86, (int) (byte) 0, (int) (short) -1);
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray90, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test6006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6006");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        strassenMatrixMultiplication7.split(intArray13, intArray73, (int) (short) -1, (int) (byte) 100);
        strassenMatrixMultiplication0.split(intArray2, intArray73, (int) 'a', (int) (byte) 100);
        int[][] intArray80 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication82.sub(intArray90, intArray94);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication81.add(intArray95, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray80, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test6007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6007");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, (int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test6008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6008");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (byte) -1, 1);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray85, intArray86, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test6009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6009");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray80, (int) (short) 100, (int) (short) 0);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test6010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6010");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication69.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication68.add(intArray82, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 1, (int) (byte) 0);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test6011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6011");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray87, intArray91);
        strassenMatrixMultiplication0.split(intArray6, intArray87, (int) (short) -1, (-1));
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test6012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6012");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication68.sub(intArray76, intArray80);
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray76, intArray82, (int) (short) 10, (int) 'a');
        int[][] intArray86 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray89, (-1), (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test6013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6013");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray73, intArray74, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test6014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6014");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray66, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray71, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test6015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6015");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray68, intArray75, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray34, intArray83);
        int[][] intArray85 = strassenMatrixMultiplication7.add(intArray13, intArray34);
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray86, intArray87, 10, 100);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray87, 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test6016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6016");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray68 = new int[] { (short) 0 };
        int[] intArray70 = new int[] { (short) 0 };
        int[][] intArray71 = new int[][] { intArray68, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication12.multiply(intArray18, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray8, intArray71);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray74, intArray75, (int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test6017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6017");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = strassenMatrixMultiplication1.sub(intArray9, intArray89);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray9, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (byte) 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test6018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6018");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, 0, 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray86, intArray90);
        java.lang.Class<?> wildcardClass92 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test6019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6019");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        int[][] intArray73 = null;
        strassenMatrixMultiplication7.join(intArray72, intArray73, (int) '#', (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.multiply(intArray6, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test6020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6020");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, 0, 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray86, intArray90);
        java.lang.Class<?> wildcardClass92 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test6021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6021");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        int[][] intArray72 = null;
        strassenMatrixMultiplication0.join(intArray16, intArray72, (int) (short) 1, 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test6022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6022");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication6.sub(intArray66, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray71, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray71, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray92, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (short) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6023");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication8.sub(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.sub(intArray68, intArray71);
        strassenMatrixMultiplication0.split(intArray1, intArray72, 100, (int) '4');
        int[][] intArray76 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray79, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test6024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6024");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        strassenMatrixMultiplication0.split(intArray79, intArray88, 0, (int) (byte) 10);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test6025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6025");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) 'a', (int) (byte) 1);
        int[][] intArray81 = null;
        strassenMatrixMultiplication0.join(intArray14, intArray81, 1, (int) '#');
        java.lang.Class<?> wildcardClass85 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test6026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6026");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray65, intArray66, (int) '#', (int) ' ');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication70.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test6027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6027");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[] intArray60 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray60, intArray67, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray26, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication77.sub(intArray85, intArray89);
        int[][] intArray91 = null;
        strassenMatrixMultiplication6.join(intArray85, intArray91, (int) (byte) -1, 100);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray85, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test6028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6028");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (byte) -1, 1);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray87 = strassenMatrixMultiplication0.sub(intArray85, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test6029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6029");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[] intArray64 = new int[] { 100, '#', 10 };
        int[][] intArray65 = new int[][] { intArray64 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication66 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray67 = null;
        int[][] intArray68 = new int[][] {};
        strassenMatrixMultiplication66.split(intArray67, intArray68, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray65, intArray68, (int) (short) 0, (int) (short) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication75.add(intArray89, intArray90);
        strassenMatrixMultiplication0.split(intArray68, intArray91, (int) (byte) 10, (int) 'a');
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test6030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6030");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication17.sub(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray77, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication82.sub(intArray90, intArray94);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication0.add(intArray90, intArray96);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test6031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6031");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication17.sub(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray77, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication82.sub(intArray90, intArray94);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication0.add(intArray90, intArray96);
        java.lang.Class<?> wildcardClass98 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test6032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6032");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray5, 0, 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray86, intArray90);
        java.lang.Class<?> wildcardClass92 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test6033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6033");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray65, intArray66, (int) '#', (int) ' ');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication70.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test6034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6034");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray76, (int) (byte) 0, (int) '#');
        int[][] intArray80 = null;
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray80, intArray81, (int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test6035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6035");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        int[][] intArray15 = strassenMatrixMultiplication2.sub(intArray10, intArray14);
        int[][] intArray16 = null;
        int[][] intArray17 = strassenMatrixMultiplication1.add(intArray15, intArray16);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication18.add(intArray27, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication1.add(intArray27, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray27, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray87 = strassenMatrixMultiplication0.multiply(intArray85, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test6036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6036");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray65, intArray66, (int) '#', (int) ' ');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication70.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test6037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6037");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (short) -1, 10);
        int[] intArray87 = new int[] { (short) 100, (byte) 10 };
        int[] intArray90 = new int[] { (short) 100, (byte) 10 };
        int[] intArray93 = new int[] { (short) 100, (byte) 10 };
        int[][] intArray94 = new int[][] { intArray87, intArray90, intArray93 };
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6038");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication17.sub(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray77, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication82.sub(intArray90, intArray94);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication0.add(intArray90, intArray96);
        java.lang.Class<?> wildcardClass98 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test6039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6039");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[][] intArray48 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication49 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray50 = null;
        int[][] intArray51 = new int[][] {};
        strassenMatrixMultiplication49.split(intArray50, intArray51, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray48, intArray51, (int) (short) 0, 10);
        int[][] intArray58 = null;
        strassenMatrixMultiplication0.join(intArray51, intArray58, 10, (int) (short) 0);
        int[][] intArray62 = null;
        int[][] intArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray62, intArray63, 1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
    }

    @Test
    public void test6040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6040");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication1.split(intArray7, intArray87, (int) '#', 0);
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray7, intArray94, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test6041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6041");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication16.add(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication15.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication9.add(intArray83, intArray86);
        strassenMatrixMultiplication7.join(intArray8, intArray83, (int) (byte) 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray6, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test6042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6042");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray27 = new int[][] { intArray26 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication22.sub(intArray27, intArray73);
        int[] intArray77 = new int[] { (short) 0 };
        int[] intArray79 = new int[] { (short) 0 };
        int[][] intArray80 = new int[][] { intArray77, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication21.multiply(intArray27, intArray80);
        strassenMatrixMultiplication14.join(intArray17, intArray81, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication12.split(intArray13, intArray17, (int) '#', (int) (byte) 1);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = strassenMatrixMultiplication6.add(intArray17, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray17, intArray90, (int) '#', 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) (byte) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test6043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6043");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication54 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray55 = null;
        int[][] intArray56 = new int[][] {};
        strassenMatrixMultiplication54.split(intArray55, intArray56, (int) '4', (-1));
        int[][] intArray60 = null;
        int[][] intArray61 = strassenMatrixMultiplication0.add(intArray56, intArray60);
        int[] intArray65 = new int[] { (byte) 0, (short) 1, (byte) 100 };
        int[] intArray69 = new int[] { (byte) 0, (short) 1, (byte) 100 };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray70, intArray71, (int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test6044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6044");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        int[][] intArray30 = null;
        int[][] intArray31 = strassenMatrixMultiplication18.sub(intArray26, intArray30);
        int[][] intArray32 = null;
        int[][] intArray33 = strassenMatrixMultiplication17.add(intArray31, intArray32);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        strassenMatrixMultiplication34.split(intArray81, intArray84, (int) (short) 0, 10);
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray31, intArray84);
        java.lang.Class<?> wildcardClass92 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test6045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6045");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray16 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray17 = new int[][] { intArray11, intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.sub(intArray17, intArray64);
        int[] intArray69 = new int[] { 100, '#', 10 };
        int[][] intArray70 = new int[][] { intArray69 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray70, intArray73, (int) (short) 0, (int) (short) 0);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray73, intArray80, (int) (byte) 0, (int) (short) -1);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test6046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6046");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        int[][] intArray22 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray84 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray91 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray92 = new int[][] { intArray77, intArray84, intArray91 };
        int[][] intArray93 = strassenMatrixMultiplication23.sub(intArray43, intArray92);
        int[][] intArray94 = strassenMatrixMultiplication16.add(intArray22, intArray43);
        strassenMatrixMultiplication14.split(intArray15, intArray22, (int) (byte) 10, (int) '#');
        int[][] intArray98 = null;
        int[][] intArray99 = strassenMatrixMultiplication0.add(intArray22, intArray98);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test6047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6047");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = new int[][] {};
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray71, intArray72);
        int[][] intArray74 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication75.add(intArray89, intArray90);
        strassenMatrixMultiplication0.split(intArray74, intArray89, (int) (short) -1, (int) (byte) -1);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) (byte) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test6048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6048");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        strassenMatrixMultiplication8.split(intArray16, intArray28, (int) 'a', (int) (byte) 1);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.add(intArray16, intArray83);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.add(intArray1, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test6049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6049");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        int[][] intArray15 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray84 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray70, intArray77, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray36, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication9.add(intArray15, intArray36);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication8.sub(intArray15, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication2.sub(intArray15, intArray90);
        strassenMatrixMultiplication0.split(intArray1, intArray91, 0, 0);
        java.lang.Class<?> wildcardClass95 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test6050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6050");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        int[][] intArray30 = null;
        int[][] intArray31 = strassenMatrixMultiplication18.sub(intArray26, intArray30);
        int[][] intArray32 = null;
        int[][] intArray33 = strassenMatrixMultiplication17.add(intArray31, intArray32);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        strassenMatrixMultiplication34.split(intArray81, intArray84, (int) (short) 0, 10);
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray31, intArray84);
        java.lang.Class<?> wildcardClass92 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test6051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6051");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication3.add(intArray11, intArray61);
        int[][] intArray63 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication64 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray65 = null;
        int[][] intArray66 = new int[][] {};
        strassenMatrixMultiplication64.split(intArray65, intArray66, (int) '4', (-1));
        strassenMatrixMultiplication3.split(intArray63, intArray66, (int) (short) -1, (int) (byte) 0);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication2.add(intArray66, intArray73);
        int[][] intArray75 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray75, intArray78, 0, (int) 'a');
        strassenMatrixMultiplication0.split(intArray1, intArray78, (-1), (int) (short) 1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.sub(intArray88, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test6052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6052");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        int[][] intArray15 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray84 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray70, intArray77, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication16.sub(intArray36, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication9.add(intArray15, intArray36);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication8.sub(intArray15, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication2.sub(intArray15, intArray90);
        strassenMatrixMultiplication0.split(intArray1, intArray91, 0, 0);
        java.lang.Class<?> wildcardClass95 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test6053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6053");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray73, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray80, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test6054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6054");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication13.add(intArray27, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication6.sub(intArray9, intArray80);
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test6055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6055");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray67, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.add(intArray67, intArray70);
        int[][] intArray72 = null;
        strassenMatrixMultiplication0.join(intArray67, intArray72, (int) (short) 1, (int) (short) 100);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test6056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6056");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray73, intArray74, (int) (short) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test6057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6057");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray9, intArray85);
        int[][] intArray87 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray87, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test6058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6058");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray22 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray23 = new int[][] { intArray17, intArray22 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.sub(intArray23, intArray70);
        int[] intArray75 = new int[] { 100, '#', 10 };
        int[][] intArray76 = new int[][] { intArray75 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        strassenMatrixMultiplication12.split(intArray76, intArray79, (int) (short) 0, (int) (short) 0);
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray8, intArray76);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.multiply(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test6059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6059");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = new int[][] {};
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray71, intArray72);
        int[][] intArray74 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication75.add(intArray89, intArray90);
        strassenMatrixMultiplication0.split(intArray74, intArray89, (int) (short) -1, (int) (byte) -1);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test6060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6060");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        int[][] intArray30 = null;
        int[][] intArray31 = strassenMatrixMultiplication18.sub(intArray26, intArray30);
        int[][] intArray32 = null;
        int[][] intArray33 = strassenMatrixMultiplication17.add(intArray31, intArray32);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        strassenMatrixMultiplication34.split(intArray81, intArray84, (int) (short) 0, 10);
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray31, intArray84);
        java.lang.Class<?> wildcardClass92 = intArray31.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test6061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6061");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        strassenMatrixMultiplication6.split(intArray12, intArray72, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray89, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test6062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6062");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        int[][] intArray68 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.add(intArray68, intArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test6063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6063");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication1.sub(intArray8, intArray81);
        int[][] intArray83 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray83, (int) 'a', (int) ' ');
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray87, intArray88, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test6064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6064");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        int[][] intArray92 = new int[][] {};
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test6065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6065");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        int[][] intArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray57, intArray58, (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
    }

    @Test
    public void test6066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6066");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray78, intArray79, (int) '4', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test6067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6067");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        strassenMatrixMultiplication0.join(intArray22, intArray74, (int) (byte) 10, 1);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray78, intArray79, (int) (byte) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test6068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6068");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication68.sub(intArray76, intArray80);
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray76, intArray82, (int) (short) 10, (int) 'a');
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test6069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6069");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication20.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray85, (int) (byte) 0, (-1));
        int[][] intArray89 = null;
        int[] intArray90 = new int[] {};
        int[] intArray91 = new int[] {};
        int[] intArray92 = new int[] {};
        int[] intArray93 = new int[] {};
        int[][] intArray94 = new int[][] { intArray90, intArray91, intArray92, intArray93 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.multiply(intArray89, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6070");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        int[][] intArray30 = null;
        int[][] intArray31 = strassenMatrixMultiplication18.sub(intArray26, intArray30);
        int[][] intArray32 = null;
        int[][] intArray33 = strassenMatrixMultiplication17.add(intArray31, intArray32);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        strassenMatrixMultiplication34.split(intArray81, intArray84, (int) (short) 0, 10);
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray31, intArray84);
        java.lang.Class<?> wildcardClass92 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test6071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6071");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        int[][] intArray62 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication63 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray64 = null;
        int[][] intArray65 = new int[][] {};
        strassenMatrixMultiplication63.split(intArray64, intArray65, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray62, intArray65, (int) (short) -1, (int) (byte) 0);
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication1.add(intArray65, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray65, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, (int) ' ', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test6072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6072");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication1.sub(intArray61, intArray62);
        int[][] intArray64 = null;
        int[][] intArray65 = strassenMatrixMultiplication0.add(intArray63, intArray64);
        int[][] intArray66 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray66, intArray69, (int) (short) 100, (int) '#');
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test6073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6073");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication2.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray85, intArray88, (int) ' ', (int) 'a');
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray88, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test6074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6074");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray49 = null;
        int[][] intArray50 = new int[][] {};
        strassenMatrixMultiplication48.split(intArray49, intArray50, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray47, intArray50, (int) (short) 0, 10);
        int[][] intArray57 = null;
        int[][] intArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray57, intArray58, (int) (byte) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
    }

    @Test
    public void test6075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6075");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.add(intArray89, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.sub(intArray17, intArray89);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray17, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6076");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        int[][] intArray30 = null;
        int[][] intArray31 = strassenMatrixMultiplication18.sub(intArray26, intArray30);
        int[][] intArray32 = null;
        int[][] intArray33 = strassenMatrixMultiplication17.add(intArray31, intArray32);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        strassenMatrixMultiplication34.split(intArray81, intArray84, (int) (short) 0, 10);
        int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray31, intArray84);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, (int) '#', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test6077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6077");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray85, (int) (byte) 100, 100);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test6078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6078");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[] intArray81 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray82 = new int[][] { intArray81 };
        int[] intArray84 = new int[] { (short) 0 };
        int[][] intArray85 = new int[][] { intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication2.sub(intArray82, intArray85);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray86, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test6079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6079");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        int[][] intArray17 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication18.add(intArray80, intArray84);
        int[][] intArray86 = new int[][] {};
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication18.sub(intArray86, intArray87);
        strassenMatrixMultiplication0.split(intArray17, intArray86, (int) ' ', (int) ' ');
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray92, intArray93, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test6080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6080");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray79, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test6081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6081");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray53 = new int[][] { intArray40, intArray46, intArray52 };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray79 = new int[][] { intArray58, intArray63, intArray68, intArray73, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication34.multiply(intArray53, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication22.add(intArray30, intArray80);
        strassenMatrixMultiplication10.split(intArray18, intArray30, (int) 'a', (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.sub(intArray18, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication3.sub(intArray86, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication2.add(intArray86, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray1, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test6082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6082");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray21, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test6083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6083");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray81 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray67, intArray74, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray33, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.add(intArray12, intArray33);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 10, 10);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test6084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6084");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray76, (int) (byte) 0, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray86, (int) '4', (int) (short) 0);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray92 = strassenMatrixMultiplication0.add(intArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test6085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6085");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.add(intArray69, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray74, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray87, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6086");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.add(intArray81, intArray82);
        strassenMatrixMultiplication6.split(intArray12, intArray81, (int) (short) 10, 10);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray81, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test6087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6087");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        int[][] intArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray47, intArray48, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
    }

    @Test
    public void test6088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6088");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray81, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test6089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6089");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray60 = new int[] { (short) 0 };
        int[] intArray62 = new int[] { (short) 0 };
        int[][] intArray63 = new int[][] { intArray60, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication4.multiply(intArray10, intArray63);
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[][] intArray83 = new int[][] { intArray67, intArray70, intArray73, intArray76, intArray79, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication3.add(intArray10, intArray83);
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray10, intArray85, (-1), (-1));
        strassenMatrixMultiplication0.split(intArray1, intArray85, (int) (byte) 100, (int) (short) 1);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, (int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test6090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6090");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray48);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication11.sub(intArray25, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication10.add(intArray78, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.sub(intArray6, intArray78);
        strassenMatrixMultiplication1.split(intArray2, intArray6, 0, 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication1.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        strassenMatrixMultiplication0.join(intArray92, intArray93, (int) '4', (int) (byte) -1);
        java.lang.Class<?> wildcardClass97 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test6091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6091");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray48);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication11.sub(intArray25, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication10.add(intArray78, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.sub(intArray6, intArray78);
        strassenMatrixMultiplication1.split(intArray2, intArray6, 0, 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication1.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        strassenMatrixMultiplication0.join(intArray92, intArray93, (int) '4', (int) (byte) -1);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test6092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6092");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication2.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray85, intArray88, (int) ' ', (int) 'a');
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray88, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test6093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6093");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = new int[][] {};
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        int[][] intArray72 = new int[][] {};
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication1.sub(intArray72, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication0.sub(intArray74, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray77, intArray78, (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test6094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6094");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication17.split(intArray77, intArray80, (int) (short) -1, (int) (byte) 0);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication16.add(intArray80, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication15.add(intArray80, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray14, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test6095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6095");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication0.add(intArray64, intArray71);
        int[][] intArray73 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray73, intArray76, 0, (int) 'a');
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray83, intArray84, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test6096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6096");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        strassenMatrixMultiplication6.split(intArray12, intArray72, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray89, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test6097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6097");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = new int[][] {};
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray74, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.multiply(intArray82, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test6098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6098");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.add(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray82, intArray85);
        java.lang.Class<?> wildcardClass87 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test6099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6099");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[] intArray54 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray69 = new int[][] { intArray54, intArray61, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray20, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray79, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.multiply(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test6100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6100");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray55 = new int[][] { intArray42, intArray48, intArray54 };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray81 = new int[][] { intArray60, intArray65, intArray70, intArray75, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication36.multiply(intArray55, intArray81);
        int[][] intArray83 = strassenMatrixMultiplication24.add(intArray32, intArray82);
        strassenMatrixMultiplication12.split(intArray20, intArray32, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) (short) 0, 10);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray90, intArray91, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test6101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6101");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = new int[][] {};
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.add(intArray75, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray78, intArray79, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test6102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6102");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.add(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray82, intArray85);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test6103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6103");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        int[][] intArray15 = strassenMatrixMultiplication2.sub(intArray10, intArray14);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[][] intArray70 = strassenMatrixMultiplication1.sub(intArray15, intArray69);
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray69, intArray71, 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test6104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6104");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray65, intArray66, (int) '#', (int) ' ');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication70.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test6105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6105");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        strassenMatrixMultiplication0.split(intArray6, intArray75, (int) (short) 10, 10);
        int[][] intArray81 = null;
        int[] intArray83 = new int[] { (short) 10 };
        int[] intArray85 = new int[] { (short) 10 };
        int[] intArray87 = new int[] { (short) 10 };
        int[][] intArray88 = new int[][] { intArray83, intArray85, intArray87 };
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray81, intArray88, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10]");
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test6106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6106");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication14.split(intArray61, intArray64, (int) (short) 0, 10);
        int[][] intArray71 = null;
        strassenMatrixMultiplication0.join(intArray64, intArray71, (int) (short) 10, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray83, intArray84, (int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test6107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6107");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray87, intArray91);
        strassenMatrixMultiplication0.split(intArray6, intArray87, (int) (short) -1, (-1));
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test6108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6108");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        strassenMatrixMultiplication9.split(intArray17, intArray29, (int) 'a', (int) (byte) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.sub(intArray17, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray85, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray89, intArray90, (int) (byte) -1, (int) (byte) -1);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test6109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6109");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.add(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray82, intArray85);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test6110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6110");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication2.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray85, intArray88, (int) ' ', (int) 'a');
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray88, intArray95);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test6111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6111");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.add(intArray64, intArray68);
        strassenMatrixMultiplication0.split(intArray1, intArray69, (int) (short) -1, (int) (byte) -1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.add(intArray73, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test6112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6112");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray73, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray73);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.add(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test6113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6113");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        strassenMatrixMultiplication18.split(intArray78, intArray81, (int) (short) -1, (int) (byte) 0);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication17.add(intArray81, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication0.add(intArray81, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.add(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test6114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6114");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication13.sub(intArray73, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray73, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray77, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray82, intArray83, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test6115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6115");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        int[][] intArray54 = null;
        int[][] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray54, intArray55, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
    }

    @Test
    public void test6116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6116");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray80, (int) (short) 100, (int) (short) 0);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test6117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6117");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray70);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) 'a', (int) (byte) 1);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray75, intArray76, 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test6118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6118");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication2.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray85, intArray88, (int) ' ', (int) 'a');
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray88, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test6119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6119");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray73, intArray74, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test6120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6120");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray83 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray69, intArray76, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication15.sub(intArray35, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication8.add(intArray14, intArray35);
        strassenMatrixMultiplication6.split(intArray7, intArray14, (int) (byte) 10, (int) '#');
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray14, intArray90, 0, (int) (byte) 1);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) '#', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test6121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6121");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        int[][] intArray76 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        strassenMatrixMultiplication16.split(intArray76, intArray79, (int) (short) -1, (int) (byte) 0);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication15.add(intArray79, intArray86);
        strassenMatrixMultiplication0.split(intArray14, intArray79, 1, (int) (short) -1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test6122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6122");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray66, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray71, intArray72, 100, 0);
        java.lang.Class<?> wildcardClass76 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test6123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6123");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray56 = new int[] { (short) 0 };
        int[] intArray58 = new int[] { (short) 0 };
        int[][] intArray59 = new int[][] { intArray56, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication0.multiply(intArray6, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray61, intArray62, (int) ' ', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
    }

    @Test
    public void test6124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6124");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        int[][] intArray17 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray33 = null;
        int[][] intArray34 = new int[][] {};
        strassenMatrixMultiplication32.split(intArray33, intArray34, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication38 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray39 = null;
        int[][] intArray40 = new int[][] {};
        strassenMatrixMultiplication38.split(intArray39, intArray40, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication44 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray62 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray63 = new int[][] { intArray50, intArray56, intArray62 };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray88 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray89 = new int[][] { intArray68, intArray73, intArray78, intArray83, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication44.multiply(intArray63, intArray89);
        int[][] intArray91 = strassenMatrixMultiplication32.add(intArray40, intArray90);
        strassenMatrixMultiplication20.split(intArray28, intArray40, (int) 'a', (int) (byte) 1);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication19.sub(intArray40, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication18.sub(intArray40, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray17, intArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test6125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6125");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = new int[][] {};
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.add(intArray75, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray78, intArray79, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test6126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6126");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray83, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray1, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test6127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6127");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.sub(intArray23, intArray77);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        strassenMatrixMultiplication8.join(intArray81, intArray85, 100, (int) (short) 0);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication2.add(intArray81, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray1, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test6128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6128");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        strassenMatrixMultiplication8.split(intArray14, intArray74, (int) (short) -1, (int) (byte) 100);
        int[][] intArray78 = null;
        strassenMatrixMultiplication2.join(intArray74, intArray78, (int) (byte) 100, 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication82.sub(intArray90, intArray94);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication2.add(intArray90, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray1, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test6129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6129");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray79, intArray82);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication91 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray92 = null;
        int[][] intArray93 = new int[][] {};
        strassenMatrixMultiplication91.split(intArray92, intArray93, (int) '4', (-1));
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication85.sub(intArray93, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray84, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test6130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6130");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication17.add(intArray26, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray26, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.multiply(intArray82, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test6131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6131");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray66, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (byte) 10, 1);
        int[][] intArray73 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication81 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray82 = null;
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication81.split(intArray82, intArray83, (int) '4', (-1));
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication75.sub(intArray83, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication74.add(intArray88, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray73, intArray89, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test6132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6132");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray16, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        int[][] intArray78 = null;
        strassenMatrixMultiplication1.join(intArray74, intArray78, 100, (int) (short) 0);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray74, intArray82);
        int[][] intArray84 = null;
        int[] intArray88 = new int[] { (byte) 1, (byte) 100, (short) 1 };
        int[] intArray92 = new int[] { (byte) 1, (byte) 100, (short) 1 };
        int[][] intArray93 = new int[][] { intArray88, intArray92 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray84, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 100, 1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 100, 1]");
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test6133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6133");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) 1, (int) (short) 1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray73, intArray74, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test6134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6134");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray66, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray71, intArray72, 100, 0);
        java.lang.Class<?> wildcardClass76 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test6135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6135");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray82 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray89 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray90 = new int[][] { intArray75, intArray82, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication21.sub(intArray41, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.add(intArray20, intArray41);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray20, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, 1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6136");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray31 = new int[][] { intArray30 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication26.sub(intArray31, intArray77);
        int[] intArray81 = new int[] { (short) 0 };
        int[] intArray83 = new int[] { (short) 0 };
        int[][] intArray84 = new int[][] { intArray81, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication25.multiply(intArray31, intArray84);
        strassenMatrixMultiplication18.join(intArray21, intArray85, (int) (short) -1, (int) '#');
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication17.sub(intArray21, intArray89);
        int[][] intArray91 = null;
        strassenMatrixMultiplication0.join(intArray90, intArray91, (int) (short) -1, 100);
        java.lang.Class<?> wildcardClass95 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test6137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6137");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        int[][] intArray62 = null;
        int[][] intArray63 = strassenMatrixMultiplication1.sub(intArray61, intArray62);
        int[][] intArray64 = null;
        int[][] intArray65 = strassenMatrixMultiplication0.add(intArray63, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray66, intArray67, (-1), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
    }

    @Test
    public void test6138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6138");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        strassenMatrixMultiplication15.split(intArray16, intArray73, (int) (short) 10, 10);
        strassenMatrixMultiplication0.split(intArray14, intArray73, (int) (byte) -1, 1);
        int[][] intArray85 = null;
        int[] intArray90 = new int[] { (-1), (byte) 0, '#', 'a' };
        int[][] intArray91 = new int[][] { intArray90 };
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray91, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0, 35, 97]");
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test6139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6139");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        strassenMatrixMultiplication0.join(intArray62, intArray66, (int) ' ', (int) (byte) 1);
        int[][] intArray70 = null;
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray70, intArray71, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test6140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6140");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication74.sub(intArray82, intArray86);
        strassenMatrixMultiplication0.split(intArray69, intArray82, (int) (short) 10, (int) '4');
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) '#', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test6141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6141");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray65, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication69.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication68.add(intArray82, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 1, (int) (byte) 0);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test6142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6142");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray29 = null;
        int[][] intArray30 = new int[][] {};
        strassenMatrixMultiplication28.split(intArray29, intArray30, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication34 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray35 = null;
        int[][] intArray36 = new int[][] {};
        strassenMatrixMultiplication34.split(intArray35, intArray36, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication40 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray52 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray58 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray59 = new int[][] { intArray46, intArray52, intArray58 };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray85 = new int[][] { intArray64, intArray69, intArray74, intArray79, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication40.multiply(intArray59, intArray85);
        int[][] intArray87 = strassenMatrixMultiplication28.add(intArray36, intArray59);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication22.sub(intArray36, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication21.add(intArray89, intArray90);
        int[][] intArray92 = strassenMatrixMultiplication14.sub(intArray17, intArray89);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.add(intArray17, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (byte) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6143");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray10 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray11 = new int[][] { intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication6.sub(intArray11, intArray57);
        int[] intArray65 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray65, intArray71, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication5.add(intArray59, intArray78);
        int[][] intArray80 = new int[][] {};
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication5.add(intArray80, intArray81);
        strassenMatrixMultiplication3.split(intArray4, intArray82, (int) (short) 10, (int) (byte) 1);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray82, intArray86);
        int[][] intArray88 = null;
        strassenMatrixMultiplication1.join(intArray87, intArray88, (int) (byte) 10, (int) (short) -1);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray87, intArray92);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test6144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6144");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray37 = null;
        int[][] intArray38 = new int[][] {};
        strassenMatrixMultiplication36.split(intArray37, intArray38, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication42 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray60 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray61 = new int[][] { intArray48, intArray54, intArray60 };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray86 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray87 = new int[][] { intArray66, intArray71, intArray76, intArray81, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication42.multiply(intArray61, intArray87);
        int[][] intArray89 = strassenMatrixMultiplication30.add(intArray38, intArray61);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication24.sub(intArray38, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication23.add(intArray91, intArray92);
        int[][] intArray94 = strassenMatrixMultiplication16.sub(intArray19, intArray91);
        strassenMatrixMultiplication14.split(intArray15, intArray94, (-1), (int) (short) 1);
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray15, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6145");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication17.add(intArray73, intArray77);
        int[][] intArray79 = null;
        strassenMatrixMultiplication0.join(intArray78, intArray79, 100, (int) 'a');
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.multiply(intArray83, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test6146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6146");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        int[] intArray72 = new int[] { 'a', (short) 1 };
        int[] intArray75 = new int[] { 'a', (short) 1 };
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[] intArray84 = new int[] { 'a', (short) 1 };
        int[] intArray87 = new int[] { 'a', (short) 1 };
        int[][] intArray88 = new int[][] { intArray72, intArray75, intArray78, intArray81, intArray84, intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication8.add(intArray15, intArray88);
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray15, intArray90, (-1), (-1));
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray6, intArray90);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (short) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6147");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        int[][] intArray68 = new int[][] {};
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
        int[][] intArray71 = new int[][] {};
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray71, intArray72);
        int[][] intArray74 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication75.add(intArray89, intArray90);
        strassenMatrixMultiplication0.split(intArray74, intArray89, (int) (short) -1, (int) (byte) -1);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test6148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6148");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray83, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test6149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6149");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        strassenMatrixMultiplication6.join(intArray9, intArray73, (int) (short) -1, (int) '#');
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray9, intArray77);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray79, intArray82, 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test6150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6150");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray88, (int) ' ', 10);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray92, intArray93, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test6151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6151");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        strassenMatrixMultiplication8.split(intArray16, intArray28, (int) 'a', (int) (byte) 1);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.sub(intArray16, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test6152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6152");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray66, intArray70, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.add(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, (int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test6153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6153");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray35 = new int[][] { intArray34 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray55 = new int[][] { intArray42, intArray48, intArray54 };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray81 = new int[][] { intArray60, intArray65, intArray70, intArray75, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication36.multiply(intArray55, intArray81);
        int[][] intArray83 = strassenMatrixMultiplication30.sub(intArray35, intArray81);
        int[] intArray85 = new int[] { (short) 0 };
        int[] intArray87 = new int[] { (short) 0 };
        int[][] intArray88 = new int[][] { intArray85, intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication29.multiply(intArray35, intArray88);
        strassenMatrixMultiplication22.join(intArray25, intArray89, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication20.split(intArray21, intArray25, (int) '#', (int) (byte) 1);
        int[][] intArray96 = new int[][] {};
        int[][] intArray97 = strassenMatrixMultiplication14.add(intArray25, intArray96);
        int[][] intArray98 = null;
        int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test6154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6154");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray31 = new int[][] { intArray30 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication26.sub(intArray31, intArray77);
        int[] intArray81 = new int[] { (short) 0 };
        int[] intArray83 = new int[] { (short) 0 };
        int[][] intArray84 = new int[][] { intArray81, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication25.multiply(intArray31, intArray84);
        strassenMatrixMultiplication18.join(intArray21, intArray85, (int) (short) -1, (int) '#');
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication17.sub(intArray21, intArray89);
        int[][] intArray91 = null;
        strassenMatrixMultiplication0.join(intArray90, intArray91, (int) (short) -1, 100);
        java.lang.Class<?> wildcardClass95 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test6155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6155");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray63 = new int[] { 100, '#', 10 };
        int[][] intArray64 = new int[][] { intArray63 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray64, intArray67, (int) (short) 0, (int) (short) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray76, intArray80);
        java.lang.Class<?> wildcardClass82 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test6156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6156");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray48);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication11.sub(intArray25, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication10.add(intArray78, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.sub(intArray6, intArray78);
        strassenMatrixMultiplication1.split(intArray2, intArray6, 0, 10);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication1.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        strassenMatrixMultiplication0.join(intArray92, intArray93, (int) '4', (int) (byte) -1);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test6157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6157");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication2.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray85, intArray88, (int) ' ', (int) 'a');
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray88, intArray95);
        int[][] intArray97 = null;
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test6158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6158");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray54 = strassenMatrixMultiplication0.multiply(intArray25, intArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
    }

    @Test
    public void test6159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6159");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray40);
        strassenMatrixMultiplication2.split(intArray8, intArray68, (int) (short) 10, 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray85, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray85, (-1), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test6160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6160");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray10 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray11 = new int[][] { intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication6.sub(intArray11, intArray57);
        int[] intArray65 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray65, intArray71, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication5.add(intArray59, intArray78);
        int[][] intArray80 = new int[][] {};
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication5.add(intArray80, intArray81);
        strassenMatrixMultiplication3.split(intArray4, intArray82, (int) (short) 10, (int) (byte) 1);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray82, intArray86);
        int[][] intArray88 = null;
        strassenMatrixMultiplication1.join(intArray87, intArray88, (int) (byte) 10, (int) (short) -1);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray87, intArray92);
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test6161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6161");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication14.split(intArray61, intArray64, (int) (short) 0, 10);
        int[][] intArray71 = null;
        strassenMatrixMultiplication0.join(intArray64, intArray71, (int) (short) 10, (int) (short) 1);
        int[][] intArray75 = null;
        int[] intArray80 = new int[] { (short) -1, (-1), '#', (byte) -1 };
        int[] intArray85 = new int[] { (short) -1, (-1), '#', (byte) -1 };
        int[][] intArray86 = new int[][] { intArray80, intArray85 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray87 = strassenMatrixMultiplication0.multiply(intArray75, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test6162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6162");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication10.add(intArray18, intArray41);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication4.sub(intArray18, intArray70);
        int[][] intArray72 = null;
        strassenMatrixMultiplication3.join(intArray71, intArray72, (int) (short) 1, (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication76.sub(intArray84, intArray88);
        strassenMatrixMultiplication2.split(intArray71, intArray84, (int) (byte) 0, (int) (byte) 100);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray84, intArray93);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray95, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6163");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.sub(intArray92, intArray93);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6164");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication3.sub(intArray11, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray31 = null;
        int[][] intArray32 = new int[][] {};
        strassenMatrixMultiplication30.split(intArray31, intArray32, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication36 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray55 = new int[][] { intArray42, intArray48, intArray54 };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray81 = new int[][] { intArray60, intArray65, intArray70, intArray75, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication36.multiply(intArray55, intArray81);
        int[][] intArray83 = strassenMatrixMultiplication24.add(intArray32, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication23.sub(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication17.sub(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication3.sub(intArray85, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication2.sub(intArray89, intArray90);
        strassenMatrixMultiplication0.split(intArray1, intArray91, 0, (int) (byte) 100);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (short) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test6165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6165");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        strassenMatrixMultiplication3.split(intArray11, intArray23, (int) 'a', (int) (byte) 1);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.sub(intArray11, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        strassenMatrixMultiplication2.join(intArray88, intArray94, 100, 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.add(intArray1, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test6166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6166");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.add(intArray64, intArray68);
        strassenMatrixMultiplication0.split(intArray1, intArray69, (int) (short) -1, (int) (byte) -1);
        int[][] intArray73 = null;
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray73, intArray74, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test6167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6167");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray71 = new int[] { (short) 0 };
        int[] intArray73 = new int[] { (short) 0 };
        int[][] intArray74 = new int[][] { intArray71, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication15.multiply(intArray21, intArray74);
        strassenMatrixMultiplication8.join(intArray11, intArray75, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication6.split(intArray7, intArray11, (int) '#', (int) (byte) 1);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray11, intArray82);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication90 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray91 = null;
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication90.split(intArray91, intArray92, (int) '4', (-1));
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication84.sub(intArray92, intArray96);
        int[][] intArray98 = null;
        int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray92, intArray98);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test6168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6168");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication3.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication2.sub(intArray81, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray1, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test6169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6169");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (byte) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test6170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6170");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray63 = new int[] { 100, '#', 10 };
        int[][] intArray64 = new int[][] { intArray63 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray64, intArray67, (int) (short) 0, (int) (short) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray76, intArray80);
        java.lang.Class<?> wildcardClass82 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test6171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6171");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        int[][] intArray62 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication63 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray64 = null;
        int[][] intArray65 = new int[][] {};
        strassenMatrixMultiplication63.split(intArray64, intArray65, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray62, intArray65, (int) (short) -1, (int) (byte) 0);
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication1.add(intArray65, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication0.add(intArray65, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test6172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6172");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray10 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray11 = new int[][] { intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication6.sub(intArray11, intArray57);
        int[] intArray65 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray65, intArray71, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication5.add(intArray59, intArray78);
        int[][] intArray80 = new int[][] {};
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication5.add(intArray80, intArray81);
        strassenMatrixMultiplication3.split(intArray4, intArray82, (int) (short) 10, (int) (byte) 1);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray82, intArray86);
        int[][] intArray88 = null;
        strassenMatrixMultiplication1.join(intArray87, intArray88, (int) (byte) 10, (int) (short) -1);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray87, intArray92);
        java.lang.Class<?> wildcardClass94 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test6173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6173");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        int[][] intArray14 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray34 = null;
        int[][] intArray35 = new int[][] {};
        strassenMatrixMultiplication33.split(intArray34, intArray35, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication39 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray57 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray58 = new int[][] { intArray45, intArray51, intArray57 };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray84 = new int[][] { intArray63, intArray68, intArray73, intArray78, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication39.multiply(intArray58, intArray84);
        int[][] intArray86 = strassenMatrixMultiplication27.add(intArray35, intArray85);
        strassenMatrixMultiplication15.split(intArray23, intArray35, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray14, intArray23, 0, 10);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test6174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6174");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication4.add(intArray85, intArray88);
        strassenMatrixMultiplication2.split(intArray3, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray85, intArray93);
        int[][] intArray95 = null;
        strassenMatrixMultiplication0.join(intArray85, intArray95, 1, 10);
        java.lang.Class<?> wildcardClass99 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test6175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6175");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        strassenMatrixMultiplication8.split(intArray16, intArray28, (int) 'a', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        int[][] intArray89 = strassenMatrixMultiplication7.sub(intArray28, intArray84);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication1.sub(intArray89, intArray90);
        int[][] intArray92 = null;
        strassenMatrixMultiplication0.join(intArray89, intArray92, 0, (int) (short) 0);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test6176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6176");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.add(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.multiply(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test6177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6177");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication1.join(intArray79, intArray85, (int) (short) 1, (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.add(intArray79, intArray89);
        java.lang.Class<?> wildcardClass91 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test6178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6178");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[][] intArray68 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.sub(intArray68, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test6179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6179");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray71);
        strassenMatrixMultiplication1.split(intArray9, intArray21, (int) 'a', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray9, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) ' ', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test6180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6180");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.add(intArray9, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray87, intArray88, 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test6181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6181");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication4.add(intArray85, intArray88);
        strassenMatrixMultiplication2.split(intArray3, intArray85, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.add(intArray85, intArray93);
        int[][] intArray95 = null;
        strassenMatrixMultiplication0.join(intArray85, intArray95, 1, 10);
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test6182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6182");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication61 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray62 = null;
        int[][] intArray63 = new int[][] {};
        strassenMatrixMultiplication61.split(intArray62, intArray63, (int) '4', (-1));
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.add(intArray63, intArray67);
        int[][] intArray69 = new int[][] {};
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        int[][] intArray72 = null;
        strassenMatrixMultiplication0.join(intArray71, intArray72, 0, (int) '#');
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test6183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6183");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray63 = new int[] { 100, '#', 10 };
        int[][] intArray64 = new int[][] { intArray63 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray64, intArray67, (int) (short) 0, (int) (short) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray76, intArray80);
        java.lang.Class<?> wildcardClass82 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test6184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6184");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        int[][] intArray20 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        strassenMatrixMultiplication14.split(intArray20, intArray29, (int) 'a', 1);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray29, intArray84, 1, (int) (short) 0);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray88, intArray89, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test6185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6185");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray48 = new int[][] { intArray35, intArray41, intArray47 };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray74 = new int[][] { intArray53, intArray58, intArray63, intArray68, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication29.multiply(intArray48, intArray74);
        int[][] intArray76 = strassenMatrixMultiplication17.add(intArray25, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray25, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray80, (int) (short) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test6186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6186");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication15.sub(intArray75, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray75, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray79, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[] intArray88 = new int[] {};
        int[] intArray89 = new int[] {};
        int[] intArray90 = new int[] {};
        int[] intArray91 = new int[] {};
        int[][] intArray92 = new int[][] { intArray88, intArray89, intArray90, intArray91 };
        int[][] intArray93 = strassenMatrixMultiplication3.add(intArray84, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication2.add(intArray84, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray1, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test6187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6187");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray66, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray66, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray71, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test6188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6188");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication1.join(intArray79, intArray85, (int) (short) 1, (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.add(intArray79, intArray89);
        java.lang.Class<?> wildcardClass91 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test6189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6189");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication17.sub(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray77, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.add(intArray82, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test6190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6190");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray80, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) -1, (int) (byte) -1);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray90, (int) (short) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test6191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6191");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication70 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication70.add(intArray84, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray84, intArray87);
        int[][] intArray89 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication90 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray91 = null;
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication90.split(intArray91, intArray92, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray91, (-1), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test6192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6192");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication7.sub(intArray67, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray67, intArray70);
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray70, intArray72, (int) (short) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test6193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6193");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication1.join(intArray79, intArray85, (int) (short) 1, (-1));
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication0.add(intArray79, intArray89);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test6194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6194");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication1.sub(intArray8, intArray81);
        int[][] intArray83 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray83, (int) 'a', (int) ' ');
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray87, intArray88, (int) (byte) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test6195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6195");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        int[][] intArray17 = null;
        int[][] intArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray17, intArray18, (int) (short) 1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
    }

    @Test
    public void test6196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6196");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication7.sub(intArray67, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.sub(intArray69, intArray70);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication72.sub(intArray80, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = strassenMatrixMultiplication1.add(intArray80, intArray87);
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.add(intArray87, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test6197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6197");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        strassenMatrixMultiplication9.split(intArray17, intArray29, (int) 'a', (int) (byte) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.sub(intArray17, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray85, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication1.add(intArray85, intArray88);
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray89, intArray90, (int) (byte) -1, (int) (byte) -1);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test6198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6198");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray80, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) -1, (int) (byte) -1);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test6199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6199");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray70);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) 'a', (int) (byte) 1);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray75, intArray76, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test6200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6200");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test6201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6201");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication1.sub(intArray8, intArray81);
        int[][] intArray83 = null;
        strassenMatrixMultiplication0.join(intArray82, intArray83, (int) 'a', (int) ' ');
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test6202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6202");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[][] intArray60 = null;
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray60, intArray61, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test6203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6203");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        int[][] intArray15 = null;
        int[][] intArray16 = strassenMatrixMultiplication0.add(intArray14, intArray15);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray22 = new int[][] { intArray21 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray42 = new int[][] { intArray29, intArray35, intArray41 };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray68 = new int[][] { intArray47, intArray52, intArray57, intArray62, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication23.multiply(intArray42, intArray68);
        int[][] intArray70 = strassenMatrixMultiplication17.sub(intArray22, intArray68);
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray72 = strassenMatrixMultiplication0.multiply(intArray68, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test6204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6204");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication20.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.sub(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray87, intArray88, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test6205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6205");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication79.sub(intArray87, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray92, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6206");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        strassenMatrixMultiplication0.split(intArray6, intArray75, (int) (short) 10, 10);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test6207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6207");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray78);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication20.add(intArray82, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication20.sub(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication14.sub(intArray88, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray88, intArray93);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray95, intArray96, (int) (short) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test6208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6208");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        int[][] intArray13 = null;
        int[][] intArray14 = strassenMatrixMultiplication1.sub(intArray9, intArray13);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        strassenMatrixMultiplication0.split(intArray13, intArray74, 0, (int) (byte) 0);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray78, intArray79, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test6209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6209");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        int[][] intArray79 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication80.sub(intArray88, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray79, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test6210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6210");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray81 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray67, intArray74, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray33, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.add(intArray12, intArray33);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 10, 10);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test6211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6211");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = null;
        int[][] intArray13 = strassenMatrixMultiplication0.sub(intArray8, intArray12);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray28 = null;
        int[][] intArray29 = new int[][] {};
        strassenMatrixMultiplication27.split(intArray28, intArray29, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication33 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray51 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray52 = new int[][] { intArray39, intArray45, intArray51 };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray78 = new int[][] { intArray57, intArray62, intArray67, intArray72, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication33.multiply(intArray52, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication21.add(intArray29, intArray52);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication15.sub(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication14.add(intArray80, intArray83);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (byte) -1, (int) (byte) -1);
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray89, intArray90, (int) (byte) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test6212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6212");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray64);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray68, intArray69, (int) (short) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test6213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6213");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication78.sub(intArray86, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication7.sub(intArray86, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.add(intArray6, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test6214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6214");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication6.sub(intArray71, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication6.sub(intArray76, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        java.lang.Class<?> wildcardClass84 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test6215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6215");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray61, intArray64, (int) (short) -1, (int) (byte) 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication71.sub(intArray79, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray85, intArray87, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test6216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6216");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray76);
        strassenMatrixMultiplication6.split(intArray14, intArray26, (int) 'a', (int) (byte) 1);
        int[][] intArray81 = null;
        strassenMatrixMultiplication0.join(intArray26, intArray81, (int) 'a', (int) (byte) 10);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray85, intArray86, (int) (short) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test6217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6217");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication6.sub(intArray71, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication6.sub(intArray76, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        java.lang.Class<?> wildcardClass84 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test6218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6218");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        int[][] intArray10 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[] intArray65 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray72 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray79 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray65, intArray72, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication11.sub(intArray31, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication4.add(intArray10, intArray31);
        strassenMatrixMultiplication2.split(intArray3, intArray10, (int) (byte) 10, (int) '#');
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication1.add(intArray10, intArray86);
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication0.sub(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray90, intArray91, 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }
}

